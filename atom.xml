<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>尛孟的博客</title>
  <icon>https://www.gravatar.com/avatar/3dc82ab4d3d62d142a265730033bc3a4</icon>
  <subtitle>想法总是无法付诸实践…</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-01-16T08:53:59.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>尛孟</name>
    <email>295565453@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>小程序-API-网络</title>
    <link href="http://yoursite.com/2018/01/16/%E5%B0%8F%E7%A8%8B%E5%BA%8F-API-%E7%BD%91%E7%BB%9C/"/>
    <id>http://yoursite.com/2018/01/16/小程序-API-网络/</id>
    <published>2018-01-16T08:01:31.000Z</published>
    <updated>2018-01-16T08:53:59.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>小程序-组件-地图&amp;画布</title>
    <link href="http://yoursite.com/2018/01/16/%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E7%BB%84%E4%BB%B6-%E5%9C%B0%E5%9B%BE-%E7%94%BB%E5%B8%83/"/>
    <id>http://yoursite.com/2018/01/16/小程序-组件-地图-画布/</id>
    <published>2018-01-16T07:48:44.000Z</published>
    <updated>2018-01-16T09:03:55.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><blockquote><p>地图</p><blockquote><p>不能在 <code>scroll-view、swiper、picker-view、movable-view</code> 中使用 map 组件。</p><p><strong>map 组件使用的经纬度是火星坐标系，调用 <code>wx.getLocation</code> 接口需要指定 type 为 gcj02</strong></p><p>可以用<code>wx.createMapContext</code>获取地图上下文</p></blockquote></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">map</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">longitude</span>=<span class="string">"&#123;&#123;longitude&#125;&#125;"</span> <span class="attr">latitude</span>=<span class="string">"&#123;&#123;latitude&#125;&#125;"</span> <span class="attr">scale</span>=<span class="string">"14"</span> <span class="attr">controls</span>=<span class="string">"&#123;&#123;controls&#125;&#125;"</span></span></span><br><span class="line"><span class="tag"><span class="attr">bindcontroltap</span>=<span class="string">"controltap"</span> <span class="attr">markers</span>=<span class="string">"&#123;&#123;markers&#125;&#125;"</span> <span class="attr">bindmarkertap</span>=<span class="string">"markertap"</span></span></span><br><span class="line"><span class="tag"><span class="attr">polyline</span>=<span class="string">"&#123;&#123;polyline&#125;&#125;"</span> <span class="attr">circles</span>=<span class="string">"&#123;&#123;circles&#125;&#125;"</span> <span class="attr">bindregionchange</span>=<span class="string">"regionchange"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">show-location</span> <span class="attr">style</span>=<span class="string">"width: 100%; height: 350px;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span>   <span class="comment">&lt;!-- 显示基本地图 --&gt;</span></span><br></pre></td></tr></table></figure><h4 id="markers–标注，polyline–折线，circles–圆形，controls–控件"><a href="#markers–标注，polyline–折线，circles–圆形，controls–控件" class="headerlink" title="markers–标注，polyline–折线，circles–圆形，controls–控件"></a>markers–标注，polyline–折线，circles–圆形，controls–控件</h4><ul><li><h5 id="markers"><a href="#markers" class="headerlink" title="markers"></a>markers</h5><p>除了显示基本的地图,还可以在地图上添加大头针标识</p><blockquote><p>需要传入marker的经纬度、显示的图标</p><p>点击marker时会调用map的bindmarkertap事件</p><p>每一个marker最好设置上Number类型的id,保证更新时性能更好</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">markers: [&#123;</span><br><span class="line">  <span class="comment">//显示图标</span></span><br><span class="line">      iconPath: <span class="string">"/resources/others.png"</span>,</span><br><span class="line">  <span class="comment">//marker的id</span></span><br><span class="line">      id: <span class="number">0</span>,</span><br><span class="line">  <span class="comment">//经纬度</span></span><br><span class="line">      latitude: <span class="number">23.099994</span>,</span><br><span class="line">      longitude: <span class="number">113.324520</span>,</span><br><span class="line">  <span class="comment">//图标宽高</span></span><br><span class="line">      width: <span class="number">50</span>,</span><br><span class="line">      height: <span class="number">50</span></span><br><span class="line">    &#125;],</span><br></pre></td></tr></table></figure><p><img src="http://www.z4a.net/images/2018/01/16/_20180116162650.png" alt="大头针标识"></p></li><li><h5 id="callout"><a href="#callout" class="headerlink" title="callout"></a>callout</h5><p>在marker上显示出气泡label</p><p>点击气泡时调起map的bindcallouttap事件</p><blockquote><p>只是显示文本标题,不是点击后弹框</p></blockquote></li><li><h5 id="polyline"><a href="#polyline" class="headerlink" title="polyline"></a>polyline</h5><p>指定一系列坐标点,然后会在地图上连成一条线,可以用来做运动轨迹</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">polyline: [&#123;</span><br><span class="line">      points: [&#123;  <span class="comment">//经纬度数组</span></span><br><span class="line">        longitude: <span class="number">113.3245211</span>,</span><br><span class="line">        latitude: <span class="number">23.10229</span></span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        longitude: <span class="number">113.324520</span>,</span><br><span class="line">        latitude: <span class="number">23.21229</span></span><br><span class="line">      &#125;],</span><br><span class="line">  <span class="comment">//线的颜色</span></span><br><span class="line">      color:<span class="string">"#FF0000DD"</span>,</span><br><span class="line">  <span class="comment">//线宽</span></span><br><span class="line">      width: <span class="number">2</span>,</span><br><span class="line">  <span class="comment">//是否虚线</span></span><br><span class="line">      dottedLine: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">//是否带箭头   可以通过arrowIconPath更换箭头的图标</span></span><br><span class="line">    arrowLine: <span class="literal">false</span>,  </span><br><span class="line">    &#125;],</span><br></pre></td></tr></table></figure></li><li><h5 id="circles"><a href="#circles" class="headerlink" title="circles"></a>circles</h5><p>在地图上画出一个圆</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">circles: [&#123;</span><br><span class="line">  <span class="comment">//经纬度</span></span><br><span class="line">      latitude: <span class="string">'40.007153'</span>,</span><br><span class="line">      longitude: <span class="string">'116.491081'</span>,</span><br><span class="line">  <span class="comment">//描边的颜色</span></span><br><span class="line">      color: <span class="string">'#FF0000DD'</span>,</span><br><span class="line">  <span class="comment">//填充颜色</span></span><br><span class="line">      fillColor: <span class="string">'#7cb5ec88'</span>,</span><br><span class="line">  <span class="comment">//半径</span></span><br><span class="line">      radius: <span class="number">400</span>,</span><br><span class="line">  <span class="comment">//描边的宽度</span></span><br><span class="line">      strokeWidth: <span class="number">2</span></span><br><span class="line">    &#125;],</span><br></pre></td></tr></table></figure></li><li><h5 id="controls"><a href="#controls" class="headerlink" title="controls"></a>controls</h5><p>在地图上显示控件,控件不会随着地图移动</p><p>点击控件时会调起map的bindcontroltap事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">controls: [&#123;</span><br><span class="line">  <span class="comment">//控件id</span></span><br><span class="line">      id: <span class="number">1</span>,</span><br><span class="line">  <span class="comment">//显示的图标</span></span><br><span class="line">      iconPath: <span class="string">'/resources/location.png'</span>,</span><br><span class="line">  <span class="comment">//控件在地图上的位置</span></span><br><span class="line">      position: &#123;</span><br><span class="line">        left: <span class="number">0</span>,</span><br><span class="line">        top: <span class="number">300</span> - <span class="number">50</span>,</span><br><span class="line">        width: <span class="number">50</span>,</span><br><span class="line">        height: <span class="number">50</span></span><br><span class="line">      &#125;,</span><br><span class="line">  <span class="comment">//是否可以点击</span></span><br><span class="line">      clickable: <span class="literal">true</span></span><br><span class="line">    &#125;]</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="canvas"><a href="#canvas" class="headerlink" title="canvas"></a>canvas</h3><blockquote><p>画布</p><blockquote><p>同一页面中的 canvas-id 不可重复，如果使用一个已经出现过的 canvas-id，该 canvas 标签对应的画布将被隐藏并不再正常工作</p><p>不能在 <code>scroll-view、swiper、picker-view、movable-view</code> 中使用 canvas 组件。</p><p>同过调用<code>x.createCanvasContext</code>来获取画布上下文</p></blockquote></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">style</span>=<span class="string">"width: 300px; height: 200px;"</span> <span class="attr">canvas-id</span>=<span class="string">"firstCanvas"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 当使用绝对定位时，文档流后边的 canvas 的显示层级高于前边的 canvas --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">style</span>=<span class="string">"width: 400px; height: 500px;"</span> <span class="attr">canvas-id</span>=<span class="string">"secondCanvas"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 因为 canvas-id 与前一个 canvas 重复，该 canvas 不会显示，并会发送一个错误事件到 AppService --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">style</span>=<span class="string">"width: 400px; height: 500px;"</span> <span class="attr">canvas-id</span>=<span class="string">"secondCanvas"</span> <span class="attr">binderror</span>=<span class="string">"canvasIdErrorCallback"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  canvasIdErrorCallback: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//发生错误</span></span><br><span class="line">    <span class="built_in">console</span>.error(e.detail.errMsg)</span><br><span class="line">  &#125;,</span><br><span class="line">  onReady: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 使用 wx.createContext 获取绘图上下文 context</span></span><br><span class="line">    <span class="keyword">var</span> context = wx.createCanvasContext(<span class="string">'firstCanvas'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绘制一个矩形</span></span><br><span class="line">    context.setStrokeStyle(<span class="string">"#00ff00"</span>)</span><br><span class="line">    context.setLineWidth(<span class="number">5</span>)</span><br><span class="line">    context.rect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="number">200</span>)</span><br><span class="line">    context.stroke()</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  也可以直接调用wx.drawCanvas，通过canvasId指定在哪张画布上绘制,通过actions指定绘制行为</span></span><br><span class="line"><span class="comment">     *  注意convasId可以为数字表示也可以用字符串表示，就是一个绘制对象的标识，并且可以指定多个</span></span><br><span class="line"><span class="comment">        wx.drawCanvas(&#123;</span></span><br><span class="line"><span class="comment">      //画布标识，传入&lt;canvas/&gt;的cavas-id</span></span><br><span class="line"><span class="comment">      canvasId: 'identify',</span></span><br><span class="line"><span class="comment">      //获取绘制行为， 把这个上下文的绘制"画到指定画布"</span></span><br><span class="line"><span class="comment">      actions: context.getActions(),</span></span><br><span class="line"><span class="comment">    &#125;)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    context.setStrokeStyle(<span class="string">"#ff0000"</span>)</span><br><span class="line">    context.setLineWidth(<span class="number">2</span>)</span><br><span class="line">    context.moveTo(<span class="number">160</span>, <span class="number">100</span>)</span><br><span class="line">    context.arc(<span class="number">100</span>, <span class="number">100</span>, <span class="number">60</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI, <span class="literal">true</span>)</span><br><span class="line">    context.moveTo(<span class="number">140</span>, <span class="number">100</span>)</span><br><span class="line">    context.arc(<span class="number">100</span>, <span class="number">100</span>, <span class="number">40</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI, <span class="literal">false</span>)</span><br><span class="line">    context.moveTo(<span class="number">85</span>, <span class="number">80</span>)</span><br><span class="line">    context.arc(<span class="number">80</span>, <span class="number">80</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI, <span class="literal">true</span>)</span><br><span class="line">    context.moveTo(<span class="number">125</span>, <span class="number">80</span>)</span><br><span class="line">    context.arc(<span class="number">120</span>, <span class="number">80</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI, <span class="literal">true</span>)</span><br><span class="line">    context.stroke()</span><br><span class="line">    context.draw()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h3 id=&quot;map&quot;&gt;&lt;a href=&quot;#map&quot; class=&quot;headerlink&quot; title=&quot;map&quot;&gt;&lt;/a&gt;map&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;地图&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不能在 &lt;code&gt;scroll-view、swi
      
    
    </summary>
    
      <category term="小程序" scheme="http://yoursite.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="框架学习" scheme="http://yoursite.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="组件" scheme="http://yoursite.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/%E7%BB%84%E4%BB%B6/"/>
    
    
      <category term="小程序" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>小程序-组件-媒体组件</title>
    <link href="http://yoursite.com/2018/01/16/%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E7%BB%84%E4%BB%B6-%E5%AA%92%E4%BD%93%E7%BB%84%E4%BB%B6/"/>
    <id>http://yoursite.com/2018/01/16/小程序-组件-媒体组件/</id>
    <published>2018-01-16T07:15:41.000Z</published>
    <updated>2018-01-16T08:53:53.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h4 id="audio"><a href="#audio" class="headerlink" title="audio"></a>audio</h4><blockquote><p>音频</p></blockquote><p><img src="http://www.z4a.net/images/2018/01/16/audio.png" alt="音频样式"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">poster</span>=<span class="string">"&#123;&#123;poster&#125;&#125;"</span> <span class="attr">name</span>=<span class="string">"&#123;&#123;name&#125;&#125;"</span> <span class="attr">author</span>=<span class="string">"&#123;&#123;author&#125;&#125;"</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;src&#125;&#125;"</span> <span class="attr">id</span>=<span class="string">"myAudio"</span> <span class="attr">controls</span> <span class="attr">loop</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  其他组件通过通过createAudioContext(id)获取audio上下文context并进行音频操作 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"primary"</span> <span class="attr">bindtap</span>=<span class="string">"audioPlay"</span>&gt;</span>播放<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"primary"</span> <span class="attr">bindtap</span>=<span class="string">"audioPause"</span>&gt;</span>暂停<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"primary"</span> <span class="attr">bindtap</span>=<span class="string">"audio14"</span>&gt;</span>设置当前播放时间为14秒<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"primary"</span> <span class="attr">bindtap</span>=<span class="string">"audioStart"</span>&gt;</span>回到开头<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  onReady: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 使用 wx.createAudioContext 获取 audio 上下文 context</span></span><br><span class="line">    <span class="keyword">this</span>.audioCtx = wx.createAudioContext(<span class="string">'myAudio'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    poster: <span class="string">'http://y.gtimg.cn/music/photo_new/T002R300x300M000003rsKF44GyaSk.jpg?max_age=2592000'</span>,</span><br><span class="line">    name: <span class="string">'此时此刻'</span>,</span><br><span class="line">    author: <span class="string">'许巍'</span>,</span><br><span class="line">    src: <span class="string">'http://ws.stream.qqmusic.qq.com/M500001VfvsJ21xFqb.mp3?guid=ffffffff82def4af4b12b3cd9337d5e7&amp;uin=346897220&amp;vkey=6292F51E1E384E06DCBDC9AB7C49FD713D632D313AC4858BACB8DDD29067D3C601481D36E62053BF8DFEAF74C0A5CCFADD6471160CAF3E6A&amp;fromtag=46'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  audioPlay: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//用audio上下文控制</span></span><br><span class="line">    <span class="keyword">this</span>.audioCtx.play()</span><br><span class="line">  &#125;,</span><br><span class="line">  audioPause: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//用audio上下文控制</span></span><br><span class="line">    <span class="keyword">this</span>.audioCtx.pause()</span><br><span class="line">  &#125;,</span><br><span class="line">  audio14: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//用audio上下文控制</span></span><br><span class="line">    <span class="keyword">this</span>.audioCtx.seek(<span class="number">14</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  audioStart: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//用audio上下文控制</span></span><br><span class="line">    <span class="keyword">this</span>.audioCtx.seek(<span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h4 id="image"><a href="#image" class="headerlink" title="image"></a>image</h4><blockquote><p>图片</p><p>image组件默认宽度300px、高度225px</p></blockquote><p>图片有13中显示模式,4中是缩放模式,9种是裁剪模式</p><p><img src="http://www.z4a.net/images/2018/01/16/_20180116152934.png" alt="图片mode类型"></p><hr><h4 id="video"><a href="#video" class="headerlink" title="video"></a>video</h4><blockquote><p>视频</p><blockquote><p>不能在<code>scroll-view、swiper、picker-view、movable-view</code>中使用 video 组件。</p></blockquote></blockquote><p><img src="http://www.z4a.net/images/2018/01/16/_20180116153142.png" alt="视频样式"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"section tc"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">"myVideo"</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;src&#125;&#125;"</span> <span class="attr">danmu-list</span>=<span class="string">"&#123;&#123;danmuList&#125;&#125;"</span> <span class="attr">enable-danmu</span> <span class="attr">danmu-btn</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!--  其他组件通过通过wx.createVideoContext(id)获取video上下文context并进行视频操作 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"btn-area"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">"bindButtonTap"</span>&gt;</span>获取视频<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">bindblur</span>=<span class="string">"bindInputBlur"</span>/&gt;</span>    <span class="comment">&lt;!-- 弹幕输入框 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">"bindSendDanmu"</span>&gt;</span>发送弹幕<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//随机rgb颜色值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandomColor</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> rgb = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; <span class="number">3</span>; ++i)&#123;</span><br><span class="line">    <span class="keyword">let</span> color = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>).toString(<span class="number">16</span>)</span><br><span class="line">    color = color.length == <span class="number">1</span> ? <span class="string">'0'</span> + color : color</span><br><span class="line">    rgb.push(color)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'#'</span> + rgb.join(<span class="string">''</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Page(&#123;</span><br><span class="line">  onReady: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 使用 wx.createVideoContext 获取 video 上下文 context</span></span><br><span class="line">    <span class="keyword">this</span>.videoContext = wx.createVideoContext(<span class="string">'myVideo'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  inputValue: <span class="string">''</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        src: <span class="string">''</span>,</span><br><span class="line">      <span class="comment">//默认的弹幕列表</span></span><br><span class="line">    danmuList: [</span><br><span class="line">      &#123;</span><br><span class="line">        text: <span class="string">'第 1s 出现的弹幕'</span>,</span><br><span class="line">        color: <span class="string">'#ff0000'</span>,</span><br><span class="line">        time: <span class="number">1</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        text: <span class="string">'第 3s 出现的弹幕'</span>,</span><br><span class="line">        color: <span class="string">'#ff00ff'</span>,</span><br><span class="line">        time: <span class="number">3</span></span><br><span class="line">    &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">  bindInputBlur: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//获取弹幕文本</span></span><br><span class="line">    <span class="keyword">this</span>.inputValue = e.detail.value</span><br><span class="line">  &#125;,</span><br><span class="line">  bindButtonTap: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span></span><br><span class="line"><span class="comment">//拍摄视频或从手机相册中选视频，返回视频的临时文件路径</span></span><br><span class="line">    wx.chooseVideo(&#123;</span><br><span class="line">      sourceType: [<span class="string">'album'</span>, <span class="string">'camera'</span>],</span><br><span class="line">      maxDuration: <span class="number">60</span>,</span><br><span class="line">      camera: [<span class="string">'front'</span>,<span class="string">'back'</span>],</span><br><span class="line">      success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        that.setData(&#123;</span><br><span class="line">          src: res.tempFilePath</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  bindSendDanmu: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//调用video上下文实时发送弹幕</span></span><br><span class="line">    <span class="keyword">this</span>.videoContext.sendDanmu(&#123;</span><br><span class="line">      text: <span class="keyword">this</span>.inputValue,</span><br><span class="line">      color: getRandomColor()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h4 id="camera"><a href="#camera" class="headerlink" title="camera"></a>camera</h4><blockquote><p>系统相机</p><p>需要用户授权 scope.camera</p><blockquote><p>不能在 <code>scroll-view、swiper、picker-view、movable-view</code> 中使用 camera 组件。</p></blockquote></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">camera</span> <span class="attr">device-position</span>=<span class="string">"back"</span> <span class="attr">flash</span>=<span class="string">"off"</span> <span class="attr">binderror</span>=<span class="string">"error"</span> <span class="attr">style</span>=<span class="string">"width: 100%; height: 300px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">camera</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"primary"</span> <span class="attr">bindtap</span>=<span class="string">"takePhoto"</span>&gt;</span>拍照<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>预览<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">mode</span>=<span class="string">"widthFix"</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;src&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">    takePhoto() &#123;</span><br><span class="line">      <span class="comment">//获取相机上下文 context</span></span><br><span class="line">        <span class="keyword">const</span> ctx = wx.createCameraContext()</span><br><span class="line">        ctx.takePhoto(&#123;</span><br><span class="line">            quality: <span class="string">'high'</span>,</span><br><span class="line">            success: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">                    src: res.tempImagePath</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    error(e) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e.detail)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h4 id="live-player"><a href="#live-player" class="headerlink" title="live-player"></a>live-player</h4><blockquote><p>实时音视频播放</p><blockquote><p>不能在 <code>scroll-view、swiper、picker-view、movable-view</code> 中使用 live-player 组件。</p><p>不能直接用,要在小程序后台申请审核</p><p>可以通过<code>wx.createLivePlayerContext</code>获取live-player上下文context</p></blockquote></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">live-player</span> <span class="attr">src</span>=<span class="string">"https://domain/pull_stream"</span> <span class="attr">mode</span>=<span class="string">"RTC"</span> <span class="attr">autoplay</span> <span class="attr">bindstatechange</span>=<span class="string">"statechange"</span> <span class="attr">binderror</span>=<span class="string">"error"</span> <span class="attr">style</span>=<span class="string">"width: 300px; height: 225px;"</span> /&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="live-pusher"><a href="#live-pusher" class="headerlink" title="live-pusher"></a>live-pusher</h4><blockquote><p>实时音视频录制</p><blockquote><p>不能在 <code>scroll-view、swiper、picker-view、movable-view</code> 中使用 live-pusher 组件。</p><p>不能直接用,要在小程序后台申请审核</p><p>可以通过<code>wx.createLivePusherContext</code>获取live-player上下文context</p></blockquote></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">live-pusher</span> <span class="attr">url</span>=<span class="string">"https://domain/push_stream"</span> <span class="attr">mode</span>=<span class="string">"RTC"</span> <span class="attr">autopush</span> <span class="attr">bindstatechange</span>=<span class="string">"statechange"</span> <span class="attr">style</span>=<span class="string">"width: 300px; height: 225px;"</span> /&gt;</span></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h4 id=&quot;audio&quot;&gt;&lt;a href=&quot;#audio&quot; class=&quot;headerlink&quot; title=&quot;audio&quot;&gt;&lt;/a&gt;audio&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;音频&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http:/
      
    
    </summary>
    
      <category term="小程序" scheme="http://yoursite.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="框架学习" scheme="http://yoursite.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="组件" scheme="http://yoursite.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/%E7%BB%84%E4%BB%B6/"/>
    
    
      <category term="小程序" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>小程序-组件-表单组件</title>
    <link href="http://yoursite.com/2018/01/15/%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E7%BB%84%E4%BB%B6-%E8%A1%A8%E5%8D%95%E7%BB%84%E4%BB%B6/"/>
    <id>http://yoursite.com/2018/01/15/小程序-组件-表单组件/</id>
    <published>2018-01-15T09:09:43.000Z</published>
    <updated>2018-01-16T08:53:07.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h4 id="button"><a href="#button" class="headerlink" title="button"></a>button</h4><blockquote><p>按钮,没啥特别的,需要特别注意的是</p><blockquote><p>在bindgetphonenumber 等返回加密信息的回调中调用 wx.login 登录，可能会刷新登录态。此时服务器使用 code 换取的 sessionKey 不是加密时使用的 sessionKey，导致解密失败。建议开发者提前进行 login；或者在回调中先使用 checkSession 进行登录态检查，避免 login 刷新登录态。</p></blockquote></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"default"</span> <span class="attr">size</span>=<span class="string">"&#123;&#123;defaultSize&#125;&#125;"</span> <span class="attr">loading</span>=<span class="string">"&#123;&#123;loading&#125;&#125;"</span> <span class="attr">plain</span>=<span class="string">"&#123;&#123;plain&#125;&#125;"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">disabled</span>=<span class="string">"&#123;&#123;disabled&#125;&#125;"</span> <span class="attr">bindtap</span>=<span class="string">"default"</span> <span class="attr">hover-class</span>=<span class="string">"other-button-hover"</span>&gt;</span> default <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"primary"</span> <span class="attr">size</span>=<span class="string">"&#123;&#123;primarySize&#125;&#125;"</span> <span class="attr">loading</span>=<span class="string">"&#123;&#123;loading&#125;&#125;"</span> <span class="attr">plain</span>=<span class="string">"&#123;&#123;plain&#125;&#125;"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">disabled</span>=<span class="string">"&#123;&#123;disabled&#125;&#125;"</span> <span class="attr">bindtap</span>=<span class="string">"primary"</span>&gt;</span> primary <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"warn"</span> <span class="attr">size</span>=<span class="string">"&#123;&#123;warnSize&#125;&#125;"</span> <span class="attr">loading</span>=<span class="string">"&#123;&#123;loading&#125;&#125;"</span> <span class="attr">plain</span>=<span class="string">"&#123;&#123;plain&#125;&#125;"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">disabled</span>=<span class="string">"&#123;&#123;disabled&#125;&#125;"</span> <span class="attr">bindtap</span>=<span class="string">"warn"</span>&gt;</span> warn <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="checkbox-group-amp-checkbox"><a href="#checkbox-group-amp-checkbox" class="headerlink" title="checkbox-group &amp; checkbox"></a>checkbox-group &amp; checkbox</h4><blockquote><p>多项选择器,group中由多个checkbox组成</p><p>checkbox选中时会触发checkbox-group的<code>bindchange</code>事件</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">checkbox-group</span> <span class="attr">bindchange</span>=<span class="string">"checkboxChange"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"checkbox"</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;items&#125;&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">checkbox</span> <span class="attr">value</span>=<span class="string">"&#123;&#123;item.name&#125;&#125;"</span> <span class="attr">checked</span>=<span class="string">"&#123;&#123;item.checked&#125;&#125;"</span>/&gt;</span>&#123;&#123;item.value&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">checkbox-group</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="form"><a href="#form" class="headerlink" title="form"></a>form</h4><blockquote><p>表单,将组件内的用户输入的<switch> <input> <checkbox> <slider> <radio> <picker> 提交。</picker></radio></slider></checkbox></switch></p><p>当点击 <form> 表单中 formType 为 submit 的 <button> 组件时，会将表单组件中的 value 值进行提交，需要在表单组件中加上 name 来作为 key。</button></form></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">bindsubmit</span>=<span class="string">"formSubmit"</span> <span class="attr">bindreset</span>=<span class="string">"formReset"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">switch</span> <span class="attr">name</span>=<span class="string">"switch"</span>/&gt;</span>  <span class="comment">&lt;!-- 开关 --&gt;</span> </span><br><span class="line">   <span class="tag">&lt;<span class="name">slider</span> <span class="attr">name</span>=<span class="string">"slider"</span> <span class="attr">show-value</span> &gt;</span><span class="tag">&lt;/<span class="name">slider</span>&gt;</span>  <span class="comment">&lt;!-- 滑块 --&gt;</span> </span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"input"</span> <span class="attr">placeholder</span>=<span class="string">"占位文字"</span> /&gt;</span>  <span class="comment">&lt;!-- 输入框 --&gt;</span> </span><br><span class="line">   <span class="tag">&lt;<span class="name">radio-group</span> <span class="attr">name</span>=<span class="string">"radio-group"</span>&gt;</span>   <span class="comment">&lt;!-- 单选框 --&gt;</span> </span><br><span class="line">     <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">radio</span> <span class="attr">value</span>=<span class="string">"radio1"</span>/&gt;</span>单选1<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">radio</span> <span class="attr">value</span>=<span class="string">"radio2"</span>/&gt;</span>单选2<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">radio-group</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">checkbox-group</span> <span class="attr">name</span>=<span class="string">"checkbox"</span>&gt;</span>   <span class="comment">&lt;!-- 多选框 --&gt;</span> </span><br><span class="line">     <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">checkbox</span> <span class="attr">value</span>=<span class="string">"checkbox1"</span>/&gt;</span>多选1<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">checkbox</span> <span class="attr">value</span>=<span class="string">"checkbox2"</span>/&gt;</span>多选2<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">checkbox-group</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">button</span> <span class="attr">formType</span>=<span class="string">"submit"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span>  <span class="comment">&lt;!-- 提交表单按钮 --&gt;</span> </span><br><span class="line">   <span class="tag">&lt;<span class="name">button</span> <span class="attr">formType</span>=<span class="string">"reset"</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">button</span>&gt;</span>   <span class="comment">&lt;!-- 重设表单按钮 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="input"><a href="#input" class="headerlink" title="input"></a>input</h4><blockquote><p>输入框</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"可以自动聚焦的input"</span> <span class="attr">auto-focus</span>/&gt;</span>   <span class="comment">&lt;!-- 该属性即将废弃 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"在按钮点击的时候才聚焦"</span> <span class="attr">focus</span>=<span class="string">"&#123;&#123;focus&#125;&#125;"</span> /&gt;</span> <span class="comment">&lt;!-- 使用focus属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">"bindButtonTap"</span>&gt;</span>使得输入框获取焦点<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span>  <span class="attr">maxlength</span>=<span class="string">"10"</span> <span class="attr">placeholder</span>=<span class="string">"最大输入长度10"</span> /&gt;</span>  <span class="comment">&lt;!-- 控制长度 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span>  <span class="attr">bindinput</span>=<span class="string">"bindKeyInput"</span> <span class="attr">placeholder</span>=<span class="string">"输入同步到view中"</span>/&gt;</span> <span class="comment">&lt;!-- 监听内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span>  <span class="attr">bindinput</span>=<span class="string">"bindReplaceInput"</span> <span class="attr">placeholder</span>=<span class="string">"连续的两个1会变成2"</span> /&gt;</span>  <span class="comment">&lt;!-- 控制内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder-style</span>=<span class="string">"color:red"</span> <span class="attr">placeholder</span>=<span class="string">"占位符字体是红色的"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 键盘类型 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">password</span> <span class="attr">type</span>=<span class="string">"number"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">password</span> <span class="attr">type</span>=<span class="string">"text"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"digit"</span> <span class="attr">placeholder</span>=<span class="string">"带小数点的数字键盘"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"idcard"</span> <span class="attr">placeholder</span>=<span class="string">"身份证输入键盘"</span> /&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="label"><a href="#label" class="headerlink" title="label"></a>label</h4><blockquote><p>用来改进表单组件的可用性，使用<code>for</code>属性找到对应的id，或者将控件放在该标签下，当点击时，就会触发对应的控件。<strong><em>也就是能够实现点击该标签的文本的时候触发绑定的其他表单组件的事件</em></strong></p><p>内部有多个控件的时候默认触发第一个控件。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"section section_gap"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"section__title"</span>&gt;</span>表单组件在label内<span class="tag">&lt;/<span class="name">view</span>&gt;</span>  <span class="comment">&lt;!-- 点击文本能触发多选框事件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">checkbox-group</span> <span class="attr">class</span>=<span class="string">"group"</span> <span class="attr">bindchange</span>=<span class="string">"checkboxChange"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"label-1"</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;checkboxItems&#125;&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">checkbox</span> <span class="attr">hidden</span> <span class="attr">value</span>=<span class="string">"&#123;&#123;item.name&#125;&#125;"</span> <span class="attr">checked</span>=<span class="string">"&#123;&#123;item.checked&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">checkbox</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"label-1__icon"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"label-1__icon-checked"</span> <span class="attr">style</span>=<span class="string">"opacity:&#123;&#123;item.checked ? 1: 0&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"label-1__text"</span>&gt;</span>&#123;&#123;item.value&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">checkbox-group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"section section_gap"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"section__title"</span>&gt;</span>label用for标识表单组件<span class="tag">&lt;/<span class="name">view</span>&gt;</span> <span class="comment">&lt;!-- 点击文本能触发绑定的单选框事件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">radio-group</span> <span class="attr">class</span>=<span class="string">"group"</span> <span class="attr">bindchange</span>=<span class="string">"radioChange"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"label-2"</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;radioItems&#125;&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">radio</span> <span class="attr">id</span>=<span class="string">"&#123;&#123;item.name&#125;&#125;"</span> <span class="attr">hidden</span> <span class="attr">value</span>=<span class="string">"&#123;&#123;item.name&#125;&#125;"</span> <span class="attr">checked</span>=<span class="string">"&#123;&#123;item.checked&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">radio</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"label-2__icon"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"label-2__icon-checked"</span> <span class="attr">style</span>=<span class="string">"opacity:&#123;&#123;item.checked ? 1: 0&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"label-2__text"</span> <span class="attr">for</span>=<span class="string">"&#123;&#123;item.name&#125;&#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">radio-group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="picker"><a href="#picker" class="headerlink" title="picker"></a>picker</h4><blockquote><p>从底部弹起的滚动选择器，现支持五种选择器，通过mode来区分，分别是普通选择器，多列选择器，时间选择器，日期选择器，省市区选择器，默认是普通选择器。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"section"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"section__title"</span>&gt;</span>普通选择器<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">picker</span> <span class="attr">bindchange</span>=<span class="string">"bindPickerChange"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123;index&#125;&#125;"</span> <span class="attr">range</span>=<span class="string">"&#123;&#123;array&#125;&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"picker"</span>&gt;</span></span><br><span class="line">      当前选择：&#123;&#123;array[index]&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">picker</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"section"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"section__title"</span>&gt;</span>多列选择器<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">picker</span> <span class="attr">mode</span>=<span class="string">"multiSelector"</span> <span class="attr">bindchange</span>=<span class="string">"bindMultiPickerChange"</span> <span class="attr">bindcolumnchange</span>=<span class="string">"bindMultiPickerColumnChange"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123;multiIndex&#125;&#125;"</span> <span class="attr">range</span>=<span class="string">"&#123;&#123;multiArray&#125;&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"picker"</span>&gt;</span></span><br><span class="line">      当前选择：&#123;&#123;multiArray[0][multiIndex[0]]&#125;&#125;，&#123;&#123;multiArray[1][multiIndex[1]]&#125;&#125;，&#123;&#123;multiArray[2][multiIndex[2]]&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">picker</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"section"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"section__title"</span>&gt;</span>时间选择器<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">picker</span> <span class="attr">mode</span>=<span class="string">"time"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123;time&#125;&#125;"</span> <span class="attr">start</span>=<span class="string">"09:01"</span> <span class="attr">end</span>=<span class="string">"21:01"</span> <span class="attr">bindchange</span>=<span class="string">"bindTimeChange"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"picker"</span>&gt;</span></span><br><span class="line">      当前选择: &#123;&#123;time&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">picker</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"section"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"section__title"</span>&gt;</span>日期选择器<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">picker</span> <span class="attr">mode</span>=<span class="string">"date"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123;date&#125;&#125;"</span> <span class="attr">start</span>=<span class="string">"2015-09-01"</span> <span class="attr">end</span>=<span class="string">"2017-09-01"</span> <span class="attr">bindchange</span>=<span class="string">"bindDateChange"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"picker"</span>&gt;</span></span><br><span class="line">      当前选择: &#123;&#123;date&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">picker</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"section"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"section__title"</span>&gt;</span>省市区选择器<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">picker</span> <span class="attr">mode</span>=<span class="string">"region"</span> <span class="attr">bindchange</span>=<span class="string">"bindRegionChange"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123;region&#125;&#125;"</span> <span class="attr">custom-item</span>=<span class="string">"&#123;&#123;customItem&#125;&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"picker"</span>&gt;</span></span><br><span class="line">      当前选择：&#123;&#123;region[0]&#125;&#125;，&#123;&#123;region[1]&#125;&#125;，&#123;&#123;region[2]&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">picker</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="picker-view-amp-picker-view-column"><a href="#picker-view-amp-picker-view-column" class="headerlink" title="picker-view &amp; picker-view-column"></a>picker-view &amp; picker-view-column</h4><blockquote><ul><li>picker-view 嵌入在页面中的滚动选择器  ,  并且数据来源需要自己定义</li></ul><p><em>注意</em>：其中只可放置<code>&lt;picker-view-column/&gt;</code>组件，其他节点不会显示。</p><ul><li>picker-view-column  仅可放置于<code>&lt;picker-view /&gt;</code>中，其孩子节点的高度会自动设置成与picker-view的选中框的高度一致</li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">picker-view</span> <span class="attr">indicator-style</span>=<span class="string">"height: 50px;"</span> <span class="attr">style</span>=<span class="string">"width: 100%; height: 300px;"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123;value&#125;&#125;"</span> <span class="attr">bindchange</span>=<span class="string">"bindChange"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">picker-view-column</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;years&#125;&#125;"</span> <span class="attr">style</span>=<span class="string">"line-height: 50px"</span>&gt;</span>&#123;&#123;item&#125;&#125;年<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">picker-view-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">picker-view-column</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;months&#125;&#125;"</span> <span class="attr">style</span>=<span class="string">"line-height: 50px"</span>&gt;</span>&#123;&#123;item&#125;&#125;月<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">picker-view-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">picker-view-column</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;days&#125;&#125;"</span> <span class="attr">style</span>=<span class="string">"line-height: 50px"</span>&gt;</span>&#123;&#123;item&#125;&#125;日<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">picker-view-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">picker-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"><span class="keyword">const</span> years = []</span><br><span class="line"><span class="keyword">const</span> months = []</span><br><span class="line"><span class="keyword">const</span> days = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1990</span>; i &lt;= date.getFullYear(); i++) &#123;</span><br><span class="line">  years.push(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span> ; i &lt;= <span class="number">12</span>; i++) &#123;</span><br><span class="line">  months.push(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span> ; i &lt;= <span class="number">31</span>; i++) &#123;</span><br><span class="line">  days.push(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    years: years,</span><br><span class="line">    year: date.getFullYear(),</span><br><span class="line">    months: months,</span><br><span class="line">    month: <span class="number">2</span>,</span><br><span class="line">    days: days,</span><br><span class="line">    day: <span class="number">2</span>,</span><br><span class="line">    year: date.getFullYear(),</span><br><span class="line">    value: [<span class="number">9999</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  bindChange: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> val = e.detail.value</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">      year: <span class="keyword">this</span>.data.years[val[<span class="number">0</span>]],</span><br><span class="line">      month: <span class="keyword">this</span>.data.months[val[<span class="number">1</span>]],</span><br><span class="line">      day: <span class="keyword">this</span>.data.days[val[<span class="number">2</span>]]</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h4 id="radio-group-amp-radio"><a href="#radio-group-amp-radio" class="headerlink" title="radio-group  &amp;  radio"></a>radio-group  &amp;  radio</h4><blockquote><p>单项选择器，group  内部由多个<radio>组成。</radio></p><p>radio选中时会触发radio-group的<code>bindchange</code>事件</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">radio-group</span> <span class="attr">class</span>=<span class="string">"radio-group"</span> <span class="attr">bindchange</span>=<span class="string">"radioChange"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"radio"</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;items&#125;&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">radio</span> <span class="attr">value</span>=<span class="string">"&#123;&#123;item.name&#125;&#125;"</span> <span class="attr">checked</span>=<span class="string">"&#123;&#123;item.checked&#125;&#125;"</span>/&gt;</span>&#123;&#123;item.value&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">radio-group</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="slider"><a href="#slider" class="headerlink" title="slider"></a>slider</h4><blockquote><p>滑动选择器</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"section section_gap"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"section__title"</span>&gt;</span>设置step<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"body-view"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slider</span> <span class="attr">bindchange</span>=<span class="string">"slider2change"</span> <span class="attr">step</span>=<span class="string">"5"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"section section_gap"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"section__title"</span>&gt;</span>显示当前value<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"body-view"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slider</span> <span class="attr">bindchange</span>=<span class="string">"slider3change"</span> <span class="attr">show-value</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"section section_gap"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"section__title"</span>&gt;</span>设置最小/最大值<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"body-view"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slider</span> <span class="attr">bindchange</span>=<span class="string">"slider4change"</span> <span class="attr">min</span>=<span class="string">"50"</span> <span class="attr">max</span>=<span class="string">"200"</span> <span class="attr">show-value</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pageData = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//字符串拼接出函数名再传入Page()函数</span></span><br><span class="line">    pageData[<span class="string">'slider'</span> + index + <span class="string">'change'</span>] = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'slider'</span> + <span class="string">'index'</span> + <span class="string">'发生 change 事件，携带值为'</span>, e.detail.value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)(i)</span><br><span class="line">&#125;</span><br><span class="line">Page(pageData)</span><br></pre></td></tr></table></figure><hr><h4 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h4><blockquote><p>开关选择器</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">switch</span> <span class="attr">checked</span> <span class="attr">bindchange</span>=<span class="string">"switch1Change"</span>/&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="textarea"><a href="#textarea" class="headerlink" title="textarea"></a>textarea</h4><blockquote><p>多行文本输入框</p><blockquote><ul><li>不能在 <code>scroll-view、swiper、picker-view、movable-view</code> 中使用 textarea 组件。</li><li>textarea 的 blur 事件会晚于页面上的 tap 事件，如果需要在 button 的点击事件获取 textarea，可以使用 form 的 bindsubmit。</li></ul></blockquote></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"section"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">bindblur</span>=<span class="string">"bindTextAreaBlur"</span> <span class="attr">auto-height</span> <span class="attr">placeholder</span>=<span class="string">"自动变高"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"section"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">bindsubmit</span>=<span class="string">"bindFormSubmit"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">placeholder</span>=<span class="string">"form 中的 textarea"</span> <span class="attr">name</span>=<span class="string">"textarea"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">form-type</span>=<span class="string">"submit"</span>&gt;</span> 提交 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h4 id=&quot;button&quot;&gt;&lt;a href=&quot;#button&quot; class=&quot;headerlink&quot; title=&quot;button&quot;&gt;&lt;/a&gt;button&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;按钮,没啥特别的,需要特别注意的是&lt;/p&gt;
&lt;blockquote&gt;
&lt;
      
    
    </summary>
    
      <category term="小程序" scheme="http://yoursite.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="框架学习" scheme="http://yoursite.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="组件" scheme="http://yoursite.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/%E7%BB%84%E4%BB%B6/"/>
    
    
      <category term="小程序" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>小程序-组件-基础内容</title>
    <link href="http://yoursite.com/2018/01/15/%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E7%BB%84%E4%BB%B6-%E5%9F%BA%E7%A1%80%E5%86%85%E5%AE%B9/"/>
    <id>http://yoursite.com/2018/01/15/小程序-组件-基础内容/</id>
    <published>2018-01-15T07:43:12.000Z</published>
    <updated>2018-01-16T08:53:50.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h4 id="icon"><a href="#icon" class="headerlink" title="icon"></a>icon</h4><blockquote><p>小程序提供的一些已经定制好的图标</p></blockquote><p><img src="http://www.z4a.net/images/2018/01/15/_20180115155911.png" alt="小程序提供的图标"></p><hr><h4 id="text"><a href="#text" class="headerlink" title="text"></a>text</h4><blockquote><p>文本内容,</p><blockquote><p>decode可以解析的有 <code>&amp;nbsp; &amp;lt; &amp;gt; &amp;amp; &amp;apos; &amp;ensp; &amp;emsp</code>;</p><p><text> 组件内只支持 <text> 嵌套。</text></text></p></blockquote></blockquote><hr><h4 id="rich-text"><a href="#rich-text" class="headerlink" title="rich-text"></a>rich-text</h4><blockquote><p>富文本</p><p>只有一个属性 nodes (子节点列表) ,一般在.js中进行配置子节点(因为 nodes 不推荐使用 String 类型，性能会有所下降。)</p><p>也就是每一小段文字都可以细化为一个标签+一段文本,使用受信任的各个标签组成一整段富文本</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- rich-text.wxml --&gt;</span><br><span class="line"><span class="comment">//富文本nodes属性绑定.js中的数据</span></span><br><span class="line">&lt;rich-text nodes=<span class="string">"&#123;&#123;nodes&#125;&#125;"</span> bindtap=<span class="string">"tap"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">rich-text</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">-----------------------------------------</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">// rich-text.js</span></span><br><span class="line"><span class="xml">Page(&#123;</span></span><br><span class="line"><span class="xml">  data: &#123;</span></span><br><span class="line"><span class="xml">    //nodes一般用数组</span></span><br><span class="line"><span class="xml">    nodes: [&#123;</span></span><br><span class="line"><span class="xml">      //默认是元素节点  这里是div</span></span><br><span class="line"><span class="xml">      name: 'div',</span></span><br><span class="line"><span class="xml">      attrs: &#123;</span></span><br><span class="line"><span class="xml">        //div的样式类及内联样式</span></span><br><span class="line"><span class="xml">        class: 'div_class',</span></span><br><span class="line"><span class="xml">        style: 'line-height: 60px; color: red;'</span></span><br><span class="line"><span class="xml">      &#125;,</span></span><br><span class="line"><span class="xml">      //div的子节点</span></span><br><span class="line"><span class="xml">      children: [&#123;</span></span><br><span class="line"><span class="xml">        //内容是文本</span></span><br><span class="line"><span class="xml">        type: 'text',</span></span><br><span class="line"><span class="xml">        text: 'Hello&amp;nbsp;World!'</span></span><br><span class="line"><span class="xml">      &#125;]</span></span><br><span class="line"><span class="xml">    &#125;]</span></span><br><span class="line"><span class="xml">  &#125;,</span></span><br><span class="line"><span class="xml">&#125;)</span></span><br></pre></td></tr></table></figure><hr><h4 id="progress"><a href="#progress" class="headerlink" title="progress"></a>progress</h4><blockquote><p>进度条,没啥好说的…</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">progress</span> <span class="attr">percent</span>=<span class="string">"20"</span> <span class="attr">show-info</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">progress</span> <span class="attr">percent</span>=<span class="string">"40"</span> <span class="attr">stroke-width</span>=<span class="string">"12"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">progress</span> <span class="attr">percent</span>=<span class="string">"60"</span> <span class="attr">color</span>=<span class="string">"pink"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">progress</span> <span class="attr">percent</span>=<span class="string">"80"</span> <span class="attr">active</span> /&gt;</span></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h4 id=&quot;icon&quot;&gt;&lt;a href=&quot;#icon&quot; class=&quot;headerlink&quot; title=&quot;icon&quot;&gt;&lt;/a&gt;icon&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;小程序提供的一些已经定制好的图标&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img s
      
    
    </summary>
    
      <category term="小程序" scheme="http://yoursite.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="框架学习" scheme="http://yoursite.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="组件" scheme="http://yoursite.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/%E7%BB%84%E4%BB%B6/"/>
    
    
      <category term="小程序" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>小程序-组件-容器视图</title>
    <link href="http://yoursite.com/2018/01/15/%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E7%BB%84%E4%BB%B6-%E8%A7%86%E5%9B%BE%E5%AE%B9%E5%99%A8/"/>
    <id>http://yoursite.com/2018/01/15/小程序-组件-视图容器/</id>
    <published>2018-01-15T06:57:52.000Z</published>
    <updated>2018-01-16T08:52:45.000Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><p>小程序提供了一系列基础组件</p><ul><li>组件是视图层的基本组成单元。</li><li>组件自带一些功能与微信风格的样式。</li><li>一个组件通常包括开始标签和结束标签，属性用来修饰这个组件，内容在两个标签之内。</li></ul></blockquote><hr><h3 id="所有组件的共同属性"><a href="#所有组件的共同属性" class="headerlink" title="所有组件的共同属性"></a>所有组件的共同属性</h3><table><thead><tr><th>属性</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td>id(String)</td><td style="text-align:center">组件的唯一标识</td></tr><tr><td>class(String)</td><td style="text-align:center">组件的样式类</td></tr><tr><td>style(String)</td><td style="text-align:center">组件的内联样式</td></tr><tr><td>hidden(Boolean)</td><td style="text-align:center">是否隐藏</td></tr><tr><td>data-*(Any)</td><td style="text-align:center">自定义属性</td></tr><tr><td>bind*/catch*(EventHandler)</td><td style="text-align:center">组件的事件</td></tr></tbody></table><blockquote><p>如果取值为Boolean,则在组件写上该属性，不管该属性等于什么，其值都为true，只有组件上没有写该属性时，属性值才为false。如果属性值为变量，变量的值会被转换为Boolean类型</p><p>如: <code>&lt;scroll-view scroll-y&gt;</code>   中表示scroll-y属性为<strong>true</strong></p></blockquote><hr><h4 id="view"><a href="#view" class="headerlink" title="view"></a>view</h4><blockquote><p>视图容器</p><p>类似OC中的UIView、html中的div</p><p>但是可以控制点击态的出现和保留时间(<code>hover-stop-propagation、hover-start-time、hover-stay-time</code>)</p></blockquote><hr><h4 id="scroll-view"><a href="#scroll-view" class="headerlink" title="scroll-view"></a>scroll-view</h4><blockquote><p>可滚动视图</p><p>类似OC中的UIScrollView,自带upper和lower事件(不同于下拉刷新和上拉加载,这是滚动到边缘时触发的事件),而且该事件也支持水平方向</p><p>注意:</p><ul><li>不能在scroll-view中使用textarea、map、canvas、video组件</li><li>如果要使用下拉刷新,不要用scroll-view的upper事件,要用页面的滚动(onPullDownRefresh)</li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">scroll-view</span> <span class="attr">scroll-y</span> <span class="attr">style</span>=<span class="string">"height: 200px;"</span> <span class="attr">bindscrolltoupper</span>=<span class="string">"upperAction"</span> <span class="attr">bindscrolltolower</span>=<span class="string">"lowerAction"</span> <span class="attr">bindscroll</span>=<span class="string">"scrollAction"</span> <span class="attr">scroll-into-view</span>=<span class="string">"&#123;&#123;toView_id&#125;&#125;"</span> <span class="attr">scroll-top</span>=<span class="string">"&#123;&#123;scrollTop&#125;&#125;"</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="swiper"><a href="#swiper" class="headerlink" title="swiper"></a>swiper</h4><blockquote><p>滑块视图容器,其中只能放置<code>swiperitem</code>组件(宽高默认为100%)</p><p>比较适合做轮播图,因为有一个特殊的属性<code>autoplay</code>可以自动切换</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">swiper</span> <span class="attr">indicator-dots</span>=<span class="string">"&#123;&#123;true&#125;&#125;"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">autoplay</span>=<span class="string">"&#123;&#123;true&#125;&#125;"</span> <span class="attr">interval</span>=<span class="string">"&#123;&#123;interval&#125;&#125;"</span> <span class="attr">duration</span>=<span class="string">"&#123;&#123;duration&#125;&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;imgUrls&#125;&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;item&#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"slide-image"</span> <span class="attr">width</span>=<span class="string">"355"</span> <span class="attr">height</span>=<span class="string">"150"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">swiper</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="movable-view"><a href="#movable-view" class="headerlink" title="movable-view"></a>movable-view</h4><blockquote><p>可移动的视图容器,可以在页面中拖拽滑动</p><p>跟scroll-view(只能上下/左右)不同,movable-view可以根据设置任意拖拽</p><p><strong>注意： movable-view必须在 <movable-area>组件中，并且必须是直接子节点，否则不能移动。</movable-area></strong></p><blockquote><p>movable-view 必须设置width和height属性，不设置默认为10px</p><p>movable-view 默认为绝对定位，top和left属性为0px</p><p>当movable-view小于movable-area时，movable-view的移动范围是在movable-area内；</p><p>当movable-view大于movable-area时，movable-view的移动范围必须包含movable-area（x轴方向和y轴方向分开考虑）</p></blockquote></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">movable-area</span> <span class="attr">style</span>=<span class="string">"height: 200px;width: 200px;background: red;"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">movable-view</span> <span class="attr">style</span>=<span class="string">"height: 50px; width: 50px; background: blue;"</span> <span class="attr">x</span>=<span class="string">"&#123;&#123;x&#125;&#125;"</span> <span class="attr">y</span>=<span class="string">"&#123;&#123;y&#125;&#125;"</span> <span class="attr">direction</span>=<span class="string">"all"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">movable-view</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">movable-area</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="cover-view、cover-image"><a href="#cover-view、cover-image" class="headerlink" title="cover-view、cover-image"></a>cover-view、cover-image</h4><blockquote><p>覆盖在原生组件之上的文本/图片视图，可覆盖的原生组件包括<strong><em><code>map、video、canvas、camera</code></em></strong>，只支持嵌套cover-view、cover-image。</p><p>可以做类似于在video组件增加定义播放、暂停的功能控件</p><blockquote><p>只可嵌套在原生组件map、video、canvas、camera内，避免嵌套在其他组件内。</p></blockquote></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cover-view</span> <span class="attr">class</span>=<span class="string">"controls"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">cover-view</span> <span class="attr">class</span>=<span class="string">"play"</span> <span class="attr">bindtap</span>=<span class="string">"playAction"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">cover-image</span> <span class="attr">class</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"/path/to/icon_play"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">cover-view</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">cover-view</span> <span class="attr">class</span>=<span class="string">"pause"</span> <span class="attr">bindtap</span>=<span class="string">"pauseAction"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">cover-image</span> <span class="attr">class</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"/path/to/icon_pause"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">cover-view</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">cover-view</span> <span class="attr">class</span>=<span class="string">"time"</span>&gt;</span>00:00<span class="tag">&lt;/<span class="name">cover-view</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">cover-view</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="navigator"><a href="#navigator" class="headerlink" title="navigator"></a>navigator</h4><blockquote><p>页面链接,也就是跳转导航</p></blockquote><p>open-type 的有效值</p><p><img src="http://www.z4a.net/images/2018/01/16/_20180116151733.png" alt="open-type"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"btn-area"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">navigator</span> <span class="attr">url</span>=<span class="string">"/page/navigate/navigate?title=navigate"</span> <span class="attr">hover-class</span>=<span class="string">"navigator-hover"</span>&gt;</span>跳转到新页面<span class="tag">&lt;/<span class="name">navigator</span>&gt;</span>   <span class="comment">&lt;!-- 功能等于wx.navigateTo --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">navigator</span> <span class="attr">url</span>=<span class="string">"../../redirect/redirect/redirect?title=redirect"</span> <span class="attr">open-type</span>=<span class="string">"redirect"</span> <span class="attr">hover-class</span>=<span class="string">"other-navigator-hover"</span>&gt;</span>在当前页打开<span class="tag">&lt;/<span class="name">navigator</span>&gt;</span>  <span class="comment">&lt;!-- 功能等于wx.redirectTo --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">navigator</span> <span class="attr">url</span>=<span class="string">"/page/index/index"</span> <span class="attr">open-type</span>=<span class="string">"switchTab"</span> <span class="attr">hover-class</span>=<span class="string">"other-navigator-hover"</span>&gt;</span>切换 Tab<span class="tag">&lt;/<span class="name">navigator</span>&gt;</span>  <span class="comment">&lt;!-- 功能等于wx.switchTab --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;小程序提供了一系列基础组件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;组件是视图层的基本组成单元。&lt;/li&gt;
&lt;li&gt;组件自带一些功能与微信风格的样式。&lt;/li&gt;
&lt;li&gt;一个组件通常包括开始标签和结束标签，属性用来修饰这个组件，内容在两个标签之内。&lt;/
      
    
    </summary>
    
      <category term="小程序" scheme="http://yoursite.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="框架学习" scheme="http://yoursite.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="组件" scheme="http://yoursite.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/%E7%BB%84%E4%BB%B6/"/>
    
    
      <category term="小程序" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>小程序-WXML+WXSS视图层</title>
    <link href="http://yoursite.com/2018/01/12/%E5%B0%8F%E7%A8%8B%E5%BA%8F-WXML+WXSS%E8%A7%86%E5%9B%BE%E5%B1%82/"/>
    <id>http://yoursite.com/2018/01/12/小程序-WXML+WXSS视图层/</id>
    <published>2018-01-12T06:16:36.000Z</published>
    <updated>2018-01-16T08:54:10.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="视图层"><a href="#视图层" class="headerlink" title="视图层"></a>视图层</h2><blockquote><p>框架的视图层由 WXML 与 WXSS 编写，由组件来进行展示。</p><p>将逻辑层的数据反应成视图，同时将视图层的事件发送给逻辑层。</p><p>结合数据绑定、列表渲染、条件渲染、模板、事件、引用，可以构建出页面的结构。</p></blockquote><hr><hr><h2 id="WXML"><a href="#WXML" class="headerlink" title="WXML"></a>WXML</h2><hr><ul><li><h3 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h3></li></ul><blockquote><p>视图层的数据基本来自对应.js中page的data(包括初始化的数据,利用setData动态变化的数据)</p><p>在.WXML通过 <strong><em>Mustache 语法(双大括号)</em></strong>就可以使用变量</p><p>数据绑定有多种绑定方式—简单绑定,组件属性,控制属性,关键字,运算表达式</p><p>除了简单绑定之外其余都需要把<strong><em>双大括号</em></strong>放在<strong><em>双引号</em></strong>之内</p></blockquote><hr><ul><li><h4 id="简单绑定"><a href="#简单绑定" class="headerlink" title="简单绑定"></a>简单绑定</h4><p><code>直接在标签中使用数据变量</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span> &#123;&#123; 变量名 &#125;&#125; <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><hr><ul><li><h4 id="组件属性-需双引号"><a href="#组件属性-需双引号" class="headerlink" title="组件属性(需双引号)"></a>组件属性(需双引号)</h4><p><code>如果数据要作为标签的属性使用,则需要用双引号括起来</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">id</span>=<span class="string">"item-&#123;&#123;变量名&#125;&#125;"</span>&gt;</span> <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><hr><ul><li><h4 id="控制属性-需双引号"><a href="#控制属性-需双引号" class="headerlink" title="控制属性(需双引号)"></a>控制属性(需双引号)</h4><p><code>控制属性包括wx:for遍历和wx:if条件</code></p></li></ul><ul><li><h5 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h5><blockquote><p>在.WXML组件上使用  <code>wx:for</code> 可以让属性绑定一个数组,相当于遍历该数组重复渲染默认数组的元素变量名为 <strong><em>item</em></strong> ,  下标变量名为  <strong><em>index</em></strong></p><p>用<code>ws:for-item=&quot;xxx&quot;</code>可以指定变量名为<em>xxx</em></p><p>同理<code>ws:for-index=&quot;xxx&quot;</code>可以指定下标变量名</p></blockquote></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;array&#125;&#125;"</span>&gt;</span></span><br><span class="line">  &#123;&#123;index&#125;&#125;: &#123;&#123;item.message&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line">.................................</span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    array: [&#123;</span><br><span class="line">      message: 'foo',</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      message: 'bar'</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><hr><blockquote><p>上面这种写法,是写在标签内,只能对一个标签起作用,但是如果同时需要对多个标签都使用该渲染方法的话,可以使用<em>block</em>标签.(<strong><block> 并不是一个组件，它仅仅是一个包装元素，不会在页面中做任何渲染，只接受控制属性。</block></strong>)</p></blockquote></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;[1 , 2 , 3]&#125;&#125; wx:for-index="</span><span class="attr">idx</span>" <span class="attr">wx:for-item</span>=<span class="string">"itemName"</span>"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;idx&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;itemName&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">...xxx</span><br><span class="line"><span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><hr><blockquote><p><code>wx:key</code>是一种用来做列表重用的方式,通过<code>key</code>来指定列表中cell的唯一标识符</p><p>这样可以保证当列表动态改变或者有新的cell添加时,列表上的cell的状态不会改变并且不会重新创建</p><p><code>wx:key</code>有两种形式</p><ul><li>字符串，代表在 for 循环的 array 中  item 的某个 <code>属性名</code>，该<code>属性的值</code>必须是列表中唯一的字符串或数字，且不能动态改变。</li><li>保留关键字  <code>*this</code>代表在 for 循环中的 item 本身，这种表示需要 item 本身是一个唯一的字符串或者数字</li></ul><p><em>如不提供 wx:key，会报一个 warning， 如果明确知道该列表是静态，或者不必关注其顺序，可以选择忽略。</em></p></blockquote></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//遍历一个对象数组,数组中元素有一个属性unique,它的值作为cell的标识符</span></span><br><span class="line">&lt;<span class="keyword">switch</span> wx:<span class="keyword">for</span>=<span class="string">"&#123;&#123;objectArray&#125;&#125;"</span> wx:key=<span class="string">"unique"</span> style=<span class="string">"display: block;"</span>&gt; &#123;&#123;item.id&#125;&#125; &lt;<span class="regexp">/switch&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/绑定一个点击后给数组增加一个对象的事件</span></span><br><span class="line"><span class="regexp">&lt;button bindtap="addToFront"&gt; Add to the front &lt;/</span>button&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历一个普通数字数组,用'*this'表示直接拿到那个元素也就是数字作为cell的标识符</span></span><br><span class="line">&lt;<span class="keyword">switch</span> wx:<span class="keyword">for</span>=<span class="string">"&#123;&#123;numberArray&#125;&#125;"</span> wx:key=<span class="string">"*this"</span> style=<span class="string">"display: block;"</span>&gt; &#123;&#123;item&#125;&#125; &lt;<span class="regexp">/switch&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/绑定一个点击后给数组增加一个数字的事件</span></span><br><span class="line"><span class="regexp">&lt;button bindtap="addNumberToFront"&gt; Add to the front &lt;/</span>button&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/****          ****/</span></span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    <span class="comment">//对象数组     对象的unique属性的值是唯一的</span></span><br><span class="line">    objectArray: [</span><br><span class="line">      &#123;<span class="attr">id</span>: <span class="number">5</span>, <span class="attr">unique</span>: <span class="string">'unique_5'</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">id</span>: <span class="number">4</span>, <span class="attr">unique</span>: <span class="string">'unique_4'</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">unique</span>: <span class="string">'unique_3'</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">unique</span>: <span class="string">'unique_2'</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">unique</span>: <span class="string">'unique_1'</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">id</span>: <span class="number">0</span>, <span class="attr">unique</span>: <span class="string">'unique_0'</span>&#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">//数字数组      数字也必须是唯一的</span></span><br><span class="line">    numberArray: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//绑定的事件函数  给数组增加一个对象并且放到第一个</span></span><br><span class="line">  addToFront: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> length = <span class="keyword">this</span>.data.objectArray.length</span><br><span class="line">    <span class="keyword">this</span>.data.objectArray = [&#123;<span class="attr">id</span>: length, <span class="attr">unique</span>: <span class="string">'unique_'</span> + length&#125;].concat(<span class="keyword">this</span>.data.objectArray)</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">      objectArray: <span class="keyword">this</span>.data.objectArray</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//绑定的事件函数   给数组增加一个数字并且放到第一个</span></span><br><span class="line">  addNumberToFront: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.data.numberArray = [ <span class="keyword">this</span>.data.numberArray.length + <span class="number">1</span> ].concat(<span class="keyword">this</span>.data.numberArray)</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">      numberArray: <span class="keyword">this</span>.data.numberArray</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><hr><blockquote><p><strong>注意：</strong></p><ul><li>当 <code>wx:for</code>的值为字符串时，会将字符串解析成单个单个字符的数组</li></ul><p>比如<view wx:for="shitu">  会被解析成 <view wx:for="s,h,i,t,u"></view></view></p><ul><li>花括号和引号之间如果有空格，将最终被解析成为字符串</li></ul><p><view wx:for="1,2,3  ">会被解析成<view wx:for="1,2,3 "></view></view></p></blockquote><hr></blockquote><ul><li><h6 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h6><blockquote><p>在.WXML组件上使用  <code>wx:if</code> 可以判断是否需要渲染该代码块</p><p>也可以用 <code>wx:elif</code>和 <code>wx:else</code>来添加一个 条件 块</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123;length &gt; 5&#125;&#125;"</span>&gt;</span> 1 <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:elif</span>=<span class="string">"&#123;&#123;length &gt; 2&#125;&#125;"</span>&gt;</span> 2 <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:else</span>&gt;</span> 3 <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><blockquote><p> 跟<code>wx:for</code>一样,<code>wx:if</code>也可以使用<code>&lt;block&gt;</code>标签将多个组件包装起来</p><p> 然后在block标签上使用<code>wx:if</code>控制</p></blockquote></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123;true&#125;&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span> view1 <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span> view2 <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><ul><li><h4 id="关键字-需双引号"><a href="#关键字-需双引号" class="headerlink" title="关键字(需双引号)"></a>关键字(需双引号)</h4><blockquote><p>目前知道的关键字有true、false,代表boolean类型的真和假</p><p><strong>特别注意</strong>：不要直接写 checked=”false”，其计算结果是一个字符串，要使用反而要先转类型转成 boolean 类型后才能代表真值。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;checkbox checked=<span class="string">"&#123;&#123;false&#125;&#125;"</span>&gt; <span class="xml"><span class="tag">&lt;/<span class="name">checkbox</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><hr><ul><li><h4 id="运算-需双引号"><a href="#运算-需双引号" class="headerlink" title="运算(需双引号)"></a>运算(需双引号)</h4><blockquote><p>目前支持的运算有:三元运算、算数运算、逻辑判断、字符串运算、数据路径运算</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/***  三元运算   ***/</span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">hidden</span>=<span class="string">"&#123;&#123;flag ? true : false&#125;&#125;"</span>&gt;</span> Hidden <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">/***  算数运算   ***/</span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span> &#123;&#123;a + b&#125;&#125; + &#123;&#123;c&#125;&#125; + d <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">/***  逻辑判断   ***/</span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123;length &gt; 5&#125;&#125;"</span>&gt;</span> <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">/***  字符串运算   ***/</span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;"hello" + name&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">/***  数据路径运算(下标、key等)  ***/</span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;object.key&#125;&#125; &#123;&#123;array[0]&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><hr><ul><li><ul><li><h4 id="组合-需双引号"><a href="#组合-需双引号" class="headerlink" title="组合(需双引号)"></a>组合(需双引号)</h4><blockquote><p> 如果需要也可以WXML中在 <code>Mustache</code> 内直接进行组合，构成新的<strong>对象或者数组</strong>。</p><p> 同时也可以用扩展运算符  <code>...</code>  来展开对象()</p><p> 需要注意的是： <strong>花括号和引号之间如果有空格，将最终被解析成为字符串</strong></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/***  数组(除了接收.js中的变量,也可以自己添加一些默认的数据)  ***/</span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;[绑定的变量, 1, 2, 3, 4]&#125;&#125;"</span>&gt;</span> &#123;&#123;item&#125;&#125; <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">/***  对象  ***/</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">"objectCombine"</span> <span class="attr">data</span>=<span class="string">"&#123;&#123;key1: 绑定的变量, key2: 绑定的变量&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">/***  既然可以组合对象,同时也可以用扩展运算符扩展对象  ***/</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">"objectCombine"</span> <span class="attr">data</span>=<span class="string">"&#123;&#123;...obj1, ...obj2&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span>​</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><ul><li><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><p><code>WXML提供模板（template），可以在模板中定义代码片段，然后在不同的地方调用。</code>(有点像React的模板)</p><ul><li><p>定义模板(用name属性作为模板名字)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">"msgItem"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span> &#123;&#123;index&#125;&#125;: &#123;&#123;msg&#125;&#125; <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span> Time: &#123;&#123;time&#125;&#125; <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用模板(利用is属性声明使用的模板,data传入所需数据)</p><p><code>需要先用import导入模板文件</code></p><p><code>is属性中可以使用Mustache语法</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 展开.js绑定的对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">"msgItem"</span> <span class="attr">data</span>=<span class="string">"&#123;&#123;...item&#125;&#125;"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 也可以直接赋值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">"msgItem"</span> <span class="attr">data</span>=<span class="string">"&#123;&#123;index: 1 , msg: 'xxx' , time: 'yyyyMMdd'&#125;&#125;"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- is属性中可以使用Mustache语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;[1, 2, 3, 4, 5]&#125;&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">"&#123;&#123;item % 2 == 0 ? ...item1 : ...item2&#125;&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong><em>模板的数据还可以通过wxs模块传入</em></strong>(这里暂不说,另开一篇说明)</p></blockquote></li></ul></li></ul><hr><ul><li><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><blockquote><p>视图层的事件表示的是视图层到逻辑层的通讯方式.<br>事件可以将用户的行为反馈到逻辑层进行处理。<br>事件可以绑定在组件上，当达到触发事件，就会执行逻辑层中对应的事件处理函数。<br>事件对象可以携带额外信息，如 <code>id, dataset, touches</code>。</p></blockquote><ul><li><h4 id="事件分类"><a href="#事件分类" class="headerlink" title="事件分类"></a>事件分类</h4><p>事件分为冒泡事件和非冒泡事件</p><ul><li>冒泡事件：当一个组件上的事件被触发后，该事件会向父节点传递。</li><li>非冒泡事件：当一个组件上的事件被触发后，该事件不会向父节点传递。</li></ul></li></ul></li></ul><p><img src="http://www.z4a.net/images/2018/01/12/545651.png" alt="所有的冒泡事件"></p><blockquote><p>事件绑定的写法类型组件的属性, key,value的形式</p><ul><li><p>key 以bind或catch开头，然后跟上事件的类型，如bindtap、catchtouchstart。自基础库版本 1.5.0 起，bind和catch后可以紧跟一个冒号，其含义不变，如bind:tap、catch:touchstart。</p><p><code>bind不会阻止冒泡事件的向上传递,catch会阻止冒泡事件的传递</code></p></li><li><p>value 是一个字符串，需要在对应的 Page 中定义同名的函数。不然当触发事件的时候会报错。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="tag">&lt;<span class="name">view</span> <span class="attr">id</span>=<span class="string">"middle"</span> <span class="attr">catchtap</span>=<span class="string">"handleTap2"</span>&gt;</span></span><br><span class="line">&gt;   <span class="tag">&lt;<span class="name">view</span> <span class="attr">id</span>=<span class="string">"inner"</span> <span class="attr">bindtap</span>=<span class="string">"handleTap3"</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><ul><li><h4 id="事件的捕获阶段"><a href="#事件的捕获阶段" class="headerlink" title="事件的捕获阶段"></a>事件的捕获阶段</h4><p><code>自基础库版本 1.5.0 起，触摸类事件支持捕获阶段。捕获阶段位于冒泡阶段之前，且在捕获阶段中，事件到达节点的顺序与冒泡阶段恰好相反。需要在捕获阶段监听事件时，可以采用capture-bind、capture-catch关键字，后者将中断捕获阶段和取消冒泡阶段。</code></p><p>也就是说,从用户点击组件开始,事件需要先从顶层向下传递,到达底层之后再向上冒泡,同样也可以被阻止</p><p>用法和冒泡事件的使用相同</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">id</span>=<span class="string">"outer"</span> <span class="attr">bind:touchstart</span>=<span class="string">"handleTap1"</span> <span class="attr">capture-bind:touchstart</span>=<span class="string">"handleTap2"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">id</span>=<span class="string">"outer"</span> <span class="attr">bind:touchstart</span>=<span class="string">"handleTap1"</span> <span class="attr">capture-catch:touchstart</span>=<span class="string">"handleTap2"</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><h4 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h4><p>无论是哪种事件,处理该事件的处理函数都会收到一个事件对象<strong><em>BaseEvent</em></strong></p><p><code>特殊事件： &lt;canvas/&gt; 中的触摸事件不可冒泡，所以没有 currentTarget。</code></p><p><img src="http://www.z4a.net/images/2018/01/12/_20180112185051.png" alt="base事件对象的属性列表"></p><ul><li><h4 id="自定义事件对象"><a href="#自定义事件对象" class="headerlink" title="自定义事件对象"></a>自定义事件对象</h4><ul><li>自定义事件对象,需要继承自BaseEvent</li><li>额外的信息放在   <strong><em>detail </em></strong>  属性中</li><li>自定义事件所携带的数据，如表单组件的提交事件会携带用户的输入，媒体的错误事件会携带错误信息等</li></ul></li><li><h4 id="触摸事件对象"><a href="#触摸事件对象" class="headerlink" title="触摸事件对象"></a>触摸事件对象</h4><p><img src="http://www.z4a.net/images/2018/01/12/_20180112185952.png" alt="触摸事件对象属性列表"></p></li></ul></li></ul><hr><h2 id="WXSS"><a href="#WXSS" class="headerlink" title="WXSS"></a>WXSS</h2><p><code>用于描述 WXML 的组件样式,用来决定 WXML 的组件应该怎么显示。WXSS 具有 CSS 大部分特性。同时为了更适合开发微信小程序，WXSS 对 CSS 进行了扩充以及修改。与 CSS 相比，WXSS 扩展的特性有：</code></p><ul><li>尺寸单位(小程序使用<strong><em>rpx</em></strong>,底层根据屏幕宽度进行自适应)</li><li>样式导入(用<code>@import+外联样式表绝对路径</code>  可以导入外联样式表)</li></ul><p><strong>内联样式</strong><br>框架组件上支持使用 style、class 属性来控制组件的样式。</p><ul><li><p>style：静态的样式统一写到 class 中。style 接收动态的样式，在运行时会进行解析，请尽量避免将静态的样式写进 style 中，以免影响渲染速度。</p><p><code>&lt;view style=&quot;color:;&quot; /&gt;</code></p></li><li><p>class：用于指定样式规则，其属性值是样式规则中类选择器名(样式类名)的集合，样式类名不需要带上.，样式类名之间用空格分隔。(小程序基本都是通过在.WXSS中定义样式类,在.WXML标签中直接使用,在.js中改变标签类名)</p><p><code>&lt;view class=&quot;normal_view&quot; /&gt;</code></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h2 id=&quot;视图层&quot;&gt;&lt;a href=&quot;#视图层&quot; class=&quot;headerlink&quot; title=&quot;视图层&quot;&gt;&lt;/a&gt;视图层&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;框架的视图层由 WXML 与 WXSS 编写，由组件来进行展示。&lt;/p&gt;
&lt;p&gt;将逻辑层的数据反
      
    
    </summary>
    
      <category term="小程序" scheme="http://yoursite.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="框架学习" scheme="http://yoursite.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="小程序" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>小程序-js逻辑层</title>
    <link href="http://yoursite.com/2018/01/11/%E5%B0%8F%E7%A8%8B%E5%BA%8F-js%E9%80%BB%E8%BE%91%E5%B1%82/"/>
    <id>http://yoursite.com/2018/01/11/小程序-js逻辑层/</id>
    <published>2018-01-11T12:55:16.000Z</published>
    <updated>2018-01-16T08:54:06.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="逻辑层"><a href="#逻辑层" class="headerlink" title="逻辑层"></a>逻辑层</h3><blockquote><p>  在.js文件中使用了JavaScript语言,此外小程序增加了</p><ul><li><p><code>Page(){}</code>创建页面 </p></li><li><p><code>data{}</code>初始化数据</p></li><li><p>各种生命周期函数</p></li><li><p>页面相关事件处理函数(如<code>onPullDownRefresh</code>、<code>onReachBottom</code>、<code>onPageScroll</code>等)</p></li><li><p><code>setData</code>从逻辑层向视图层异步发送数据</p></li><li><p>以及微信提供调用原生API</p><p><strong><em>但是需要注意的是js在 web 中一些能力无法使用，如 document，window 等</em></strong></p></li></ul></blockquote><hr><hr><h4 id="Page"><a href="#Page" class="headerlink" title="Page()"></a>Page()</h4><p>  像在<code>App.js</code>中调用App()创建小程序实例一样,在<code>页面.js</code>中调用Page()就能注册该页面实例,同时要给该方法传递一个Object对象,这个对象包括了页面的初始数据、生命周期函数、事件处理函数等.</p><hr><h4 id="data"><a href="#data" class="headerlink" title="data:{}"></a>data:{}</h4><p>  这个对象中设置的数据是页面初始化渲染的数据,要求<em>必须是可以转json的数据类型</em></p><blockquote><p>在.js定义的变量名,在.WXML中可以直接使用(<strong>object 内容在页面加载时会进行一次深拷贝，需考虑数据大小对页面加载的开销</strong>)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    text: <span class="string">'init data'</span>,</span><br><span class="line">    array: [&#123;<span class="attr">msg</span>: <span class="string">'1'</span>&#125;, &#123;<span class="attr">msg</span>: <span class="string">'2'</span>&#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;array[0].msg&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="生命周期函数"><a href="#生命周期函数" class="headerlink" title="生命周期函数"></a>生命周期函数</h4><p>  <img src="http://www.z4a.net/images/2018/01/12/_20180112112613.png" alt="生命周期函数"></p><hr><h4 id="页面相关事件处理函数"><a href="#页面相关事件处理函数" class="headerlink" title="页面相关事件处理函数"></a>页面相关事件处理函数</h4><p><img src="http://www.z4a.net/images/2018/01/12/_20180112112836.png" alt="页面相关事件函数"></p><hr><h5 id="页面绑定事件处理函数"><a href="#页面绑定事件处理函数" class="headerlink" title="页面绑定事件处理函数"></a>页面绑定事件处理函数</h5><p>​    除了上面这些处理事件,页面还可以绑定一些用户交互相关事件,比如点击、拖拽、长按等,可以通过bind/catch+事件名,具体可以参考<a href="http://for_meng.gitee.io/2018/01/12/WXML+WXSS%E8%A7%86%E5%9B%BE%E5%B1%82/#%E4%BA%8B%E4%BB%B6" target="_blank" rel="noopener">视图层的事件绑定</a></p><hr><h5 id="setData"><a href="#setData" class="headerlink" title="setData()"></a>setData()</h5><ul><li>调用setData()可以从逻辑层向视图层传递数据(异步),但是直接修改this.Data页面不会改变还会操作数据不一致的问题</li><li>单次设置有1024K的大小设置(由setData的底层实现,数据传输实际是一次 evaluateJavascript 脚本过程，当数据量过大时会增加脚本的编译执行时间，占用 WebView JS 线程)</li><li>任何的value都不能设置为undefined</li></ul><hr><h5 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h5><p>部分逻辑是公共处理的,可以抽离到一个单独的.js文件,通过 <code>module.exports</code> 或者<code>exports</code>对外暴露接口</p><p>然后在需要使用的文件中使用 <code>require(path)</code>将公共代码引入</p><hr><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><blockquote><p>可以通过Page.prototype.route 获取当前页面的路径</p><p>通过getapp()获取全局的应用实例,也就是小程序实例</p><p>getCurrentPages()可以获取当前页面栈的实例,获得的是一个数组,最后一个元素为当前页面</p><ul><li>路由方式</li></ul><blockquote><p><code>wx.navigateTo</code>、<code>wx.redirectTo</code>、导航跳转,只能打开<strong>非</strong>tabBar页面</p><p><code>wx.switchTab</code>只能打开tabBar页面</p><p><code>wx.reLaunch</code>可以打开任意页面</p></blockquote><p>除了这些可使用的方法之外,小程序开发框架还提供了丰富的微信原生 API，可以方便的调起微信提供的能力，如获取用户信息，本地存储，支付功能</p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h3 id=&quot;逻辑层&quot;&gt;&lt;a href=&quot;#逻辑层&quot; class=&quot;headerlink&quot; title=&quot;逻辑层&quot;&gt;&lt;/a&gt;逻辑层&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;  在.js文件中使用了JavaScript语言,此外小程序增加了&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;
      
    
    </summary>
    
      <category term="小程序" scheme="http://yoursite.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="框架学习" scheme="http://yoursite.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="小程序" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>小程序-初识小程序</title>
    <link href="http://yoursite.com/2018/01/10/%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%88%9D%E8%AF%86%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    <id>http://yoursite.com/2018/01/10/小程序-初识小程序/</id>
    <published>2018-01-10T09:12:36.000Z</published>
    <updated>2018-01-16T08:52:50.000Z</updated>
    
    <content type="html"><![CDATA[<hr><hr><h3 id="微信小程序中就四种类型的文件"><a href="#微信小程序中就四种类型的文件" class="headerlink" title="微信小程序中就四种类型的文件"></a>微信小程序中就四种类型的文件</h3><blockquote><p> js ———- JavaScrip文件,负责页面逻辑</p><p> json ——– 项目配置文件，负责窗口颜色等等</p><p> wxml ——- 类似HTML文件,负责页面结构</p><p> wxss ——- 类似CSS文件,负责页面样式表</p></blockquote><p><code>小程序的IDE每次编译都会自动整合这四种类型的文件,所以要求都是同名且同路径</code></p><p>每创建一个程序时,在根目录下就会生成app.json , app.js , app.wxss  ,  app.wxml,相当于程序入口main</p><blockquote><p><em>app.json</em></p><blockquote><p>app.json文件用来对微信小程序进行全局配置，决定页面文件的路径、窗口表现、设置网络超时时间、设置多 tab 等。</p><p>必须要有这个文件，如果没有这个文件，IDE会报错，因为微信框架把这个作为配置文件入口，最简单只需创建这个文件，里面写个大括号就行</p></blockquote><p><em>app.js</em></p><blockquote><p>必须要有这个文件，没有也是会报错的！但是这个文件创建一下就行可以什么都不需要写</p><p>以后我们可以在这个文件中监听并处理小程序的生命周期函数、声明全局变量。</p></blockquote><p>app.wxss</p><blockquote><p>这个文件不是必须的。因为它只是个全局CSS样式文件</p><p>页面的WXSS都可以覆盖它的样式</p></blockquote><p>app.wxml</p><blockquote><p>这个也不是必须的，而且这个并不是指主界面哦~因为小程序的主页面是靠在JSON文件中配置来决定的</p></blockquote></blockquote><hr><hr><h2 id="根目录下的-js-WXML-js"><a href="#根目录下的-js-WXML-js" class="headerlink" title="根目录下的 .js  .WXML  .js"></a>根目录下的 .js  .WXML  .js</h2><hr><h4 id="app-js"><a href="#app-js" class="headerlink" title="app.js"></a>app.js</h4><h5 id="创建App实例"><a href="#创建App实例" class="headerlink" title="创建App实例"></a>创建App实例</h5><p><code>App() 函数用来注册一个小程序。接受一个 object 参数，其指定小程序的生命周期函数等。</code></p><p><img src="http://www.z4a.net/images/2018/01/10/1967257-597080e04f2b3e3d.png" alt="App()参数说明"></p><hr><h4 id="app-json"><a href="#app-json" class="headerlink" title="app.json"></a>app.json</h4><p><code>json文件负责配置页面路径,tabBar的表现,网络超时时间等</code></p><p><img src="http://www.z4a.net/images/2018/01/10/1967257-b2fb6cf009b3f669.png" alt="app.json配置项"></p><blockquote><p>这里的pages是配置程序的每一个页面的相对路径,页面的创建通过在对应页面的js文件中调用page()来创建</p></blockquote><hr><hr><h2 id="创建新的Page页面"><a href="#创建新的Page页面" class="headerlink" title="创建新的Page页面"></a>创建新的Page页面</h2><hr><h4 id="js注册页面"><a href="#js注册页面" class="headerlink" title=".js注册页面"></a>.js注册页面</h4><p><code>Page() 函数用来注册一个页面。接受一个 object 参数，其指定页面的初始数据、生命周期函数、事件处理函数等。</code></p><p><img src="http://www.z4a.net/images/2018/01/10/_20180110184401.png" alt="page()参数说明"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;//页面初始数据</span><br><span class="line">    text: "This is page data."</span><br><span class="line">  &#125;,</span><br><span class="line">  onLoad: function(options) &#123;//页面加载   必须是可转json的数据类型</span><br><span class="line">    // Do some initialize when page load.</span><br><span class="line">  &#125;,</span><br><span class="line">  onReady: function() &#123;//渲染完成</span><br><span class="line">    // Do something when page ready.</span><br><span class="line">  &#125;,</span><br><span class="line">  onShow: function() &#123;//页面显示</span><br><span class="line">    // Do something when page show.</span><br><span class="line">  &#125;,</span><br><span class="line">  onHide: function() &#123;//页面隐藏</span><br><span class="line">    // Do something when page hide.</span><br><span class="line">  &#125;,</span><br><span class="line">  onUnload: function() &#123;//页面卸载/销毁</span><br><span class="line">    // Do something when page close.</span><br><span class="line">  &#125;,</span><br><span class="line">  onPullDownRefresh: function() &#123;//用户下拉动作</span><br><span class="line">    // Do something when pull down.</span><br><span class="line">  &#125;,</span><br><span class="line">  onReachBottom: function() &#123;//上拉触底</span><br><span class="line">    // Do something when page reach bottom.</span><br><span class="line">  &#125;,</span><br><span class="line">  onShareAppMessage: function () &#123;//点击右上角转发</span><br><span class="line">   // return custom share data when user share.</span><br><span class="line">  &#125;,</span><br><span class="line">  onPageScroll: function() &#123;//页面滚动时间</span><br><span class="line">    // Do something when page scroll</span><br><span class="line">  &#125;,</span><br><span class="line">  // Event handler.</span><br><span class="line">  viewTap: function() &#123;//页面其他绑定事件处理函数</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      text: 'Set some data for updating view.'</span><br><span class="line">    &#125;, function() &#123;</span><br><span class="line">      // this is setData callback</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  customData: &#123;</span><br><span class="line">    hi: 'MINA'</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><hr><h4 id="WXML"><a href="#WXML" class="headerlink" title=".WXML"></a>.WXML</h4><p><code>结合数据绑定、列表渲染、条件渲染、模板、事件、引用，可以构建出页面的结构。</code></p><hr><ul><li><strong>数据绑定</strong></li></ul><blockquote><p>在.js中的data{}中申请的变量都可以在.WXML中使用</p><p>在.WXML通过 <strong><em>Mustache 语法(双大括号)</em></strong>就可以使用变量</p><p>数据绑定有多种绑定方式—简单绑定,组件属性,控制属性,关键字,运算表达式</p><p>除了简单绑定之外其余都需要把<strong><em>双大括号</em></strong>放在<strong><em>双引号</em></strong>之内</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span> &#123;&#123; 变量名 &#125;&#125; <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><h5 id="绑定事件"><a href="#绑定事件" class="headerlink" title="绑定事件"></a>绑定事件</h5><p><img src="http://www.z4a.net/images/2018/01/10/1967257-61458d7fbae5b96d.png" alt="冒泡事件列表"></p></li></ul><blockquote><p>因此,如果需要在.WXML中绑定某个事件,那就在标签内添加绑定函数</p><p>然后在.js中定义该函数的代码块</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">catchtap</span>=<span class="string">"click"</span> <span class="attr">class</span>=<span class="string">"window"</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line">....然后在.js文件中就可以定义函数.........</span><br><span class="line"></span><br><span class="line">click:function()&#123;</span><br><span class="line">    console.log("点击了文字");</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><hr><h4 id="WXSS"><a href="#WXSS" class="headerlink" title=".WXSS"></a>.WXSS</h4><p><code>用于描述 WXML 的组件样式,用来决定 WXML 的组件应该怎么显示。WXSS 具有 CSS 大部分特性。同时为了更适合开发微信小程序，WXSS 对 CSS 进行了扩充以及修改。与 CSS 相比，WXSS 扩展的特性有：</code></p><ul><li>尺寸单位(小程序使用<strong><em>rpx</em></strong>,底层根据屏幕宽度进行自适应)</li><li>样式导入(用<code>@import+外联样式表绝对路径</code>  可以导入外联样式表)</li></ul><ul><li><p>其他暂时不需要了解太多<a href="http://for_meng.gitee.io/2018/01/12/WXML%E8%A7%86%E5%9B%BE%E5%B1%82/#WXSS" target="_blank" rel="noopener">在视图层的时候再说</a></p><hr></li></ul><h4 id="除了这些需要开发者知道的-框架还有其他特点"><a href="#除了这些需要开发者知道的-框架还有其他特点" class="headerlink" title="除了这些需要开发者知道的,框架还有其他特点:"></a>除了这些需要开发者知道的,框架还有其他特点:</h4><blockquote><ul><li><strong>分包加载</strong>    —  可以优化小程序首次启动的下载时间，以及在多团队共同开发时可以更好的解耦协作</li><li><strong>基础库兼容处理</strong>  —  对接口 、参数 、 组件的兼容处理可以查看官方文档</li><li><strong>运行机制</strong>    —  [冷启动] 和 [热启动]  以及重启逻辑</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;hr&gt;
&lt;h3 id=&quot;微信小程序中就四种类型的文件&quot;&gt;&lt;a href=&quot;#微信小程序中就四种类型的文件&quot; class=&quot;headerlink&quot; title=&quot;微信小程序中就四种类型的文件&quot;&gt;&lt;/a&gt;微信小程序中就四种类型的文件&lt;/h3&gt;&lt;blockquote&gt;
&lt;p
      
    
    </summary>
    
      <category term="小程序" scheme="http://yoursite.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="框架学习" scheme="http://yoursite.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="小程序" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>NSdate+NSCalendar操作</title>
    <link href="http://yoursite.com/2018/01/10/NSdate+NSCalendar%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2018/01/10/NSdate+NSCalendar操作/</id>
    <published>2018-01-10T06:03:34.000Z</published>
    <updated>2018-01-12T13:04:31.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h3><p>   <strong><em>由于查询数据库时查询条件需要传递日期来获取某个月份的数据列表,如果传的时该月的某一天会导致拿到数据不全,如果传了该月的第一天会导致拿到的数据并不是当月的;而如果刚好查询当前月份的数据是不能用这个月的最后一天只能用当天来查询,于是有了以下的日历操作</em></strong></p><hr><ul><li>首先,想要直接得到某个日期的NSDate,可以通过dateWithTimeInterval,与某个日期的毫秒差来获取,但是这个方法前提是需要知道基点日期,就算以当前的Date来计算,毫秒的计算也得自己去写清楚;比较麻烦,这时候可以通过<strong>日历对象的NSDateComponents来方便地定制指定日期,以下是两个NSDate分类方法</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">//这个方法可以获取某个与当前NSDate对象指定间隔的日期</span><br><span class="line">//这里传的year.month 等都可以有正负,正数表示该日期之后的,负数表示该日期之前</span><br><span class="line">- (instancetype)getDateFromDateWithYear:(NSInteger)year month:(NSInteger)month day:(NSInteger)day hours:(NSInteger)hour minute:(NSInteger)minute second:(NSInteger)second&#123;</span><br><span class="line">    //创建一个工具，一个封装了具体年月日、时秒分、周、季度等的类</span><br><span class="line">    //    NSDateComponents* dateComponents = [[NSDateComponents alloc]init];</span><br><span class="line">    NSDateComponents* dateComponents;</span><br><span class="line">    //创建一个日历，它提供了大部分的日期计算接口，并且允许在NSDate和NSDateComponents之间转换</span><br><span class="line">    NSCalendar *dateCalendar = [[NSCalendar alloc]initWithCalendarIdentifier:NSCalendarIdentifierGregorian];</span><br><span class="line">  </span><br><span class="line">    // NSDate 转 NSDateComponents所需要设置的值，可根据需要自己设置，这里是年～秒全部获取，如果某个没有写的话，比如NSCalendarUnitHour，转成NSDateComponents后，会是一个很大或很小的数</span><br><span class="line">    NSInteger unitFlags = NSCalendarUnitYear | NSCalendarUnitMonth | NSCalendarUnitWeekday | NSCalendarUnitDay | NSCalendarUnitHour | NSCalendarUnitMinute | NSCalendarUnitSecond;</span><br><span class="line">    </span><br><span class="line">    //为dateComponents获取值，该值等价于self的各个部件</span><br><span class="line">    dateComponents = [dateCalendar components:unitFlags fromDate:self];</span><br><span class="line">    //创建一个NSDateComponents，开始设置想要的时间</span><br><span class="line">    NSDateComponents *myCompoentes = [[NSDateComponents alloc]init];</span><br><span class="line">    [myCompoentes setYear:dateComponents.year + year];</span><br><span class="line">    [myCompoentes setMonth:dateComponents.month + month];</span><br><span class="line">    [myCompoentes setDay:dateComponents.day + day];</span><br><span class="line">    [myCompoentes setHour:dateComponents.hour + hour];</span><br><span class="line">    [myCompoentes setMinute:dateComponents.minute + minute];</span><br><span class="line">    [myCompoentes setSecond:dateComponents.second + second];</span><br><span class="line">    </span><br><span class="line">    //把通过myCompoentes设置的值转为NSDate格式，这个NSDate就是想要的时间</span><br><span class="line">    NSDate *myDate = [dateCalendar dateFromComponents:myCompoentes];</span><br><span class="line">    </span><br><span class="line">    return myDate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//这个方法可以直接更改某个日期的某个组件   参数传-1表示不改变</span><br><span class="line">- (instancetype)setDateWithYear:(NSInteger)year month:(NSInteger)month day:(NSInteger)day hours:(NSInteger)hour minute:(NSInteger)minute second:(NSInteger)second&#123;</span><br><span class="line">    //创建一个工具，一个封装了具体年月日、时秒分、周、季度等的类</span><br><span class="line">    NSDateComponents* dateComponents;</span><br><span class="line">    //创建一个日历，它提供了大部分的日期计算接口，并且允许在NSDate和NSDateComponents之间转换</span><br><span class="line">    NSCalendar *dateCalendar = [[NSCalendar alloc]initWithCalendarIdentifier:NSCalendarIdentifierGregorian];</span><br><span class="line"></span><br><span class="line">    NSInteger unitFlags = NSCalendarUnitYear | NSCalendarUnitMonth | NSCalendarUnitDay | NSCalendarUnitHour | NSCalendarUnitMinute | NSCalendarUnitSecond;</span><br><span class="line">    </span><br><span class="line">    dateComponents = [dateCalendar components:unitFlags fromDate:self];</span><br><span class="line">    //创建一个NSDateComponents，开始设置想要的时间</span><br><span class="line">    NSDateComponents *myCompoentes = [[NSDateComponents alloc]init];</span><br><span class="line">    </span><br><span class="line">    year != -1 ? [myCompoentes setYear:year] : [myCompoentes setYear:dateComponents.year];</span><br><span class="line">    month != -1 ? [myCompoentes setMonth:month] : [myCompoentes setMonth:dateComponents.month];</span><br><span class="line">    day != -1 ? [myCompoentes setDay:day] : [myCompoentes setDay:dateComponents.day];</span><br><span class="line">    hour != -1 ? [myCompoentes setHour:hour] : [myCompoentes setHour:dateComponents.hour];</span><br><span class="line">    minute != -1 ? [myCompoentes setMinute: minute : [myCompoentes setMinute:dateComponents.minute];</span><br><span class="line">    second != -1 ? [myCompoentes setSecond:second] : [myCompoentes setSecond:dateComponents.second];</span><br><span class="line">    //把通过myCompoentes设置的值转为NSDate格式，这个NSDate就是想要的时间</span><br><span class="line">    NSDate *myDate = [dateCalendar dateFromComponents:myCompoentes];</span><br><span class="line">    </span><br><span class="line">    return myDate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li>接下来要分析如何得到某个月份的最后一天,由于每个月的天数的不一样,还有2月这个特殊存在,不好使用穷尽判断的方式来设置.这时候就想到<strong>日历对象对日期的操作,结合上面两个方法,轻而易举的就实现了</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- (NSDate *)getMonthLastDate&#123;</span><br><span class="line">  //先设置为1号,因为比如10月份如果是刚好是31号然后让它月份+1,会导致得到的日期变成12月的1号而不是11月30号</span><br><span class="line">    NSDate *firstDate = [self setDateWithYear:-1 month:-1 day:1 hours:0 minute:0 second:0];</span><br><span class="line">    //再让月份+1  ,这样就得到了下个月的1号</span><br><span class="line">    NSDate *nextMonthDate = [firstDate getDateFromDateWithYear:0 month:1 day:0 hours:0 minute:0 second:0];</span><br><span class="line">    //最后让已经是1号的NSDate天数-1,  就得到了本月的最后一天了</span><br><span class="line">    NSDate *monthLastDate = [nextMonthDate getDateFromDateWithYear:0 month:0 day:-1 hours:0 minute:0 second:0];</span><br><span class="line">    return monthLastDate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li>这里有个小插曲,就是如果需要拿当前月份的数据的时候,不能传这个月的最后一天,只能传当前Date,因此需要<strong>判断NSDate是否是当月</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- (BOOL)isThisMonth</span><br><span class="line">&#123;</span><br><span class="line">    NSCalendar *calendar = [NSCalendar currentCalendar];</span><br><span class="line">    NSCalendarUnit unit = NSCalendarUnitYear | NSCalendarUnitMonth;</span><br><span class="line">    // 获得某个时间的年月</span><br><span class="line">    NSDateComponents *dateCmps = [calendar components:unit fromDate:self];</span><br><span class="line">  //与当前日期比较</span><br><span class="line">    NSDateComponents *nowCmps = [calendar components:unit fromDate:[NSDate date]];</span><br><span class="line">    return dateCmps.year == nowCmps.year &amp;&amp; dateCmps.month == nowCmps.month;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li><strong>如果需要判断得到的日期是否是周末</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">- (BOOL)isWeekend&#123;</span><br><span class="line">    //计算week数</span><br><span class="line">    NSCalendar * myCalendar = [NSCalendar currentCalendar];</span><br><span class="line">    myCalendar.timeZone = [NSTimeZone systemTimeZone];</span><br><span class="line">    NSInteger week = [[myCalendar components:NSCalendarUnitWeekday fromDate:self] weekday];</span><br><span class="line">    //国际日期中1是周日 7是周六 , 其他2~6对应星期一~星期五</span><br><span class="line">    switch (week) &#123;</span><br><span class="line">        case 1: &#123; return YES; &#125;</span><br><span class="line">        case 7: &#123; return YES; &#125;</span><br><span class="line">        default: &#123; return NO; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言:&quot;&gt;&lt;/a&gt;前言:&lt;/h3&gt;&lt;p&gt;   &lt;strong&gt;&lt;em&gt;由于查询数据库时查询条件需要传递日期来获取某个月份的数据列表,如果传的时该月的某一天会导致拿到数
      
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOSDevelopment/"/>
    
      <category term="项目/日常问题" scheme="http://yoursite.com/categories/iOSDevelopment/Project-daily/"/>
    
    
  </entry>
  
  <entry>
    <title>限制键盘输入字符/位数</title>
    <link href="http://yoursite.com/2018/01/10/%E9%99%90%E5%88%B6%E9%94%AE%E7%9B%98%E8%BE%93%E5%85%A5%E5%AD%97%E7%AC%A6:%E4%BD%8D%E6%95%B0/"/>
    <id>http://yoursite.com/2018/01/10/限制键盘输入字符:位数/</id>
    <published>2018-01-10T05:25:07.000Z</published>
    <updated>2018-01-12T13:02:50.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h3><p><strong>很多情况下，输入框都是需要按照要求进行输入。例如：密码输入框只能输入纯数字或者是拼音与数字结合的文本等，那么我们在开发的时候就需要做一些输入文本的限制。当然,以下的方法都可以使用正则来实现,找个时间我顺便把正则也给补充上来~</strong></p><hr><ul><li><strong>只能输入纯数字</strong></li></ul><p><code>在这里以UITextField为例：其实现代码如下：</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#define Numbers @&quot;1234567890&quot;</span><br><span class="line"></span><br><span class="line">- (BOOL)textField:(UITextField *)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString *)string&#123;</span><br><span class="line">  //invertedSet方法是去反字符,把所有的除了Numbers里的字符都找出来(包含去空格功能)</span><br><span class="line">  NSCharacterSet *cs = [[NSCharacterSet characterSetWithCharactersInString:Numbers invertedSet];</span><br><span class="line">//利用上述得到的反字符集合分割原有字符串,并且重新拼接起来就得到纯数字字符串</span><br><span class="line">  NSString *filtered = [[string componentsSeparatedByCharactersInSet:cs] componentsJoinedByString:@&quot;&quot;];</span><br><span class="line">// 如果重新拼接起来的字符串和原字符串相同说明没有其他字符</span><br><span class="line">  return [string isEqualToString:filtered];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li><strong>只能输入纯大小写字母</strong></li></ul><p>和以上只能输入纯数字类似，实现起来简单，只需要宏定义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#define LETTER @&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&quot;</span><br><span class="line"></span><br><span class="line">- (BOOL)textField:(UITextField *)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString *)string</span><br><span class="line">  &#123;</span><br><span class="line">    NSCharacterSet *cs = [[NSCharacterSet characterSetWithCharactersInString:LETTER] invertedSet];</span><br><span class="line">    NSString *filtered = [[string componentsSeparatedByCharactersInSet:cs] componentsJoinedByString:@&quot;&quot;];</span><br><span class="line">    return [string isEqualToString:filtered];</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><hr><ul><li><strong>大小写字母和数字结合输入</strong></li></ul><p><code>方法类似上面的做法</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define LETTER_NUMBER @&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&quot;</span><br></pre></td></tr></table></figure><blockquote><p>同样道理,具体能够输入哪些内容如果输入内容能够一一列举的话我们就可以通过define来设置了，实现起来超简单。</p></blockquote><hr><p><strong>限制只能输入中文</strong></p><p><em>在这里用到了观察者(因为其实通过联想/复制输入是不会走shouldChangeCharactersInRange代理方法的,会导致联想输入的中文没法控制,所以需要通过KVO监听 , 不过有时候我一般选择直接关掉联想,世界清静~~)</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    _myTextField.delegate = self;</span><br><span class="line">    [[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(textFiledEditChanged:) name:UITextFieldTextDidChangeNotification object:_myTextField];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (BOOL)textFieldShouldReturn:(UITextField *)textField&#123;</span><br><span class="line">    [textField resignFirstResponder];</span><br><span class="line"></span><br><span class="line">    //过滤非汉字字符</span><br><span class="line">    textField.text = [self filterCharactor:textField.text withRegex:@&quot;[^\u4e00-\u9fa5]&quot;];</span><br><span class="line">//截四位汉字</span><br><span class="line">    if (textField.text.length &gt;= 4) &#123;</span><br><span class="line">        textField.text = [textField.text substringToIndex:4];</span><br><span class="line">    &#125;</span><br><span class="line">    return NO;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)textFiledEditChanged:(id)notification&#123;</span><br><span class="line"></span><br><span class="line">    UITextRange *selectedRange = _myTextField.markedTextRange;</span><br><span class="line">    UITextPosition *position = [_myTextField positionFromPosition:selectedRange.start offset:0];</span><br><span class="line">    if (!position) &#123; //// 没有高亮选择的字</span><br><span class="line">        //过滤非汉字字符</span><br><span class="line">        _myTextField.text = [self filterCharactor:_myTextField.text withRegex:@&quot;[^\u4e00-\u9fa5]&quot;];</span><br><span class="line">        if (_myTextField.text.length &gt;= 4) &#123;</span><br><span class="line">            _myTextField.text = [_myTextField.text substringToIndex:4];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else &#123; //有高亮文字</span><br><span class="line">        //do nothing</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (NSString *)filterCharactor:(NSString *)string withRegex:(NSString *)regexStr&#123;</span><br><span class="line">    NSString *searchText = string;</span><br><span class="line">    NSError *error = NULL;</span><br><span class="line">    NSRegularExpression *regex = [NSRegularExpression regularExpressionWithPattern:regexStr options:NSRegularExpressionCaseInsensitive error:&amp;error];</span><br><span class="line">    NSString *result = [regex stringByReplacingMatchesInString:searchText options:NSMatchingReportCompletion range:NSMakeRange(0, searchText.length) withTemplate:@&quot;&quot;];</span><br><span class="line">    return result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><ul><li><strong>如果要限制输入字符位数的话可以直接设置，这个实现上有很多种，最简单的就是</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (void)textViewDidChange:(UITextView *)textView&#123;</span><br><span class="line">    NSInteger number = [textView.text length];</span><br><span class="line">    if (number &gt; 300) &#123;</span><br><span class="line">        textView.text = [textView.text substringToIndex:300];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li><strong>如果输入框是金额类数字,需要限制小数点前小数点后位数可以用下面的分类方法</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">- (BOOL)textField:(UITextField *)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString *)string&#123;</span><br><span class="line">    return [NSString limitPayMoneyDot:textField shouldChangeCharactersInRange:range replacementString:string dotPreBits:10 dotAfterBits:2];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (BOOL) limitPayMoneyDot:(UITextField *)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString *)string dotPreBits:(int)dotPreBits dotAfterBits:(int)dotAfterBits</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    static NSString *myDotNumbers = @&quot;0123456789.\n&quot;;</span><br><span class="line">    static NSString *myNumbers = @&quot;0123456789\n&quot;;</span><br><span class="line">  </span><br><span class="line">  /**********   过滤各种情况  **********/</span><br><span class="line">    if ([string isEqualToString:@&quot;\n&quot;] || [string isEqualToString:@&quot;&quot;])</span><br><span class="line">    &#123; //按下return</span><br><span class="line">        return YES;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //当设置小数点后位数为0时不能输入小数点</span><br><span class="line">    if([string isEqualToString:@&quot;.&quot;] &amp;&amp; dotAfterBits == 0)&#123;</span><br><span class="line">        return NO;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //首位不能是小数点  |   不能多个小数点   |  不能首位多个0   | 小数点后最后一位不能是0</span><br><span class="line">    if(([string isEqualToString:@&quot;.&quot;] &amp;&amp; textField.text.length == 0) || ([textField.text containsString:@&quot;.&quot;] &amp;&amp; [string isEqualToString:@&quot;.&quot;]) || ([string isEqualToString:@&quot;0&quot;] &amp;&amp; [textField.text isEqualToString:@&quot;0&quot;]))&#123;</span><br><span class="line">        return NO;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  /**********   开始限制逻辑  **********/</span><br><span class="line">    NSCharacterSet *cs;</span><br><span class="line">    NSUInteger nDotLoc = [textField.text rangeOfString:@&quot;.&quot;].location;</span><br><span class="line">    </span><br><span class="line">    //不能0.00000, 也就是前面都是0的情况下小数点最后一位不能是0</span><br><span class="line">    if (nDotLoc != NSNotFound &amp;&amp; range.location == nDotLoc + dotAfterBits ) &#123;</span><br><span class="line">        float number = [textField.text floatValue];</span><br><span class="line">        if (number == 0 &amp;&amp; [string isEqualToString:@&quot;0&quot;]) &#123;</span><br><span class="line">            return NO;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    if (NSNotFound == nDotLoc &amp;&amp; 0 != range.location)//整数</span><br><span class="line">    &#123;</span><br><span class="line">        //去空格去数字</span><br><span class="line">        cs = [[NSCharacterSet characterSetWithCharactersInString:myNumbers] invertedSet];</span><br><span class="line">        if ([string isEqualToString:@&quot;.&quot;])</span><br><span class="line">        &#123;</span><br><span class="line">            return YES;</span><br><span class="line">        &#125;</span><br><span class="line">        //超过整数位数限制</span><br><span class="line">        if (textField.text.length &gt;= dotPreBits)</span><br><span class="line">        &#123;  </span><br><span class="line">            return NO;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else //非整数</span><br><span class="line">    &#123;</span><br><span class="line">        cs = [[NSCharacterSet characterSetWithCharactersInString:myDotNumbers] invertedSet];</span><br><span class="line">        if (textField.text.length &gt;= dotPreBits + dotAfterBits + 1)</span><br><span class="line">        &#123;</span><br><span class="line">          //超过位数限制</span><br><span class="line">            return  NO;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //过滤</span><br><span class="line">    NSString *filtered = [[string componentsSeparatedByCharactersInSet:cs] componentsJoinedByString:@&quot;&quot;];</span><br><span class="line">    BOOL basicTest = [string isEqualToString:filtered];</span><br><span class="line">    if (!basicTest)</span><br><span class="line">    &#123;</span><br><span class="line">      //输入了非法字符</span><br><span class="line">        return NO;</span><br><span class="line">    &#125;</span><br><span class="line">    if (NSNotFound != nDotLoc &amp;&amp; range.location &gt; nDotLoc + dotAfterBits)</span><br><span class="line">    &#123;  //超过位数限制</span><br><span class="line">        return NO;</span><br><span class="line">    &#125;</span><br><span class="line">    return YES;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言:&quot;&gt;&lt;/a&gt;前言:&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;很多情况下，输入框都是需要按照要求进行输入。例如：密码输入框只能输入纯数字或者是拼音与数字结合的文本等，那么我
      
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOSDevelopment/"/>
    
      <category term="项目/日常问题" scheme="http://yoursite.com/categories/iOSDevelopment/Project-daily/"/>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>调起QQ临时会话</title>
    <link href="http://yoursite.com/2018/01/10/%E8%B0%83%E8%B5%B7QQ%E4%B8%B4%E6%97%B6%E4%BC%9A%E8%AF%9D/"/>
    <id>http://yoursite.com/2018/01/10/调起QQ临时会话/</id>
    <published>2018-01-10T03:27:52.000Z</published>
    <updated>2018-01-12T13:07:56.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h3><p><strong>前段时间项目中有个需求,在App内调起QQ客户端和客服发起临时会话.</strong></p><blockquote><ol><li><p>QQ开发者平台,并没有找到App调用QQ客户端发起临时会话方法,(只提供了网页端接入方法)</p></li><li><p>网上搜到的一些方法,大部分都粗秒淡写,要么可以调用QQ客户端,不能成功发送消息,要么是其他问题.并且大部分只是说明了调起普通版QQ的方法,当用户没有安装普通QQ而且安装了国际版QQi或者TIM的时候那些方法都是无效的</p></li><li><p>网上还有说接收临时消息的QQ号要开通QQ推广功能,没有开通的是接收不了陌生人消息的…但是我自己用个人QQ都可以….</p></li></ol></blockquote><hr><blockquote><p><strong>注意  </strong>调起临时会话的话记得考虑用户没安装QQ而是安装了国际版QQi或者TIM，因为他们的Scheme是不一样的….此外，从外部APP打开TIM会导致TIM卡死（我不知道这是神马bug，然而网上大部分只是打开QQ没考虑后两种情况所以也查不到什么原因，官网自然也是啥都没提到….不知道现在怎么样了，没测试过它~~）</p></blockquote><hr><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><ul><li><strong>将各版本Schemes添加到项目plist文件白名单中(iOS9新出要求),方法如下:</strong><ul><li>在项目info.plist添加LSApplicationQueriesSchemes字段 类型Array</li><li>在此Array中添加各个需要的QQ版本的Schemes</li></ul></li></ul><p><img src="http://www.z4a.net/images/2018/01/10/_20180110115213.png" alt="各版本QQSchemes"></p><hr><ul><li><strong>直接上代码:</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">if (![self OpenUrl:[NSString stringWithFormat:@&quot;mqq://im/chat?chat_type=wpa&amp;uin=%@&amp;version=1&amp;src_type=web&quot;,ServiceQQNumber]]) &#123;//QQ</span><br><span class="line">if(![self OpenUrl:[NSString stringWithFormat:@&quot;mqqiapi://im/chat?chat_type=wpa&amp;uin=%@&amp;version=1&amp;src_type=web&quot;,ServiceQQNumber]])&#123;//国际版QQi</span><br><span class="line">//if(![self OpenUrl:@&quot;TIM://&quot;])&#123;//TIM    //测试打开后会卡死</span><br><span class="line">             [xxHUD showError:@&quot;无法打开,清先安装QQ&quot;];</span><br><span class="line">                // &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">- (BOOL)OpenUrl:(NSString *)url&#123;</span><br><span class="line">if([[UIApplication sharedApplication] canOpenURL:[NSURL  URLWithString:url]])&#123;</span><br><span class="line">[[UIApplication sharedApplication] openURL:[NSURL URLWithString:url]];</span><br><span class="line">        return YES;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return NO;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言:&quot;&gt;&lt;/a&gt;前言:&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;前段时间项目中有个需求,在App内调起QQ客户端和客服发起临时会话.&lt;/strong&gt;&lt;/p&gt;
&lt;blockq
      
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOSDevelopment/"/>
    
      <category term="项目/日常问题" scheme="http://yoursite.com/categories/iOSDevelopment/Project-daily/"/>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>html中的文本级/容器级标签与css中的块级/行内元素</title>
    <link href="http://yoursite.com/2018/01/09/html%E4%B8%AD%E7%9A%84%E6%96%87%E6%9C%AC%E7%BA%A7:%E5%AE%B9%E5%99%A8%E7%BA%A7%E6%A0%87%E7%AD%BE%E4%B8%8Ecss%E4%B8%AD%E7%9A%84%E5%9D%97%E7%BA%A7:%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0/"/>
    <id>http://yoursite.com/2018/01/09/html中的文本级:容器级标签与css中的块级:行内元素/</id>
    <published>2018-01-09T07:59:34.000Z</published>
    <updated>2018-01-10T03:14:01.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="html中的文本级-容器级标签与css中的块级-行内元素"><a href="#html中的文本级-容器级标签与css中的块级-行内元素" class="headerlink" title="html中的文本级/容器级标签与css中的块级/行内元素"></a>html中的文本级/容器级标签与css中的块级/行内元素</h3><hr><ol><li><strong>块级元素</strong></li></ol><blockquote><ul><li>霸占一行，不能与其他任何元素并列</li><li>能 接受宽、高</li><li>如果不设置宽度，那么宽度将默认变为<em>父亲</em>的100%。</li></ul></blockquote><ol><li><strong>行内元素</strong></li></ol><blockquote><ul><li>与  其他行内元素并排</li><li>不能  设置宽、高。默认的宽度，就是文字的宽度。</li></ul></blockquote><hr><p>在HTML中，已经将标签分过类：<strong>文本级、容器级。</strong></p><blockquote><ul><li><p>文本级：p、span、a、b、i、u、em</p></li><li><p>容器级：div、h系列、li、dt、ddCSS的分类和上面的很像，就p不一样：</p><p><strong><em>所有的文本级标签，都是行内元素，除了p，p是个文本级，但是是个块级元素。</em></strong></p><p><strong><em>所有的容器级标签都是块级元素。</em></strong></p></li></ul></blockquote><p><img src="http://www.z4a.net/images/2018/01/09/html.png" alt="html标签区分"></p><p><img src="http://www.z4a.net/images/2018/01/09/css.png" alt="css区分元素"></p><ol><li><strong>块级元素和行内元素的相互转换</strong></li></ol><blockquote><ul><li>块级元素可以设置为行内元素</li><li>行内元素可以设置为块级元素</li></ul></blockquote><hr><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">display: inline;</span><br><span class="line">background-color: pink;</span><br><span class="line">width: 500px;</span><br><span class="line">height: 500px;&#125;</span><br></pre></td></tr></table></figure><p><strong>display</strong>是“显示模式”的意思，用来改变元素的行内、块级性质</p><p><strong><em>inline</em></strong>就是“行内”。</p><p>一旦，给一个标签设置  <code>display: inline</code>;</p><p>那么，这个标签将立即变为行内元素。此时它和一个span无异：</p><blockquote><blockquote><ul><li>此时这个div不能设置宽度、高度；</li></ul><ul><li>此时这个div可以和别人并排了同样的道理，</li></ul></blockquote></blockquote><hr><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">span&#123;</span><br><span class="line">display: block;</span><br><span class="line">width: 200px;</span><br><span class="line">height: 200px;</span><br><span class="line">background-color: pink;&#125;</span><br></pre></td></tr></table></figure><p><strong>“block”</strong>是“块”的意思让标签变为块级元素。此时这个标签，和一个div无异：</p><blockquote><blockquote><ul><li>此时这个span能够设置宽度、高度</li><li>此时这个span必须霸占一行了，别人无法和他并排</li><li>如果不设置宽度，将撑满父亲</li></ul></blockquote></blockquote><hr><p>标准流里面限制非常多，标签的性质恶心。比如，如果需要盒子并排、并且需要设置宽高。所以，移民！脱离标准流！</p><p>css中一共有三种手段，使一个元素脱离标准文档流：</p><blockquote><ol><li><strong>浮动</strong></li><li><strong>绝对定位</strong></li><li><strong>固定定位</strong></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h3 id=&quot;html中的文本级-容器级标签与css中的块级-行内元素&quot;&gt;&lt;a href=&quot;#html中的文本级-容器级标签与css中的块级-行内元素&quot; class=&quot;headerlink&quot; title=&quot;html中的文本级/容器级标签与css中的块级/行内元素&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="html+css+js" scheme="http://yoursite.com/categories/html-css-js/"/>
    
      <category term="样式表" scheme="http://yoursite.com/categories/html-css-js/CSS/"/>
    
    
      <category term="html+css+js" scheme="http://yoursite.com/tags/html-css-js/"/>
    
  </entry>
  
  <entry>
    <title>沙盒文件夹的作用和选择</title>
    <link href="http://yoursite.com/2016/04/18/%E6%B2%99%E7%9B%92%E6%96%87%E4%BB%B6%E5%A4%B9%E7%9A%84%E4%BD%9C%E7%94%A8%E5%92%8C%E9%80%89%E6%8B%A9/"/>
    <id>http://yoursite.com/2016/04/18/沙盒文件夹的作用和选择/</id>
    <published>2016-04-18T10:56:00.000Z</published>
    <updated>2018-01-09T03:56:54.000Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><h6 id="沙盒大家都知道，但是平时要存储数据时总不知道存到哪里去才是正确的选择，这次就来聊聊每一个文件夹的作用和使用时该怎么选择"><a href="#沙盒大家都知道，但是平时要存储数据时总不知道存到哪里去才是正确的选择，这次就来聊聊每一个文件夹的作用和使用时该怎么选择" class="headerlink" title="沙盒大家都知道，但是平时要存储数据时总不知道存到哪里去才是正确的选择，这次就来聊聊每一个文件夹的作用和使用时该怎么选择"></a>沙盒大家都知道，但是平时要存储数据时总不知道存到哪里去才是正确的选择，这次就来聊聊每一个文件夹的作用和使用时该怎么选择</h6></blockquote><hr><h6 id="先来了解每一个文件夹的基本作用"><a href="#先来了解每一个文件夹的基本作用" class="headerlink" title="先来了解每一个文件夹的基本作用"></a>先来了解每一个文件夹的基本作用</h6><blockquote><p>   • Documents：保存应用运行时生成的需要持久化的数据，iTunes同步设备时会备份该目录。<br>• tmp：保存应用运行时所需的临时数据，使用完毕后再将相应的文件从该目录删除。应用没有运行时，系统也可能会清除该目录下的文件。iTunes同步设备时不会备份该目录<br>• Library/Caches：保存应用运行时生成的需要持久化的数据，iTunes同步设备时不会备份该目录。一般存储体积大、不需要备份的非重要数据<br>• Library/Preference：保存应用的所有偏好设置，iOS的Settings(设置)应用会在该目录中查找应用的设置信息。iTunes同步设备时会备份该目录</p><h6 id="（看完还是不知道到底存哪里比较好啊喂-╯’-‘-╯︵-┻━┻-）"><a href="#（看完还是不知道到底存哪里比较好啊喂-╯’-‘-╯︵-┻━┻-）" class="headerlink" title="（看完还是不知道到底存哪里比较好啊喂(╯’ - ‘)╯︵ ┻━┻ ）"></a>（看完还是不知道到底存哪里比较好啊喂(╯’ - ‘)╯︵ ┻━┻ ）</h6></blockquote><hr><blockquote><h6 id="–-Documents"><a href="#–-Documents" class="headerlink" title="– Documents"></a>– Documents</h6><p>– 需要保存由”应用程序本身”产生的文件或者数据，例如：游戏进度、涂鸦软件的绘图信息<br>– 目录中的文件会被自动保存在 iClioud<br>– 注意 ： 不要保存从网络上下载的文件，否则会无法上架</p><hr><h6 id="–-Caches"><a href="#–-Caches" class="headerlink" title="– Caches"></a>– Caches</h6><p>– 保存临时文件，”后续需要使用”，例如：缓存图片、离线数据(地图数据等)<br>– 系统不会清零 cache 目录中的文件  –&gt; 因此要求程序开发时，”必须提供 cache 目录的清理解决方案”</p><hr><h6 id="–-Preference"><a href="#–-Preference" class="headerlink" title="– Preference"></a>– Preference</h6><p>– 用户偏好设置，使用 NSUserDefault 直接读写</p><hr><h6 id="–-Tmp"><a href="#–-Tmp" class="headerlink" title="– Tmp"></a>– Tmp</h6><p>– 保存临时文件，”后续不需要使用”<br>– tmp  目录中的文件，系统会自动清零<br>– 重新启动手机时，tmp  目录会被情况<br>– 系统磁盘空间不足时，系统也会自动清理</p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;blockquote&gt;
&lt;h6 id=&quot;沙盒大家都知道，但是平时要存储数据时总不知道存到哪里去才是正确的选择，这次就来聊聊每一个文件夹的作用和使用时该怎么选择&quot;&gt;&lt;a href=&quot;#沙盒大家都知道，但是平时要存储数据时总不知道存到哪里去才是正确的选择，这次就来聊聊每一
      
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOSDevelopment/"/>
    
      <category term="原生应用" scheme="http://yoursite.com/categories/iOSDevelopment/Native/"/>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>代理/通知/KVO 的区别</title>
    <link href="http://yoursite.com/2016/04/17/%E4%BB%A3%E7%90%86:%E9%80%9A%E7%9F%A5:KVO%20%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2016/04/17/代理:通知:KVO 的区别/</id>
    <published>2016-04-16T17:15:00.000Z</published>
    <updated>2018-01-09T03:49:51.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h6 id="通知-NSNotification、通知中心-NSNotificationCenter"><a href="#通知-NSNotification、通知中心-NSNotificationCenter" class="headerlink" title="通知 NSNotification、通知中心 NSNotificationCenter"></a>通知 NSNotification、通知中心 NSNotificationCenter</h6><p>◦    任何对象之间都可以传递消息(一般在层级结构比较深又需要传值的情况)</p><ul><li>使用范围<br>▪    1个对象可以发通知给多个对象<br>▪    1个对象可以接受多个对象发出的通知<br>◦    要求:必须得保证通知的名字在发出和监听时是一致的</li></ul><hr><h6 id="KVO"><a href="#KVO" class="headerlink" title="KVO"></a>KVO</h6><p>◦    仅仅是能监听对象属性的改变（灵活度不如通知和代理）</p><hr><h6 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h6><ul><li>使用范围<br>▪    1个对象只能设置一个代理(假设这个对象只有1个代理属性)<br>▪    1个对象能成为多个对象的代理</li></ul><hr><h6 id="如何选择"><a href="#如何选择" class="headerlink" title="如何选择?"></a>如何选择?</h6><p>◦    代理比通知规范，非常适合多人开发以及代码维护<br>◦    如果要通知多个对象,就用通知</p><p>◦    建议使用代理多于通知,能使用代理尽量使用代理<br>◦    当层级结构非常深，难以拿到对应对象时使用通知</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h6 id=&quot;通知-NSNotification、通知中心-NSNotificationCenter&quot;&gt;&lt;a href=&quot;#通知-NSNotification、通知中心-NSNotificationCenter&quot; class=&quot;headerlink&quot; title=&quot;通
      
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOSDevelopment/"/>
    
      <category term="面试问题" scheme="http://yoursite.com/categories/iOSDevelopment/InterviewFAQ/"/>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>纠正网上大部分文章对UITableView分割线的不正确认识</title>
    <link href="http://yoursite.com/2016/04/16/%E7%BA%A0%E6%AD%A3%E7%BD%91%E4%B8%8A%E5%A4%A7%E9%83%A8%E5%88%86%E6%96%87%E7%AB%A0%E5%AF%B9UITableView%E5%88%86%E5%89%B2%E7%BA%BF%E7%9A%84%E4%B8%8D%E6%AD%A3%E7%A1%AE%E8%AE%A4%E8%AF%86/"/>
    <id>http://yoursite.com/2016/04/16/纠正网上大部分文章对UITableView分割线的不正确认识/</id>
    <published>2016-04-16T06:04:00.000Z</published>
    <updated>2018-01-09T12:54:52.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h5 id="本篇文章主要有两个内容-1-正确认识全屏分割线的设置-2-去除没有数据的Cell或者指定Cell的分割线"><a href="#本篇文章主要有两个内容-1-正确认识全屏分割线的设置-2-去除没有数据的Cell或者指定Cell的分割线" class="headerlink" title="本篇文章主要有两个内容:1. 正确认识全屏分割线的设置  2. 去除没有数据的Cell或者指定Cell的分割线"></a>本篇文章主要有两个内容:1. 正确认识全屏分割线的设置  2. 去除没有数据的Cell或者指定Cell的分割线</h5><blockquote><p>毕竟这里只是我自己本人的看法和总结  –  有什么建议或者觉得我说得不好的地方，欢迎互相探讨。毕竟探讨越多提升越大~~</p></blockquote><hr><h4 id="—-PART-One—"><a href="#—-PART-One—" class="headerlink" title="—-PART One—-"></a>—-PART One—-</h4><p>首先是我一直觉得很不爽的全屏分割线(为何不爽,看完这一部分大家应该也能理解我的感受)</p><blockquote><h2 id="自定义Cell的情况"><a href="#自定义Cell的情况" class="headerlink" title="自定义Cell的情况"></a>自定义Cell的情况</h2><ul><li>把系统的分割线隐藏,然后自己创建一个高度为1的UIVIew添加到Cell的底部或者顶部</li><li>把系统的分割线隐藏,然后设置tableview的背景色为自己想要的分割线颜色，重写Cell的setFrame方法，把高度减1(需要的话还可以把宽度也减一点点，会有不一样的效果~)</li><li>设置Cell的<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-  或者设置tableview的```separatorInset = UIEdgeInsetsZero```、再设置Cell的 ```layoutMargins = UIEdgeInsetsZero</span><br></pre></td></tr></table></figure></li></ul></blockquote><hr><blockquote><h2 id="不自定义Cell的情况"><a href="#不自定义Cell的情况" class="headerlink" title="不自定义Cell的情况"></a>不自定义Cell的情况</h2><ul><li>设置Cell的preservesSuperviewLayoutMargins = NO、separatorInset = UIEdgeInsetsZero 、 layoutMargins = UIEdgeInsetsZero</li><li>或者设置tableview的 separatorInset = UIEdgeInsetsZero、再设置Cell的 preservesSuperviewLayoutMargins = NO、layoutMargins = UIEdgeInsetsZero</li></ul><p>其实嘛，之所以会有边距都是separatorInset和layoutMargins这两个属性作祟，<br>tableview和Cell同时都有这两个属性导致了两个单位的偏移，<br>而separatorInset这个无论tableview设置还是Cell设置都是一样可以减少一个单位的偏移(即使两个都设置了也只是减一个单位)</p><blockquote><p>另外一个重要原因是 layoutMargins这个属性,当你没有设置这个属性的时候，它会默认有 {8,8,8,8} 的偏移量，<br>但是呢，即使你设置了tableview的 layoutMargins=UIEdgeInsetsZero ，你也会发现没用。<br>这是因为另一个属性 preservesSuperviewLayoutMargins又在搞事情，<br>这个属性的意思是保持父控件的layoutMargins属性的行为(大概吧（雾…）)默认是NO。<br>也就是说，Cell本身的layoutMargins还是默认的 {8，8，8，8} ，因此还是有一个单位的偏移。。。<br>但是啊但是(好多但是→_→)即使设置为YES也并没有什么效果，<br>因为呀，Cell的父视图并不是TableView呢…而是一个叫UITableviewWrapperView的</p></blockquote></blockquote><p><img src="http://www.z4a.net/images/2018/01/09/TBVSeparator_1.png" alt="UITableViewSeparator_1.png"></p><blockquote><p>此外，当你使用系统默认的UITableviewCell类的时候，preservesSuperviewLayoutMargins默认是为YES的，而自定义Cell的时候这个属性会自动置为NO</p></blockquote><p><strong>因此，我在这里要重新说明如何自定义TableView全屏的分割线<br>如果自定义Cell的话只需要设置  tableview 或者 Cell的 separatorInset = UIEdgeInsetsZero 以及Cell的的layoutMargins =UIEdgeInsetsZero 这简单的两步就可以了!!!<br> 如果使用系统的是UITableviewCell类的话就再多加上preservesSuperviewLayoutMargins = NO这句就可以了</strong></p><h4 id="—-PART-Two—"><a href="#—-PART-Two—" class="headerlink" title="—-PART Two—-"></a>—-PART Two—-</h4><p>去除没有数据的Cell或者指定Cell的分割线</p><blockquote><p>   想要去除没有数据的Cell的分割线的话非常简单，只需要设置tableviewFootView为一个空的View,那么下面没有数据的Cell的就不会显示了</p></blockquote><p><img src="http://www.z4a.net/images/2018/01/09/TBVSeparator_2.png" alt="UITableViewSeparator_2.png"></p><blockquote><p>  另外一个是因为前几天刚好遇见个需求，就是要去除指定的某一个Cell的分割线。<br>  那我们其实就可以利用separatorInset来完成这个需求只需要把分割线移除屏幕外或者把它压缩为0像素就可以了</p></blockquote><p><img src="http://www.z4a.net/images/2018/01/09/TBVSeparator_3.png" alt="UITableViewSeparator_3.png"></p><p>效果很容易就达到了~~</p><p><img src="http://www.z4a.net/images/2018/01/09/TBVSeparator_4.png" alt="UITableViewSeparator_4.png"></p><p><strong>最后说几句—关于preservesSuperviewLayoutMargins属性还是无法理解它的作用…看了苹果文档，大概意思是如果设为Yes的话,则父控件内容的左边距会留出一个最小间距出来。虽然我说了Cell的父控件是UITableviewWrapperView，而且在CellForRow数据源方法中也拿不到它(因为Cell要在该方法返回后才被系统使用并添加到父控件上)，但是即使我在其他能拿到的地方拿到它了，并且设置了它的layoutMargins =UIEdgeInsetsZero和Cell的preservesSuperviewLayoutMargins = YES，可惜却也完全没有效果…如果大家有什么见解希望能告知一声~</strong></p><p><img src="http://www.z4a.net/images/2018/01/09/TBVSeparator_5.png" alt="UITableViewSeparator_5.png"></p><hr><h3 id="至此，我的个人见解说完了，谢谢大家的阅读"><a href="#至此，我的个人见解说完了，谢谢大家的阅读" class="headerlink" title="至此，我的个人见解说完了，谢谢大家的阅读~~~"></a>至此，我的个人见解说完了，谢谢大家的阅读~~~</h3><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h5 id=&quot;本篇文章主要有两个内容-1-正确认识全屏分割线的设置-2-去除没有数据的Cell或者指定Cell的分割线&quot;&gt;&lt;a href=&quot;#本篇文章主要有两个内容-1-正确认识全屏分割线的设置-2-去除没有数据的Cell或者指定Cell的分割线&quot; class=&quot;he
      
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOSDevelopment/"/>
    
      <category term="原生应用" scheme="http://yoursite.com/categories/iOSDevelopment/Native/"/>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>总结-layoutSubview的调用场景</title>
    <link href="http://yoursite.com/2016/04/15/%E6%80%BB%E7%BB%93-layoutSubview%E7%9A%84%E8%B0%83%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
    <id>http://yoursite.com/2016/04/15/总结-layoutSubview的调用场景/</id>
    <published>2016-04-15T08:58:00.000Z</published>
    <updated>2018-01-09T03:53:42.000Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><p>首先要起个代号(不然连我自己都会晕+_+)</p><h3 id="视图A-、-被添加到视图A的子视图B"><a href="#视图A-、-被添加到视图A的子视图B" class="headerlink" title="视图A 、 被添加到视图A的子视图B"></a>视图<em>A</em> 、 被添加到视图A的子视图<em>B</em></h3></blockquote><hr><blockquote><ul><li>使用addSubview添加时会调用layoutSubView</li><li>在A开始被添加到父视图  (如果此时A没有frame  则不会调用layoutSubview)</li><li>添加B 到A的时候调用    (如果此时B有frame  则会调用)</li></ul></blockquote><hr><blockquote><ul><li>设置A的父视图的<em>Size</em>时会调用</li><li>设置A的<em>Size</em>时会进行智能判断–&gt;仅当 Size与之前不同时，才会调用A的layoutSubview</li><li>设置B的<em>frame</em>时会调用<br>(如果仅仅设置frame 但是没有调用过addSubview添加到父控件上 那么也不会调用layoutSubview )</li></ul></blockquote><hr><blockquote><ul><li>滚动scrollview 的时候也会调用</li><li>设备的orientation(方向)改变时,涉及改变的UIViewControl 的root view<br>(此时所有的控件被重新布局,相当于A的frame被改变  那么会调用layoutSubview  而且如果控件有B的话会再调用一次layoutSubview)</li><li>Resizing(拉伸) 一个 控件 也会调用它的父控件的layoutSubview</li><li>调用setNeedsLayout时</li></ul></blockquote><hr><h6 id="还有一个重要的点-layoutSubview不是在调用完比如addSubview等方法之后就马上调用-而是会在调用addSubview方法所在的作用域结束之后之后才调用-因此即使你在同一个方法中既使用了addSubViews又更改了frame，也是只会调用一次layoutSubview而已"><a href="#还有一个重要的点-layoutSubview不是在调用完比如addSubview等方法之后就马上调用-而是会在调用addSubview方法所在的作用域结束之后之后才调用-因此即使你在同一个方法中既使用了addSubViews又更改了frame，也是只会调用一次layoutSubview而已" class="headerlink" title="还有一个重要的点,layoutSubview不是在调用完比如addSubview等方法之后就马上调用,而是会在调用addSubview方法所在的作用域结束之后之后才调用,因此即使你在同一个方法中既使用了addSubViews又更改了frame，也是只会调用一次layoutSubview而已"></a><code>还有一个重要的点,layoutSubview不是在调用完比如addSubview等方法之后就马上调用,而是会在调用addSubview方法所在的作用域结束之后之后才调用,因此即使你在同一个方法中既使用了addSubViews又更改了frame，也是只会调用一次layoutSubview而已</code></h6><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;首先要起个代号(不然连我自己都会晕+_+)&lt;/p&gt;
&lt;h3 id=&quot;视图A-、-被添加到视图A的子视图B&quot;&gt;&lt;a href=&quot;#视图A-、-被添加到视图A的子视图B&quot; class=&quot;headerlink&quot; title=&quot;视图A 、 被添加
      
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOSDevelopment/"/>
    
      <category term="原理分析" scheme="http://yoursite.com/categories/iOSDevelopment/Analysis/"/>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>iOS中常用的数学函数</title>
    <link href="http://yoursite.com/2016/04/12/iOS%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E6%95%B0%E5%AD%A6%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2016/04/12/iOS中常用的数学函数/</id>
    <published>2016-04-12T01:25:00.000Z</published>
    <updated>2018-01-09T03:54:08.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h5 id="每一个函数都有对应计算float-double-long-double-的函数-这里只列出double类型的"><a href="#每一个函数都有对应计算float-double-long-double-的函数-这里只列出double类型的" class="headerlink" title="每一个函数都有对应计算float / double / long double  的函数,这里只列出double类型的"></a>每一个函数都有对应计算float / double / long double  的函数,这里只列出double类型的</h5><table><thead><tr><th style="text-align:left">三角函数</th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:left">double cos(double)</td><td style="text-align:center">余弦</td></tr><tr><td style="text-align:left">double sin(double)</td><td style="text-align:center">正弦</td></tr><tr><td style="text-align:left">double tan(double)</td><td style="text-align:center">正切</td></tr></tbody></table><hr><table><thead><tr><th style="text-align:left">反三角函数</th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:left">double acos(double)</td><td style="text-align:center">反余弦 结果介于[0, PI]</td></tr><tr><td style="text-align:left">double asin(double)</td><td style="text-align:center">反正弦 结果介于[-PI/2, PI/2]</td></tr><tr><td style="text-align:left">double atan(double)</td><td style="text-align:center">反正切 反正切(主值), 结果介于[-PI/2, PI/2]</td></tr><tr><td style="text-align:left">double atan2(double, double)</td><td style="text-align:center">反正切  主要用法–根据给定的两个值求出对应的角度   比如给y和x,就可以求出该点相对（0，0）的角度</td></tr></tbody></table><hr><table><thead><tr><th style="text-align:left">取整</th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:left">double ceil (double)</td><td style="text-align:center">向上取整</td></tr><tr><td style="text-align:left">double floor (double)</td><td style="text-align:center">向下取整</td></tr><tr><td style="text-align:left">double fmod (double, double)</td><td style="text-align:center">返回两参数相除的余数</td></tr></tbody></table><hr><table><thead><tr><th style="text-align:left">指数与对数</th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:left">double fabs(double)</td><td style="text-align:center">求绝对值</td></tr><tr><td style="text-align:left">double sqrt(double)</td><td style="text-align:center">开方</td></tr><tr><td style="text-align:left">double exp(double)</td><td style="text-align:center">求取自然数e的幂</td></tr><tr><td style="text-align:left">double log (double)</td><td style="text-align:center">以e为底的对数</td></tr><tr><td style="text-align:left">double log10 (double)</td><td style="text-align:center">以10为底的对数</td></tr><tr><td style="text-align:left">double pow(double x, double y）</td><td style="text-align:center">计算以x为底数的y次幂</td></tr></tbody></table><hr><table><thead><tr><th style="text-align:left">其他</th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:left">double hypot(double x, double y)</td><td style="text-align:center">已知直角三角形两个直角边长度，求斜边长度</td></tr><tr><td style="text-align:left">double ldexp(double x, int exponent)</td><td style="text-align:center">计算x*(2的exponent次幂)</td></tr></tbody></table><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h5 id=&quot;每一个函数都有对应计算float-double-long-double-的函数-这里只列出double类型的&quot;&gt;&lt;a href=&quot;#每一个函数都有对应计算float-double-long-double-的函数-这里只列出double类型的&quot; class
      
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOSDevelopment/"/>
    
      <category term="项目/日常问题" scheme="http://yoursite.com/categories/iOSDevelopment/Project-daily/"/>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>整理一下OC中的那些属性修饰符</title>
    <link href="http://yoursite.com/2016/04/11/%E6%95%B4%E7%90%86%E4%B8%80%E4%B8%8BOC%E4%B8%AD%E7%9A%84%E9%82%A3%E4%BA%9B%E5%B1%9E%E6%80%A7%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
    <id>http://yoursite.com/2016/04/11/整理一下OC中的那些属性修饰符/</id>
    <published>2016-04-11T15:21:00.000Z</published>
    <updated>2018-01-09T13:11:40.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="首先从简单到复杂大致分个类"><a href="#首先从简单到复杂大致分个类" class="headerlink" title="首先从简单到复杂大致分个类"></a>首先从简单到复杂大致分个类</h2><h6 id="1-自定义getter-setter方法名修饰符-getter和setter"><a href="#1-自定义getter-setter方法名修饰符-getter和setter" class="headerlink" title="1. 自定义getter | setter方法名修饰符 : getter和setter"></a>1. 自定义getter | setter方法名修饰符 : getter和setter</h6><h6 id="2-原子性修饰符-atomic-nonatomic"><a href="#2-原子性修饰符-atomic-nonatomic" class="headerlink" title="2. 原子性修饰符:atomic | nonatomic"></a>2. 原子性修饰符:atomic | nonatomic</h6><h6 id="3-读写性修饰符：readwrite-readonly"><a href="#3-读写性修饰符：readwrite-readonly" class="headerlink" title="3. 读写性修饰符：readwrite | readonly"></a>3. 读写性修饰符：readwrite | readonly</h6><h6 id="4-setter相关修饰符：assign-retain-copy"><a href="#4-setter相关修饰符：assign-retain-copy" class="headerlink" title="4. setter相关修饰符：assign | retain | copy"></a>4. setter相关修饰符：assign | retain | copy</h6><hr><blockquote><h4 id="方法名修饰符"><a href="#方法名修饰符" class="headerlink" title="方法名修饰符"></a>方法名修饰符</h4><p>• getter=<getmethodname>,setter=<setmethodname>:指定该属性所使用的getter和setter方法的名称</setmethodname></getmethodname></p><hr><p>两个属性修饰符用于设置自定义生成的getter和setter方法名，使用之后将不再使用系统默认的setter和getter方法名</p><p>• 用得不是很多，使用场景一般是对BOOL属性设置该getter方法，比如   isGood 这样用以方便判断时使用</p><p><img src="http://www.z4a.net/images/2018/01/09/property_1.png" alt="property_1.png"></p></blockquote><hr><blockquote><h4 id="原子修饰符"><a href="#原子修饰符" class="headerlink" title="原子修饰符"></a>原子修饰符</h4><p>•<strong>atomic  :  原子属性,为setter方法加锁  (默认) (类似多线程中的互斥锁)</strong></p><p> <code>§ 线程安全,但需要消耗大量资源</code></p><p>• <strong>nonatomic  :  非原子属性,不为setter方法加锁</strong></p><p><code>§ 非线程安全,适合内存小的移动设备</code></p></blockquote><hr><blockquote><h4 id="读写性修饰符"><a href="#读写性修饰符" class="headerlink" title="读写性修饰符"></a>读写性修饰符</h4><p>• <strong>readwrite:表明这个属性是可读可写的，系统为我们生成这个属性的setter和getter方法以及下划线开头的成员变量。</strong><br>•<strong>readonly:表明这个属性只能读不能写，系统只为我们生成一个getter方法下划线开头的成员变量，不会创建setter方法</strong></p></blockquote><hr><h4 id="注意"><a href="#注意" class="headerlink" title="注意!"></a><strong><em>注意!</em></strong></h4><p> <strong>用readwrite自动生成setter和getter方法以及下划线开头的成员变量的时候，如果手动实现了setter和getter方法，那么系统将不会生成下划线开头成员变量</strong></p><p><img src="http://www.z4a.net/images/2018/01/09/property_2.png" alt="property_2.png"><br><img src="http://www.z4a.net/images/2018/01/09/property_3.png" alt="property_3.png"></p><hr><p><strong>同理，readonly自动生成getter 方法和_开头成员变量时，如果手动实现了getter方法，那么系统也不会再生成下划线开头的成员变量</strong></p><p><img src="http://www.z4a.net/images/2018/01/09/property_4.png" alt="property_4.png"><br><img src="http://www.z4a.net/images/2018/01/09/property_5.png" alt="property_5.png"></p><hr><blockquote><h2 id="setter相关修饰符"><a href="#setter相关修饰符" class="headerlink" title="setter相关修饰符"></a>setter相关修饰符</h2><p>•<strong>retain:针对对象类型进行内存管理(非ARC)。当给对象类型使用此修饰符时，setter方法会先将旧的对象属性release掉，再对新的对象进行一次赋值并进行一次retain操作</strong><br>• <strong>assign:表示直接赋值， 基本数据类型、枚举、结构体(非OC对象) class类型</strong><br><code>当一个对象被销毁时，指针不会被清空(所以修饰对象时容易造成坏内存 (非ARC下会用这个修饰对象)</code></p><hr><p>• <strong>copy:以前主要用在NSString类型和Block，建立一个索引计数为1的对象，然后释放旧对象。</strong></p><p>• <strong>strong ：除NSString\block以外(注意!这是以前的说法)的OC对象 , 强引用以保证属性作用域结束后不被销毁</strong></p><p><strong>• weak : 当一个对象被销毁时，指针被清空</strong></p><p><code>一般用在已经添加到父控件中的控件,因为父控件会对子控件进行引用,也就是retain,所以自己的作用域结束之后不会被释放</code></p><p><code>系统默认属性是assign。retain是指针的复制，copy是内容的复制</code></p></blockquote><hr><h3 id="用copy修饰字符串时——-gt"><a href="#用copy修饰字符串时——-gt" class="headerlink" title="用copy修饰字符串时——&gt;"></a>用copy修饰字符串时——&gt;</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在setter方法中会判断 传入的字符串 是否是可变的</span><br><span class="line">如果是可变的就分配新的内存再赋值</span><br><span class="line">如果是不可变的就直接赋值地址</span><br><span class="line">而实际上开发中其实大量使用的是不可变的字符串   所以最好使用 strong 修饰字符串,可以提升性能(减少一次判断)</span><br></pre></td></tr></table></figure><hr><h3 id="用copy修饰Block时—-gt-首先要知道Block在非ARC和ARC下的区别"><a href="#用copy修饰Block时—-gt-首先要知道Block在非ARC和ARC下的区别" class="headerlink" title="用copy修饰Block时—-&gt;首先要知道Block在非ARC和ARC下的区别"></a>用copy修饰Block时—-&gt;首先要知道Block在非ARC和ARC下的区别</h3><p><strong><em>非ARC环境下:</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">block访问外部局部变量,block存放栈里面</span><br><span class="line">只要block访问变量,而且是整个app都存在的变量,那么肯定在全局区</span><br><span class="line">在非ARC中.不能使用retain引用block,因为不会放在堆里面,在非ARC中只能使用copy,才会把block放在堆里面</span><br></pre></td></tr></table></figure><p><strong><em>ARC环境下:</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">只要block访问了外部局部变量,block就会存放到堆里面</span><br><span class="line">可以使用strong去引用  因为本身就已经是存放在堆区了</span><br><span class="line">也可以用copy，但是用stong性能更好</span><br></pre></td></tr></table></figure></p><hr><h4 id="做个小总结-只说ARC环境下的"><a href="#做个小总结-只说ARC环境下的" class="headerlink" title="做个小总结(只说ARC环境下的)"></a>做个小总结(只说ARC环境下的)</h4><p> <strong>用strong修饰OC对象以及NSString和Block , 没添加到父控件上的控件</strong><br> <strong>用weak修饰已经被添加到父控件上的控件 以及 代理对象</strong><br> <strong>用assign基本数据类型、枚举、结构体(非OC对象)   class类型</strong><br> <strong>用copy修饰一种情况下的NSString–&gt;不确定赋值过程中用的是可变还是不可变字符串</strong></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h2 id=&quot;首先从简单到复杂大致分个类&quot;&gt;&lt;a href=&quot;#首先从简单到复杂大致分个类&quot; class=&quot;headerlink&quot; title=&quot;首先从简单到复杂大致分个类&quot;&gt;&lt;/a&gt;首先从简单到复杂大致分个类&lt;/h2&gt;&lt;h6 id=&quot;1-自定义getter-sett
      
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOSDevelopment/"/>
    
      <category term="原理分析" scheme="http://yoursite.com/categories/iOSDevelopment/Analysis/"/>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>在使用TablView时碰到Nan错误</title>
    <link href="http://yoursite.com/2016/04/07/%E5%9C%A8%E4%BD%BF%E7%94%A8TablView%E6%97%B6%E7%A2%B0%E5%88%B0Nan%E9%94%99%E8%AF%AF/"/>
    <id>http://yoursite.com/2016/04/07/在使用TablView时碰到Nan错误/</id>
    <published>2016-04-07T15:14:00.000Z</published>
    <updated>2018-01-09T03:52:40.000Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><p>前几天做项目的时候遇到一个奇葩的问题，程序本来运行得好好的，然后突然就崩了，报了一个Nan错误<br> <figure class="highlight plain"><figcaption><span>Terminating app due to uncaught exception 'CALayerInvalidGeometry', reason: 'CALayer position contains NaN: [187.5 nan]'</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure></p></blockquote><p>后来打了一大堆断点发现数据源方法返回cell高度的时候出现了Nan类型，结合该cell对应的模型才发现是网络数据返回了一个 0 数据，而我把这个数据作为除数来计算了，因此出现了Nan类型。</p><h6 id="这种错误是在float经过函数运行出了不是数字的值，nan的意思就是not-a-number"><a href="#这种错误是在float经过函数运行出了不是数字的值，nan的意思就是not-a-number" class="headerlink" title="这种错误是在float经过函数运行出了不是数字的值，nan的意思就是not a number"></a>这种错误是在float经过函数运行出了不是数字的值，nan的意思就是not a number</h6><hr><p>后来解决了问题再去百度的时候发现出现Nan错误的不止除以0这种情况，还有以下几种(以后要多注意一下)</p><blockquote><p>1.除以0<br>2.sizeWithFont的字符串为nil<br>3.数学函数不正确运算<br>解决方法除了排除数据源以及运算问题之外,还可以用isnan()函数判断是不是Nan类型<br><figure class="highlight plain"><figcaption><span>_x </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (!isnan(_x)) &#123;</span><br><span class="line">return _x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><hr><p><a href="http://www.minroad.com/?p=403" target="_blank" rel="noopener">文中部分内容引自这里</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;前几天做项目的时候遇到一个奇葩的问题，程序本来运行得好好的，然后突然就崩了，报了一个Nan错误&lt;br&gt; &lt;figure class=&quot;highlight plain&quot;&gt;&lt;figcaption&gt;&lt;span&gt;Terminating app d
      
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOSDevelopment/"/>
    
      <category term="项目/日常问题" scheme="http://yoursite.com/categories/iOSDevelopment/Project-daily/"/>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
</feed>
