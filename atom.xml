<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>尛孟の博客</title>
  <icon>https://www.gravatar.com/avatar/3dc82ab4d3d62d142a265730033bc3a4</icon>
  <subtitle>想法总是无法付诸实践…</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-01-08T05:46:52.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>尛孟</name>
    <email>295565453@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>沙盒文件夹的作用和选择</title>
    <link href="http://yoursite.com/2016/04/18/%E6%B2%99%E7%9B%92%E6%96%87%E4%BB%B6%E5%A4%B9%E7%9A%84%E4%BD%9C%E7%94%A8%E5%92%8C%E9%80%89%E6%8B%A9/"/>
    <id>http://yoursite.com/2016/04/18/沙盒文件夹的作用和选择/</id>
    <published>2016-04-18T10:56:00.000Z</published>
    <updated>2018-01-08T05:46:52.000Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><h6 id="沙盒大家都知道，但是平时要存储数据时总不知道存到哪里去才是正确的选择，这次就来聊聊每一个文件夹的作用和使用时该怎么选择"><a href="#沙盒大家都知道，但是平时要存储数据时总不知道存到哪里去才是正确的选择，这次就来聊聊每一个文件夹的作用和使用时该怎么选择" class="headerlink" title="沙盒大家都知道，但是平时要存储数据时总不知道存到哪里去才是正确的选择，这次就来聊聊每一个文件夹的作用和使用时该怎么选择"></a>沙盒大家都知道，但是平时要存储数据时总不知道存到哪里去才是正确的选择，这次就来聊聊每一个文件夹的作用和使用时该怎么选择</h6></blockquote><hr><h6 id="先来了解每一个文件夹的基本作用"><a href="#先来了解每一个文件夹的基本作用" class="headerlink" title="先来了解每一个文件夹的基本作用"></a>先来了解每一个文件夹的基本作用</h6><blockquote><p>   • Documents：保存应用运行时生成的需要持久化的数据，iTunes同步设备时会备份该目录。<br>• tmp：保存应用运行时所需的临时数据，使用完毕后再将相应的文件从该目录删除。应用没有运行时，系统也可能会清除该目录下的文件。iTunes同步设备时不会备份该目录<br>• Library/Caches：保存应用运行时生成的需要持久化的数据，iTunes同步设备时不会备份该目录。一般存储体积大、不需要备份的非重要数据<br>• Library/Preference：保存应用的所有偏好设置，iOS的Settings(设置)应用会在该目录中查找应用的设置信息。iTunes同步设备时会备份该目录</p><h6 id="（看完还是不知道到底存哪里比较好啊喂-╯’-‘-╯︵-┻━┻-）"><a href="#（看完还是不知道到底存哪里比较好啊喂-╯’-‘-╯︵-┻━┻-）" class="headerlink" title="（看完还是不知道到底存哪里比较好啊喂(╯’ - ‘)╯︵ ┻━┻ ）"></a>（看完还是不知道到底存哪里比较好啊喂(╯’ - ‘)╯︵ ┻━┻ ）</h6></blockquote><hr><blockquote><h6 id="–-Documents"><a href="#–-Documents" class="headerlink" title="– Documents"></a>– Documents</h6><p>– 需要保存由”应用程序本身”产生的文件或者数据，例如：游戏进度、涂鸦软件的绘图信息<br>– 目录中的文件会被自动保存在 iClioud<br>– 注意 ： 不要保存从网络上下载的文件，否则会无法上架</p><hr><h6 id="–-Caches"><a href="#–-Caches" class="headerlink" title="– Caches"></a>– Caches</h6><p>– 保存临时文件，”后续需要使用”，例如：缓存图片、离线数据(地图数据等)<br>– 系统不会清零 cache 目录中的文件  –&gt; 因此要求程序开发时，”必须提供 cache 目录的清理解决方案”</p><hr><h6 id="–-Preference"><a href="#–-Preference" class="headerlink" title="– Preference"></a>– Preference</h6><p>– 用户偏好设置，使用 NSUserDefault 直接读写</p><hr><h6 id="–-Tmp"><a href="#–-Tmp" class="headerlink" title="– Tmp"></a>– Tmp</h6><p>– 保存临时文件，”后续不需要使用”<br>– tmp  目录中的文件，系统会自动清零<br>– 重新启动手机时，tmp  目录会被情况<br>– 系统磁盘空间不足时，系统也会自动清理</p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;blockquote&gt;
&lt;h6 id=&quot;沙盒大家都知道，但是平时要存储数据时总不知道存到哪里去才是正确的选择，这次就来聊聊每一个文件夹的作用和使用时该怎么选择&quot;&gt;&lt;a href=&quot;#沙盒大家都知道，但是平时要存储数据时总不知道存到哪里去才是正确的选择，这次就来聊聊每一
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>代理/通知/KVO 的区别</title>
    <link href="http://yoursite.com/2016/04/17/%E4%BB%A3%E7%90%86:%E9%80%9A%E7%9F%A5:KVO%20%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2016/04/17/代理:通知:KVO 的区别/</id>
    <published>2016-04-16T17:15:00.000Z</published>
    <updated>2018-01-08T05:47:46.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h6 id="通知-NSNotification、通知中心-NSNotificationCenter"><a href="#通知-NSNotification、通知中心-NSNotificationCenter" class="headerlink" title="通知 NSNotification、通知中心 NSNotificationCenter"></a>通知 NSNotification、通知中心 NSNotificationCenter</h6><p>◦    任何对象之间都可以传递消息(一般在层级结构比较深又需要传值的情况)</p><ul><li>使用范围<br>▪    1个对象可以发通知给多个对象<br>▪    1个对象可以接受多个对象发出的通知<br>◦    要求:必须得保证通知的名字在发出和监听时是一致的</li></ul><hr><h6 id="KVO"><a href="#KVO" class="headerlink" title="KVO"></a>KVO</h6><p>◦    仅仅是能监听对象属性的改变（灵活度不如通知和代理）</p><hr><h6 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h6><ul><li>使用范围<br>▪    1个对象只能设置一个代理(假设这个对象只有1个代理属性)<br>▪    1个对象能成为多个对象的代理</li></ul><hr><h6 id="如何选择"><a href="#如何选择" class="headerlink" title="如何选择?"></a>如何选择?</h6><p>◦    代理比通知规范，非常适合多人开发以及代码维护<br>◦    如果要通知多个对象,就用通知</p><p>◦    建议使用代理多于通知,能使用代理尽量使用代理<br>◦    当层级结构非常深，难以拿到对应对象时使用通知</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h6 id=&quot;通知-NSNotification、通知中心-NSNotificationCenter&quot;&gt;&lt;a href=&quot;#通知-NSNotification、通知中心-NSNotificationCenter&quot; class=&quot;headerlink&quot; title=&quot;通
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>纠正网上大部分文章对UITableView分割线的不正确认识</title>
    <link href="http://yoursite.com/2016/04/16/%E7%BA%A0%E6%AD%A3%E7%BD%91%E4%B8%8A%E5%A4%A7%E9%83%A8%E5%88%86%E6%96%87%E7%AB%A0%E5%AF%B9UITableView%E5%88%86%E5%89%B2%E7%BA%BF%E7%9A%84%E4%B8%8D%E6%AD%A3%E7%A1%AE%E8%AE%A4%E8%AF%86/"/>
    <id>http://yoursite.com/2016/04/16/纠正网上大部分文章对UITableView分割线的不正确认识/</id>
    <published>2016-04-16T06:04:00.000Z</published>
    <updated>2018-01-08T05:57:49.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h5 id="本篇文章主要有两个内容-1-正确认识全屏分割线的设置-2-去除没有数据的Cell或者指定Cell的分割线"><a href="#本篇文章主要有两个内容-1-正确认识全屏分割线的设置-2-去除没有数据的Cell或者指定Cell的分割线" class="headerlink" title="本篇文章主要有两个内容:1. 正确认识全屏分割线的设置  2. 去除没有数据的Cell或者指定Cell的分割线"></a>本篇文章主要有两个内容:1. 正确认识全屏分割线的设置  2. 去除没有数据的Cell或者指定Cell的分割线</h5><blockquote><p>毕竟这里只是我自己本人的看法和总结  –  有什么建议或者觉得我说得不好的地方，欢迎互相探讨。毕竟探讨越多提升越大~~</p></blockquote><hr><h4 id="—-PART-One—"><a href="#—-PART-One—" class="headerlink" title="—-PART One—-"></a>—-PART One—-</h4><p>首先是我一直觉得很不爽的全屏分割线(为何不爽,看完这一部分大家应该也能理解我的感受)</p><blockquote><h2 id="自定义Cell的情况"><a href="#自定义Cell的情况" class="headerlink" title="自定义Cell的情况"></a>自定义Cell的情况</h2><ul><li>把系统的分割线隐藏,然后自己创建一个高度为1的UIVIew添加到Cell的底部或者顶部</li><li>把系统的分割线隐藏,然后设置tableview的背景色为自己想要的分割线颜色，重写Cell的setFrame方法，把高度减1(需要的话还可以把宽度也减一点点，会有不一样的效果~)</li><li>设置Cell的<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 或者设置tableview的```separatorInset = UIEdgeInsetsZero```、再设置Cell的 ```layoutMargins = UIEdgeInsetsZero</span><br></pre></td></tr></table></figure></li></ul></blockquote><hr><blockquote><h2 id="不自定义Cell的情况"><a href="#不自定义Cell的情况" class="headerlink" title="不自定义Cell的情况"></a>不自定义Cell的情况</h2><ul><li>设置Cell的<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-     或者设置tableview的``` separatorInset = UIEdgeInsetsZero```、再设置Cell的 ```preservesSuperviewLayoutMargins = NO、layoutMargins = UIEdgeInsetsZero</span><br></pre></td></tr></table></figure></li></ul></blockquote><hr><blockquote><p>其实嘛，之所以会有边距都是<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">***</span><br><span class="line">另外一个重要原因是```layoutMargins```这个属性,当你没有设置这个属性的时候，它会默认有```&#123;8,8,8,8&#125;```的偏移量，但是呢，即使你设置了tableview的```layoutMargins=UIEdgeInsetsZero```，你也会发现没用。这是因为另一个属性```preservesSuperviewLayoutMargins```又在作怪，这个属性的意思是保持父控件的layoutMargins属性的行为(大概吧（雾...）)默认是NO。也就是说，Cell本身的layoutMargins还是默认的```&#123;8，8，8，8&#125;```，因此还是有一个单位的偏移。。。但是啊但是(好多但是→_→)即使设置为YES也并没有什么效果，因为呀，Cell的父视图并不是TableView呢...而是一个叫UITableviewWrapperView的</span><br><span class="line">![Snip20160415_5.png](http://upload-images.jianshu.io/upload_images/1635441-5936a708a53b0fed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span><br><span class="line">此外，当你使用系统默认的UITableviewCell类的时候，preservesSuperviewLayoutMargins默认是为YES的，而自定义Cell的时候这个属性会自动置为NO</span><br><span class="line">***</span><br><span class="line">###### 因此，我在这里要重新说明如何自定义TableView全屏的分割线</span><br><span class="line">###### 如果自定义Cell的话只需要设置  tableview 或者 Cell的 ```separatorInset = UIEdgeInsetsZero ```以及Cell的````的layoutMargins =UIEdgeInsetsZero ````这简单的两步就可以了!!!</span><br><span class="line">###### 如果使用系统的是UITableviewCell类的话就再多加上```preservesSuperviewLayoutMargins = NO```这句就可以了</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">#### ----PART Two----</span><br><span class="line">去除没有数据的Cell或者指定Cell的分割线</span><br><span class="line">&gt;   •     想要去除没有数据的Cell的分割线的话非常简单，只需要设置tableviewFootView为一个空的View,那么下面没有数据的Cell的就不会显示了</span><br><span class="line">![Snip20160414_4.png](http://upload-images.jianshu.io/upload_images/1635441-75b1078c45e7860a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">&gt; •    另外一个是因为前几天刚好遇见个需求，就是要去除指定的某一个Cell的分割线。那我们其实就可以利用```separatorInset```来完成这个需求</span><br><span class="line">只需要把分割线移除屏幕外或者把它压缩为0像素就可以了</span><br><span class="line">![Snip20160416_6.png](http://upload-images.jianshu.io/upload_images/1635441-c2e93e9cbeadf23b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span><br><span class="line">效果很容易就达到了~~</span><br><span class="line">![Snip20160414_6.png](http://upload-images.jianshu.io/upload_images/1635441-6b3069417cf0c790.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">###### 最后说几句---```关于preservesSuperviewLayoutMargins属性还是无法理解它的作用...看了苹果文档，大概意思是如果设为Yes的话,则父控件内容的左边距会留出一个最小间距出来。虽然我说了Cell的父控件是UITableviewWrapperView，而且在CellForRow数据源方法中也拿不到它(因为Cell要在该方法返回后才被系统使用并添加到父控件上)，但是即使我在其他能拿到的地方拿到它了，并且设置了它的```layoutMargins =UIEdgeInsetsZero和Cell的preservesSuperviewLayoutMargins = YES```，可惜却也完全没有效果...如果大家有什么见解希望能告知一声~~~</span><br></pre></td></tr></table></figure></p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1635441-e44faa52b4bb526a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Snip20160416_8.png"></p><hr><blockquote><h3 id="至此，我的个人见解说完了，谢谢大家的阅读"><a href="#至此，我的个人见解说完了，谢谢大家的阅读" class="headerlink" title="至此，我的个人见解说完了，谢谢大家的阅读~~~"></a>至此，我的个人见解说完了，谢谢大家的阅读~~~</h3></blockquote><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h5 id=&quot;本篇文章主要有两个内容-1-正确认识全屏分割线的设置-2-去除没有数据的Cell或者指定Cell的分割线&quot;&gt;&lt;a href=&quot;#本篇文章主要有两个内容-1-正确认识全屏分割线的设置-2-去除没有数据的Cell或者指定Cell的分割线&quot; class=&quot;he
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>总结-layoutSubview的调用场景</title>
    <link href="http://yoursite.com/2016/04/15/%E6%80%BB%E7%BB%93-layoutSubview%E7%9A%84%E8%B0%83%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
    <id>http://yoursite.com/2016/04/15/总结-layoutSubview的调用场景/</id>
    <published>2016-04-15T08:58:00.000Z</published>
    <updated>2018-01-08T05:45:05.000Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><p>首先要起个代号(不然连我自己都会晕+_+)</p><h3 id="视图A-、-被添加到视图A的子视图B"><a href="#视图A-、-被添加到视图A的子视图B" class="headerlink" title="视图A 、 被添加到视图A的子视图B"></a>视图<em>A</em> 、 被添加到视图A的子视图<em>B</em></h3></blockquote><hr><blockquote><ul><li>使用addSubview添加时会调用layoutSubView</li><li>在A开始被添加到父视图  (如果此时A没有frame  则不会调用layoutSubview)</li><li>添加B 到A的时候调用    (如果此时B有frame  则会调用)</li></ul></blockquote><hr><blockquote><ul><li>设置A的父视图的<em>Size</em>时会调用</li><li>设置A的<em>Size</em>时会进行智能判断–&gt;仅当 Size与之前不同时，才会调用A的layoutSubview</li><li>设置B的<em>frame</em>时会调用<br>(如果仅仅设置frame 但是没有调用过addSubview添加到父控件上 那么也不会调用layoutSubview )</li></ul></blockquote><hr><blockquote><ul><li>滚动scrollview 的时候也会调用</li><li>设备的orientation(方向)改变时,涉及改变的UIViewControl 的root view<br>(此时所有的控件被重新布局,相当于A的frame被改变  那么会调用layoutSubview  而且如果控件有B的话会再调用一次layoutSubview)</li><li>Resizing(拉伸) 一个 控件 也会调用它的父控件的layoutSubview</li><li>调用setNeedsLayout时</li></ul></blockquote><hr><h6 id="还有一个重要的点-layoutSubview不是在调用完比如addSubview等方法之后就马上调用-而是会在调用addSubview方法所在的作用域结束之后之后才调用-因此即使你在同一个方法中既使用了addSubViews又更改了frame，也是只会调用一次layoutSubview而已"><a href="#还有一个重要的点-layoutSubview不是在调用完比如addSubview等方法之后就马上调用-而是会在调用addSubview方法所在的作用域结束之后之后才调用-因此即使你在同一个方法中既使用了addSubViews又更改了frame，也是只会调用一次layoutSubview而已" class="headerlink" title="还有一个重要的点,layoutSubview不是在调用完比如addSubview等方法之后就马上调用,而是会在调用addSubview方法所在的作用域结束之后之后才调用,因此即使你在同一个方法中既使用了addSubViews又更改了frame，也是只会调用一次layoutSubview而已"></a><code>还有一个重要的点,layoutSubview不是在调用完比如addSubview等方法之后就马上调用,而是会在调用addSubview方法所在的作用域结束之后之后才调用,因此即使你在同一个方法中既使用了addSubViews又更改了frame，也是只会调用一次layoutSubview而已</code></h6><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;首先要起个代号(不然连我自己都会晕+_+)&lt;/p&gt;
&lt;h3 id=&quot;视图A-、-被添加到视图A的子视图B&quot;&gt;&lt;a href=&quot;#视图A-、-被添加到视图A的子视图B&quot; class=&quot;headerlink&quot; title=&quot;视图A 、 被添加
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS中常用的数学函数</title>
    <link href="http://yoursite.com/2016/04/12/iOS%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E6%95%B0%E5%AD%A6%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2016/04/12/iOS中常用的数学函数/</id>
    <published>2016-04-12T01:25:00.000Z</published>
    <updated>2018-01-08T05:44:10.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h5 id="每一个函数都有对应计算float-double-long-double-的函数-这里只列出double类型的"><a href="#每一个函数都有对应计算float-double-long-double-的函数-这里只列出double类型的" class="headerlink" title="每一个函数都有对应计算float / double / long double  的函数,这里只列出double类型的"></a>每一个函数都有对应计算float / double / long double  的函数,这里只列出double类型的</h5><table><thead><tr><th style="text-align:left">三角函数</th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:left">double cos(double)</td><td style="text-align:center">余弦</td></tr><tr><td style="text-align:left">double sin(double)</td><td style="text-align:center">正弦</td></tr><tr><td style="text-align:left">double tan(double)</td><td style="text-align:center">正切</td></tr></tbody></table><hr><table><thead><tr><th style="text-align:left">反三角函数</th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:left">double acos(double)</td><td style="text-align:center">反余弦 结果介于[0, PI]</td></tr><tr><td style="text-align:left">double asin(double)</td><td style="text-align:center">反正弦 结果介于[-PI/2, PI/2]</td></tr><tr><td style="text-align:left">double atan(double)</td><td style="text-align:center">反正切 反正切(主值), 结果介于[-PI/2, PI/2]</td></tr><tr><td style="text-align:left">double atan2(double, double)</td><td style="text-align:center">反正切  主要用法–根据给定的两个值求出对应的角度   比如给y和x,就可以求出该点相对（0，0）的角度</td></tr></tbody></table><hr><table><thead><tr><th style="text-align:left">取整</th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:left">double ceil (double)</td><td style="text-align:center">向上取整</td></tr><tr><td style="text-align:left">double floor (double)</td><td style="text-align:center">向下取整</td></tr><tr><td style="text-align:left">double fmod (double, double)</td><td style="text-align:center">返回两参数相除的余数</td></tr></tbody></table><hr><table><thead><tr><th style="text-align:left">指数与对数</th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:left">double fabs(double)</td><td style="text-align:center">求绝对值</td></tr><tr><td style="text-align:left">double sqrt(double)</td><td style="text-align:center">开方</td></tr><tr><td style="text-align:left">double exp(double)</td><td style="text-align:center">求取自然数e的幂</td></tr><tr><td style="text-align:left">double log (double)</td><td style="text-align:center">以e为底的对数</td></tr><tr><td style="text-align:left">double log10 (double)</td><td style="text-align:center">以10为底的对数</td></tr><tr><td style="text-align:left">double pow(double x, double y）</td><td style="text-align:center">计算以x为底数的y次幂</td></tr></tbody></table><hr><table><thead><tr><th style="text-align:left">其他</th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:left">double hypot(double x, double y)</td><td style="text-align:center">已知直角三角形两个直角边长度，求斜边长度</td></tr><tr><td style="text-align:left">double ldexp(double x, int exponent)</td><td style="text-align:center">计算x*(2的exponent次幂)</td></tr></tbody></table><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h5 id=&quot;每一个函数都有对应计算float-double-long-double-的函数-这里只列出double类型的&quot;&gt;&lt;a href=&quot;#每一个函数都有对应计算float-double-long-double-的函数-这里只列出double类型的&quot; class
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>整理一下OC中的那些属性修饰符</title>
    <link href="http://yoursite.com/2016/04/11/%E6%95%B4%E7%90%86%E4%B8%80%E4%B8%8BOC%E4%B8%AD%E7%9A%84%E9%82%A3%E4%BA%9B%E5%B1%9E%E6%80%A7%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
    <id>http://yoursite.com/2016/04/11/整理一下OC中的那些属性修饰符/</id>
    <published>2016-04-11T15:21:00.000Z</published>
    <updated>2018-01-08T06:03:41.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="首先从简单到复杂大致分个类"><a href="#首先从简单到复杂大致分个类" class="headerlink" title="首先从简单到复杂大致分个类"></a>首先从简单到复杂大致分个类</h2><h6 id="1-自定义getter-setter方法名修饰符-getter和setter"><a href="#1-自定义getter-setter方法名修饰符-getter和setter" class="headerlink" title="1. 自定义getter | setter方法名修饰符 : getter和setter"></a>1. 自定义getter | setter方法名修饰符 : getter和setter</h6><h6 id="2-原子性修饰符-atomic-nonatomic"><a href="#2-原子性修饰符-atomic-nonatomic" class="headerlink" title="2. 原子性修饰符:atomic | nonatomic"></a>2. 原子性修饰符:atomic | nonatomic</h6><h6 id="3-读写性修饰符：readwrite-readonly"><a href="#3-读写性修饰符：readwrite-readonly" class="headerlink" title="3. 读写性修饰符：readwrite | readonly"></a>3. 读写性修饰符：readwrite | readonly</h6><h6 id="4-setter相关修饰符：assign-retain-copy"><a href="#4-setter相关修饰符：assign-retain-copy" class="headerlink" title="4. setter相关修饰符：assign | retain | copy"></a>4. setter相关修饰符：assign | retain | copy</h6><hr><blockquote><h4 id="方法名修饰符"><a href="#方法名修饰符" class="headerlink" title="方法名修饰符"></a>方法名修饰符</h4><p>• getter=<getmethodname>,setter=<setmethodname>:指定该属性所使用的getter和setter方法的名称</setmethodname></getmethodname></p><hr><p>这两个属性修饰符用于设置自定义生成的getter和setter方法名，使用之后将不再使用系统默认的setter和getter方法名<br>• 用得不是很多，使用场景一般是对BOOL属性设置该getter方法，比如   isGood 这样用以方便判断时使用<br><img src="http://upload-images.jianshu.io/upload_images/1635441-e32c10016f1bcc5f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Snip20160411_11.png"></p></blockquote><hr><blockquote><h4 id="原子修饰符"><a href="#原子修饰符" class="headerlink" title="原子修饰符"></a>原子修饰符</h4><p>• atomic  :  原子属性,为setter方法加锁  (默认) (类似多线程中的互斥锁)<br>§ 线程安全,但需要消耗大量资源<br>• nonatomic  :  非原子属性,不为setter方法加锁<br>§ 非线程安全,适合内存小的移动设备</p></blockquote><hr><blockquote><h4 id="读写性修饰符"><a href="#读写性修饰符" class="headerlink" title="读写性修饰符"></a>读写性修饰符</h4><p>• readwrite:表明这个属性是可读可写的，系统为我们生成这个属性的setter和getter方法以及下划线开头的成员变量。<br>• readonly:表明这个属性只能读不能写，系统只为我们生成一个getter方法下划线开头的成员变量，不会创建setter方法</p><hr><h4 id="注意"><a href="#注意" class="headerlink" title="注意!"></a>注意!</h4><h6 id=""><a href="#" class="headerlink" title=""></a><figure class="highlight plain"><figcaption><span>用readwrite自动生成setter和getter方法以及下划线开头的成员变量的时候，如果手动实现了setter和getter方法，那么系统将不会生成下划线开头成员变量```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">![Snip20160411_16.png](http://upload-images.jianshu.io/upload_images/1635441-ed7e0ee1efc0fc53.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span><br><span class="line">![Snip20160411_17.png](http://upload-images.jianshu.io/upload_images/1635441-1a93659e77ca2568.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span><br><span class="line">***</span><br><span class="line"> ###### ```• 同理，readonly自动生成getter 方法和_开头成员变量时，如果手动实现了getter方法，那么系统也不会再生成下划线开头的成员变量</span><br></pre></td></tr></table></figure></h6></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1635441-56af414fdfa50762.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Snip20160411_18.png"><br><img src="http://upload-images.jianshu.io/upload_images/1635441-d530c782a0075f82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Snip20160411_19.png"></p><hr><blockquote><p>##setter相关修饰符<br>• retain:针对对象类型进行内存管理(非ARC)。当给对象类型使用此修饰符时，setter方法会先将旧的对象属性release掉，再对新的对象进行一次赋值并进行一次retain操作<br>• assign:表示直接赋值， 基本数据类型、枚举、结构体(非OC对象) class类型<br>当一个对象被销毁时，指针不会被清空(所以修饰对象时容易造成坏内存 (非ARC下会用这个修饰对象)</p><hr><p>• copy:以前主要用在NSString类型和Block，建立一个索引计数为1的对象，然后释放旧对象。<br>• strong ：除NSString\block以外(注意!这是以前的说法)的OC对象 , 强引用以保证属性作用域结束后不被销毁<br>• weak : 当一个对象被销毁时，指针被清空<br>一般用在已经添加到父控件中的控件,因为父控件会对子控件进行引用,也就是retain,所以自己的作用域结束之后不会被释放<br>系统默认属性是assign。retain是指针的复制，copy是内容的复制</p><hr><h5 id="用copy修饰字符串时—-gt-gt"><a href="#用copy修饰字符串时—-gt-gt" class="headerlink" title="用copy修饰字符串时—-&gt;&gt;"></a>用copy修饰字符串时—-&gt;&gt;</h5><p>在setter方法中会判断 传入的字符串 是否是可变的<br>如果是可变的就分配新的内存再赋值<br>如果是不可变的就直接赋值地址<br>而实际上开发中其实大量使用的是不可变的字符串   所以最好使用 strong 修饰字符串,可以提升性能(减少一次判断)</p><hr><h5 id="用copy修饰Block时—-gt-首先要知道Block在非ARC和ARC下的区别"><a href="#用copy修饰Block时—-gt-首先要知道Block在非ARC和ARC下的区别" class="headerlink" title="用copy修饰Block时—-&gt;首先要知道Block在非ARC和ARC下的区别"></a>用copy修饰Block时—-&gt;首先要知道Block在非ARC和ARC下的区别</h5><h6 id="非ARC环境下"><a href="#非ARC环境下" class="headerlink" title="非ARC环境下:"></a>非ARC环境下:</h6><p>block访问外部局部变量,block存放栈里面<br>只要block访问变量,而且是整个app都存在的变量,那么肯定在全局区<br>在非ARC中.不能使用retain引用block,因为不会放在堆里面,在非ARC中只能使用copy,才会把block放在堆里面</p><h6 id="ARC环境下"><a href="#ARC环境下" class="headerlink" title="ARC环境下:"></a>ARC环境下:</h6><p>只要block访问了外部局部变量,block就会存放到堆里面<br>可以使用strong去引用  因为本身就已经是存放在堆区了<br>也可以用copy，但是用stong性能更好</p></blockquote><hr><h4 id="做个小总结-只说ARC环境下的"><a href="#做个小总结-只说ARC环境下的" class="headerlink" title="做个小总结(只说ARC环境下的)"></a>做个小总结(只说ARC环境下的)</h4> <figure class="highlight plain"><figcaption><span>, 没添加到父控件上的控件```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">```用weak修饰已经被添加到父控件上的控件 以及 代理对象</span><br></pre></td></tr></table></figure> <figure class="highlight plain"><figcaption><span>class类型   ```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">```用copy修饰一种情况下的NSString--&gt;不确定赋值过程中用的是可变还是不可变字符串</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h2 id=&quot;首先从简单到复杂大致分个类&quot;&gt;&lt;a href=&quot;#首先从简单到复杂大致分个类&quot; class=&quot;headerlink&quot; title=&quot;首先从简单到复杂大致分个类&quot;&gt;&lt;/a&gt;首先从简单到复杂大致分个类&lt;/h2&gt;&lt;h6 id=&quot;1-自定义getter-sett
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>在使用TablView时碰到Nan错误</title>
    <link href="http://yoursite.com/2016/04/07/%E5%9C%A8%E4%BD%BF%E7%94%A8TablView%E6%97%B6%E7%A2%B0%E5%88%B0Nan%E9%94%99%E8%AF%AF/"/>
    <id>http://yoursite.com/2016/04/07/在使用TablView时碰到Nan错误/</id>
    <published>2016-04-07T15:14:00.000Z</published>
    <updated>2018-01-08T05:49:48.000Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><p>前几天做项目的时候遇到一个奇葩的问题，程序本来运行得好好的，然后突然就崩了，报了一个Nan错误<br> <figure class="highlight plain"><figcaption><span>Terminating app due to uncaught exception 'CALayerInvalidGeometry', reason: 'CALayer position contains NaN: [187.5 nan]'</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure></p></blockquote><p>后来打了一大堆断点发现数据源方法返回cell高度的时候出现了Nan类型，结合该cell对应的模型才发现是网络数据返回了一个 0 数据，而我把这个数据作为除数来计算了，因此出现了Nan类型。</p><h6 id="这种错误是在float经过函数运行出了不是数字的值，nan的意思就是not-a-number"><a href="#这种错误是在float经过函数运行出了不是数字的值，nan的意思就是not-a-number" class="headerlink" title="这种错误是在float经过函数运行出了不是数字的值，nan的意思就是not a number"></a>这种错误是在float经过函数运行出了不是数字的值，nan的意思就是not a number</h6><hr><p>后来解决了问题再去百度的时候发现出现Nan错误的不止除以0这种情况，还有以下几种(以后要多注意一下)</p><blockquote><p>1.除以0<br>2.sizeWithFont的字符串为nil<br>3.数学函数不正确运算<br>解决方法除了排除数据源以及运算问题之外,还可以用isnan()函数判断是不是Nan类型<br><figure class="highlight plain"><figcaption><span>_x </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (!isnan(_x)) &#123;</span><br><span class="line">return _x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><hr><p><a href="http://www.minroad.com/?p=403" target="_blank" rel="noopener">文中部分内容引自这里</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;前几天做项目的时候遇到一个奇葩的问题，程序本来运行得好好的，然后突然就崩了，报了一个Nan错误&lt;br&gt; &lt;figure class=&quot;highlight plain&quot;&gt;&lt;figcaption&gt;&lt;span&gt;Terminating app d
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>关于模拟器上键盘输入的一些小问题</title>
    <link href="http://yoursite.com/2016/04/04/%E5%85%B3%E4%BA%8E%E6%A8%A1%E6%8B%9F%E5%99%A8%E4%B8%8A%E9%94%AE%E7%9B%98%E8%BE%93%E5%85%A5%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2016/04/04/关于模拟器上键盘输入的一些小问题/</id>
    <published>2016-04-04T04:38:00.000Z</published>
    <updated>2018-01-08T06:42:53.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="平时用模拟器键盘输入的时候总会有一大堆令人无语的自动联想、纠错、拼写检查…不胜其烦！本来一直以为是输入法的问题，后来才发现原来是苹果做的小优化……"><a href="#平时用模拟器键盘输入的时候总会有一大堆令人无语的自动联想、纠错、拼写检查…不胜其烦！本来一直以为是输入法的问题，后来才发现原来是苹果做的小优化……" class="headerlink" title="平时用模拟器键盘输入的时候总会有一大堆令人无语的自动联想、纠错、拼写检查…不胜其烦！本来一直以为是输入法的问题，后来才发现原来是苹果做的小优化……"></a>平时用模拟器键盘输入的时候总会有一大堆令人无语的自动联想、纠错、拼写检查…不胜其烦！本来一直以为是输入法的问题，后来才发现原来是苹果做的小优化……</h5><hr><h6 id="不知道大家平时在做测试的时候有没有经常遇到下面的这些这种情况呢"><a href="#不知道大家平时在做测试的时候有没有经常遇到下面的这些这种情况呢" class="headerlink" title="不知道大家平时在做测试的时候有没有经常遇到下面的这些这种情况呢~~"></a>不知道大家平时在做测试的时候有没有经常遇到下面的这些这种情况呢~~</h6><hr><blockquote><p><img src="http://i4.bvimg.com/627154/261a66f3ac460464.jpg" alt="keyboard_1.jpg"><br>没错就是它，有时候做登录界面测试是时老是弹出来，输完自己正确的账号或密码之后以为可以了结果它一个回马枪”帮”你把错误”修正”了，我还要重新输一遍还要小心翼翼地点那个小叉叉,妈的智障！</p><blockquote><h6 id="property-nonatomic-UITextAutocorrectionType-autocorrectionType"><a href="#property-nonatomic-UITextAutocorrectionType-autocorrectionType" class="headerlink" title="@property(nonatomic) UITextAutocorrectionType autocorrectionType;"></a>@property(nonatomic) UITextAutocorrectionType autocorrectionType;</h6><p>找了半天，原来是这个自动纠错属性在作怪，查看了一下它的枚举值，也就一个默认一个yes一个no，高兴得我立马把它改UITextAutocorrectionTypeNo，结果当然是整个世界都清净啦~~(≧▽≦)/~啦啦啦</p></blockquote></blockquote><hr><blockquote><h6 id="另外，除了上面那个比较坑的之外，还有下面这个"><a href="#另外，除了上面那个比较坑的之外，还有下面这个" class="headerlink" title="另外，除了上面那个比较坑的之外，还有下面这个"></a>另外，除了上面那个比较坑的之外，还有下面这个</h6><p><img src="http://i4.bvimg.com/627154/1cd2ff87191bab41.png" alt="keyboard_2.png"><br>这个自动联想功能嘛，有人喜欢有人嫌…不过有时候真的挺烦它的，联想的东西几乎没卵用，顺手把它干掉吧~</p><blockquote><h6 id="property-nonatomic-UITextAutocapitalizationType-autocapitalizationType"><a href="#property-nonatomic-UITextAutocapitalizationType-autocapitalizationType" class="headerlink" title="@property(nonatomic)UITextAutocapitalizationType autocapitalizationType;"></a>@property(nonatomic)UITextAutocapitalizationType autocapitalizationType;</h6><p>它有四个枚举值<br>UITextAutocapitalizationTypeNone,            不进行联想<br>UITextAutocapitalizationTypeWords,           单词联想<br>UITextAutocapitalizationTypeSentences,     整句联想<br>UITextAutocapitalizationTypeAllCharacters, 所有字节都联想</p></blockquote></blockquote><hr><blockquote><h6 id="然后是在找这些个属性的时候发现的其他属性-感觉挺有用的，这些平时在Storyboard也能见到的，只不过代码似乎用得比较少"><a href="#然后是在找这些个属性的时候发现的其他属性-感觉挺有用的，这些平时在Storyboard也能见到的，只不过代码似乎用得比较少" class="headerlink" title="然后是在找这些个属性的时候发现的其他属性,感觉挺有用的，这些平时在Storyboard也能见到的，只不过代码似乎用得比较少~~"></a>然后是在找这些个属性的时候发现的其他属性,感觉挺有用的，这些平时在Storyboard也能见到的，只不过代码似乎用得比较少~~</h6><blockquote><h6 id="property-nonatomic-UITextSpellCheckingType-spellCheckingType"><a href="#property-nonatomic-UITextSpellCheckingType-spellCheckingType" class="headerlink" title="@property(nonatomic) UITextSpellCheckingType spellCheckingType"></a>@property(nonatomic) UITextSpellCheckingType spellCheckingType</h6><p>自动拼写检查，好像平时没怎么见它发挥作用…</p></blockquote><hr><blockquote><h6 id="property-nonatomic-UIKeyboardAppearance-keyboardAppearance"><a href="#property-nonatomic-UIKeyboardAppearance-keyboardAppearance" class="headerlink" title="@property(nonatomic) UIKeyboardAppearance keyboardAppearance;"></a>@property(nonatomic) UIKeyboardAppearance keyboardAppearance;</h6><p>键盘外观？？？其实也就一个日用一个夜用~~</p></blockquote><hr><blockquote><h6 id="property-nonatomic-BOOL-enablesReturnKeyAutomatically"><a href="#property-nonatomic-BOOL-enablesReturnKeyAutomatically" class="headerlink" title="@property(nonatomic) BOOL enablesReturnKeyAutomatically;"></a>@property(nonatomic) BOOL enablesReturnKeyAutomatically;</h6><p>以前我一直以为这个Return按钮的disable状态要自己控制，今天才发现原来苹果已经做好了,只要输入内容长度为0按钮就不可用…</p></blockquote><hr><blockquote><h6 id="property-nonatomic-getter-isSecureTextEntry-BOOL-secureTextEntry"><a href="#property-nonatomic-getter-isSecureTextEntry-BOOL-secureTextEntry" class="headerlink" title="@property(nonatomic,getter=isSecureTextEntry) BOOL secureTextEntry;"></a>@property(nonatomic,getter=isSecureTextEntry) BOOL secureTextEntry;</h6><p>安全输入，也就是暗文,做密码输入用的</p></blockquote><hr><blockquote><h6 id="property-nonatomic-UIKeyboardType-keyboardType"><a href="#property-nonatomic-UIKeyboardType-keyboardType" class="headerlink" title="@property(nonatomic) UIKeyboardType keyboardType;"></a>@property(nonatomic) UIKeyboardType keyboardType;</h6><p>键盘类型，自己测试了，但是有一些感觉跟其他的键盘长得一模一样，也不知道区别在哪里，就没有做记录了<br><img src="http://i4.bvimg.com/627154/d88a74a63097bf53.png" alt="keyboard_3.png"></p></blockquote><hr><blockquote><h6 id="property-nonatomic-UIKeyboardType-keyboardType-1"><a href="#property-nonatomic-UIKeyboardType-keyboardType-1" class="headerlink" title="@property(nonatomic) UIKeyboardType keyboardType;"></a>@property(nonatomic) UIKeyboardType keyboardType;</h6><p>Return按钮的类型，这里列举几个常用的，其他的就自己看吧  ~<br><img src="http://i4.bvimg.com/627154/f4c6027c9add9605.png" alt="keyboard_4.jpg"></p></blockquote></blockquote><hr><h6 id="这些个属性都是定义在UITextInputTraits协议里面的，而且UITextField-和-UITextView-都遵守了，所以都可以使用。不过呢，其实这些在Storyboard里面都可以找得到的…"><a href="#这些个属性都是定义在UITextInputTraits协议里面的，而且UITextField-和-UITextView-都遵守了，所以都可以使用。不过呢，其实这些在Storyboard里面都可以找得到的…" class="headerlink" title="这些个属性都是定义在UITextInputTraits协议里面的，而且UITextField 和 UITextView 都遵守了，所以都可以使用。不过呢，其实这些在Storyboard里面都可以找得到的…"></a>这些个属性都是定义在UITextInputTraits协议里面的，而且UITextField 和 UITextView 都遵守了，所以都可以使用。不过呢，其实这些在Storyboard里面都可以找得到的…</h6><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;平时用模拟器键盘输入的时候总会有一大堆令人无语的自动联想、纠错、拼写检查…不胜其烦！本来一直以为是输入法的问题，后来才发现原来是苹果做的小优化……&quot;&gt;&lt;a href=&quot;#平时用模拟器键盘输入的时候总会有一大堆令人无语的自动联想、纠错、拼写检查…不胜其烦！本来一直以
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>关于MJRefresh</title>
    <link href="http://yoursite.com/2016/03/30/%E5%85%B3%E4%BA%8EMJRefresh/"/>
    <id>http://yoursite.com/2016/03/30/关于MJRefresh/</id>
    <published>2016-03-30T09:04:00.000Z</published>
    <updated>2018-01-08T05:54:54.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="刚弄清楚MJReFresh每一个类主要的作用，写下来方便以后查看"><a href="#刚弄清楚MJReFresh每一个类主要的作用，写下来方便以后查看" class="headerlink" title="刚弄清楚MJReFresh每一个类主要的作用，写下来方便以后查看"></a>刚弄清楚MJReFresh每一个类主要的作用，写下来方便以后查看</h5><hr><p>• MJRefreshComponent        刷新控件的基类  KVO监听ScrollerView的ContentOffset 和 ContentSize 以及  刷新手势</p><h2 id="•-UIScrollView-MJRefresh-对UIScrollView添加了上拉下拉刷新控件-以及刷新回调Block"><a href="#•-UIScrollView-MJRefresh-对UIScrollView添加了上拉下拉刷新控件-以及刷新回调Block" class="headerlink" title="• UIScrollView+MJRefresh    对UIScrollView添加了上拉下拉刷新控件 以及刷新回调Block"></a>• UIScrollView+MJRefresh    对UIScrollView添加了上拉下拉刷新控件 以及刷新回调Block</h2><p>• MJRefreshHeader 头部刷新控件           自带记录刷新时间<br>    ○ MJRefreshStateHeader                 可以自定义文字<br>        § MJRefreshNormalHeader               可以设置菊花样式</p><pre><code>§ MJRefreshGifHeader                  可自定义刷新控件的动态图片</code></pre><hr><p>• MJRefreshFooter  底部刷新控件            自带记录刷新时间<br>    ○ MJRefreshAutoFooter                    可自定义文字<br>        § MJRefreshAutoStateFooter                可设置底部出现多少时自动刷新<br>            □ MJRefreshAutoNormalFooter              可以自定义文字<br>            □ MJRefreshAutoGifFooter                 可自定义刷新控件的动态图片</p><pre><code>§ MJRefreshBackFooter                  未提供接口,内部实现了刷新后回弹效果    □ MJRefreshBackStateFooter            可以自定义文字        ® MJRefreshBackGifFooter             可自定义刷新控件的动态图片        ® MJRefreshBackNormalFooter          可设置菊花样式</code></pre><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;刚弄清楚MJReFresh每一个类主要的作用，写下来方便以后查看&quot;&gt;&lt;a href=&quot;#刚弄清楚MJReFresh每一个类主要的作用，写下来方便以后查看&quot; class=&quot;headerlink&quot; title=&quot;刚弄清楚MJReFresh每一个类主要的作用，写下来方便
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>协议和代理</title>
    <link href="http://yoursite.com/2016/03/28/%E5%8D%8F%E8%AE%AE%E5%92%8C%E4%BB%A3%E7%90%86/"/>
    <id>http://yoursite.com/2016/03/28/协议和代理/</id>
    <published>2016-03-27T17:09:00.000Z</published>
    <updated>2018-01-08T05:43:35.000Z</updated>
    
    <content type="html"><![CDATA[<hr><p>protocol-<strong>协议</strong>，就是使用了这个协议后就要按照这个协议来办事，协议要求实现的方法就一定要实现。<br>delegate-<strong>委托</strong>，顾名思义就是委托别人办事，就是当一件事情发生后，自己不处理，让别人来处理。</p><hr><p><strong><em>编写规范</em></strong><br>1&gt;一般情况下,当前协议属于谁,我们就将协议定义到谁的头文件中<br>2&gt;协议的名称一般以它属于的那个类的类名开头,后面跟上protocol 或者 delegate<br>3&gt;协议中的方法名称一般以协议的名称protocol之前的作为开头<br>4&gt;一般情况下协议中的方法会将触发该协议的对象传递出去<br>5&gt;一般情况下  类中都会有一个叫delegate  的属性<br>6&gt;当某一个类要成为另外一个类的代理的时候,一般情况下: .h中用@protocol 协议名称;告诉当前类这是一个协议        在.m中用#import  真正的导入一个协议的声明<br>7&gt;协议必须遵守基协议<nsobject></nsobject></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;protocol-&lt;strong&gt;协议&lt;/strong&gt;，就是使用了这个协议后就要按照这个协议来办事，协议要求实现的方法就一定要实现。&lt;br&gt;delegate-&lt;strong&gt;委托&lt;/strong&gt;，顾名思义就是委托别人办事，就是当一件事情发生后，自己不处理，让别
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>UITabBarController</title>
    <link href="http://yoursite.com/2016/03/26/UITabBarController/"/>
    <id>http://yoursite.com/2016/03/26/UITabBarController/</id>
    <published>2016-03-26T07:02:00.000Z</published>
    <updated>2018-01-08T05:58:55.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h5 id="UITabBarController与UINavigationController有些类似又有些区别，因此最好通过两个控制器的对比来了解其结构。"><a href="#UITabBarController与UINavigationController有些类似又有些区别，因此最好通过两个控制器的对比来了解其结构。" class="headerlink" title="UITabBarController与UINavigationController有些类似又有些区别，因此最好通过两个控制器的对比来了解其结构。"></a>UITabBarController与UINavigationController有些类似又有些区别，因此最好通过两个控制器的对比来了解其结构。</h5><hr><h4 id="从共同点看"><a href="#从共同点看" class="headerlink" title="从共同点看"></a>从共同点看</h4><blockquote><ol><li>它们都是通过一个childViewControllers数组来存储子控制器以强引用它们，然后把它们对应的View显示到屏幕上</li><li>UINavigationController有一个NavigationBar始终显示在最前面，<br>UITabBarController也有一个tabBar始终显示在最前面</li></ol></blockquote><hr><h4 id="从不同点看"><a href="#从不同点看" class="headerlink" title="从不同点看"></a>从不同点看</h4><blockquote><h6 id="显示子控制器的View"><a href="#显示子控制器的View" class="headerlink" title="显示子控制器的View"></a>显示子控制器的View</h6><ol><li>UINavigationController只有在需要显示某个控制器的View的时候才会加载该View并且把原本显示的View移除(这里只是移除View，但是控制器并没有移除)</li><li>UITabBarController则是在一开始显示的时候就把所有的View都加载进内存，需要显示某个View的时候就直接拿过来，原本的View也不会被移除</li></ol><hr><h6 id="导航条和标签栏"><a href="#导航条和标签栏" class="headerlink" title="导航条和标签栏"></a>导航条和标签栏</h6><ul><li>导航条的y值是从20开始的, 但内部有一个UIImageView子控件超过导航条高度，因此看到的是64高度，此外 导航条底部还有一个子控件 -&gt; 一根线(一张阴影图片)</li><li>一个导航控制器只有一个NavigationBar也就是所有的子控制器共用同一个导航条，导航条显示的内容和栈顶控制器有关,所以导航条上显示的内容由栈顶控制器控制</li><li>标签栏的高度为49，它的子控件除了与子控制器相对应的UITabBarButton按钮还有 背景UIImageView和分割线UIVIew</li><li>在子控制器中是无法拿到TabBar的,只能拿到UItabBarItem 来设置</li></ul></blockquote><hr><h3 id="暂时了解的也就这些了，以后认识更加深刻再来补上"><a href="#暂时了解的也就这些了，以后认识更加深刻再来补上" class="headerlink" title="暂时了解的也就这些了，以后认识更加深刻再来补上..."></a><code>暂时了解的也就这些了，以后认识更加深刻再来补上...</code></h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h5 id=&quot;UITabBarController与UINavigationController有些类似又有些区别，因此最好通过两个控制器的对比来了解其结构。&quot;&gt;&lt;a href=&quot;#UITabBarController与UINavigationController有些
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>+load和+initialize的区别</title>
    <link href="http://yoursite.com/2016/03/26/+load%E5%92%8C+initialize%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2016/03/26/+load和+initialize的区别/</id>
    <published>2016-03-26T03:24:00.000Z</published>
    <updated>2018-01-08T05:32:55.000Z</updated>
    
    <content type="html"><![CDATA[<hr><p><strong>在不考虑一切继承、分类的最简单最普通的情况下：</strong></p><ul><li>调用时刻:<blockquote><p>load:程序启动时,类被加载进内存就调用<br>initialize:当第一次使用这个类或者其子类就会调用</p></blockquote></li><li>调用次数<blockquote><p>load:因为加载进内存只会加载一次，所以也只会调用一次<br>initialize:不确定,具体根据子类和具体调用情况<br><code>比如有个类,它有一个子类,第一次使用子类时,父类的initialize会被调用2次</code></p></blockquote></li></ul><hr><p><strong>上面说的只是普通情况。但是呢，一个类可能继承于某个super类，还有可能有自己的分类，如果分类中也实现了load方法，它们的调用顺序是怎么样的呢？</strong></p><blockquote><p>这里需要知道—&gt;覆盖方法在分类中的体现<br>如果父类本身中的方法在子类中被重写，则会优先执行子类中的方法<br>如果类本身中的方法在分类中被重写，则会优先执行分类中的方法</p></blockquote><p><strong>但是这里必须要知道一个特例-&gt;+load</strong></p><blockquote><p><code>系统首先会调用 super类的load方法，然后再调用该类自身的load方法，再次才会调用该类的分类重写的load方法，也即是说整个继承链包括分类扩展中的load方法都会被执行，只是执行顺序需要关注一下。</code></p></blockquote><h2 id="也就是说，假如你重写了某个类的load方法，同时又在该类的分类中也重写了load方法，你就会发现这个类的load被调用了两次。"><a href="#也就是说，假如你重写了某个类的load方法，同时又在该类的分类中也重写了load方法，你就会发现这个类的load被调用了两次。" class="headerlink" title="也就是说，假如你重写了某个类的load方法，同时又在该类的分类中也重写了load方法，你就会发现这个类的load被调用了两次。"></a><strong>也就是说，假如你重写了某个类的load方法，同时又在该类的分类中也重写了load方法，你就会发现这个类的load被调用了两次。</strong></h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;&lt;strong&gt;在不考虑一切继承、分类的最简单最普通的情况下：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调用时刻:&lt;blockquote&gt;
&lt;p&gt;load:程序启动时,类被加载进内存就调用&lt;br&gt;initialize:当第一次使用这个类或者其子类就会调用&lt;/p
      
    
    </summary>
    
    
  </entry>
  
</feed>
