<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>尛孟の博客</title>
  <icon>https://www.gravatar.com/avatar/3dc82ab4d3d62d142a265730033bc3a4</icon>
  <subtitle>想法总是无法付诸实践…</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-01-08T05:38:44.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>尛孟</name>
    <email>295565453@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>UITabBarController</title>
    <link href="http://yoursite.com/2016/03/26/UITabBarController/"/>
    <id>http://yoursite.com/2016/03/26/UITabBarController/</id>
    <published>2016-03-26T07:02:00.000Z</published>
    <updated>2018-01-08T05:38:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>UITabBarController也有一个tabBar始终显示在最前面</p><hr><p><strong>从不同点看</strong></p><blockquote><p><strong>显示子控制器的View</strong></p><ol><li>UINavigationController只有在需要显示某个控制器的View的时候才会加载该View并且把原本显示的View移除(这里只是移除View，但是控制器并没有移除)</li><li>UITabBarController则是在一开始显示的时候就把所有的View都加载进内存，需要显示某个View的时候就直接拿过来，原本的View也不会被移除</li></ol><hr><p><strong>导航条和标签栏</strong></p><ul><li>导航条的y值是从20开始的, 但内部有一个UIImageView子控件超过导航条高度，因此看到的是64高度，此外 导航条底部还有一个子控件 -&gt; 一根线(一张阴影图片)</li><li>一个导航控制器只有一个NavigationBar也就是所有的子控制器共用同一个导航条，导航条显示的内容和栈顶控制器有关,所以导航条上显示的内容由栈顶控制器控制</li><li>标签栏的高度为49，它的子控件除了与子控制器相对应的UITabBarButton按钮还有 背景UIImageView和分割线UIVIew</li><li>在子控制器中是无法拿到TabBar的,只能拿到UItabBarItem 来设置</li></ul></blockquote><hr><p><strong><code>暂时了解的也就这些了，以后认识更加深刻再来补上...</code></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;UITabBarController也有一个tabBar始终显示在最前面&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;从不同点看&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;显示子控制器的View&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;UIN
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>+load和+initialize的区别</title>
    <link href="http://yoursite.com/2016/03/26/+load%E5%92%8C+initialize%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2016/03/26/+load和+initialize的区别/</id>
    <published>2016-03-26T03:24:00.000Z</published>
    <updated>2018-01-08T05:32:55.000Z</updated>
    
    <content type="html"><![CDATA[<hr><p><strong>在不考虑一切继承、分类的最简单最普通的情况下：</strong></p><ul><li>调用时刻:<blockquote><p>load:程序启动时,类被加载进内存就调用<br>initialize:当第一次使用这个类或者其子类就会调用</p></blockquote></li><li>调用次数<blockquote><p>load:因为加载进内存只会加载一次，所以也只会调用一次<br>initialize:不确定,具体根据子类和具体调用情况<br><code>比如有个类,它有一个子类,第一次使用子类时,父类的initialize会被调用2次</code></p></blockquote></li></ul><hr><p><strong>上面说的只是普通情况。但是呢，一个类可能继承于某个super类，还有可能有自己的分类，如果分类中也实现了load方法，它们的调用顺序是怎么样的呢？</strong></p><blockquote><p>这里需要知道—&gt;覆盖方法在分类中的体现<br>如果父类本身中的方法在子类中被重写，则会优先执行子类中的方法<br>如果类本身中的方法在分类中被重写，则会优先执行分类中的方法</p></blockquote><p><strong>但是这里必须要知道一个特例-&gt;+load</strong></p><blockquote><p><code>系统首先会调用 super类的load方法，然后再调用该类自身的load方法，再次才会调用该类的分类重写的load方法，也即是说整个继承链包括分类扩展中的load方法都会被执行，只是执行顺序需要关注一下。</code></p></blockquote><h2 id="也就是说，假如你重写了某个类的load方法，同时又在该类的分类中也重写了load方法，你就会发现这个类的load被调用了两次。"><a href="#也就是说，假如你重写了某个类的load方法，同时又在该类的分类中也重写了load方法，你就会发现这个类的load被调用了两次。" class="headerlink" title="也就是说，假如你重写了某个类的load方法，同时又在该类的分类中也重写了load方法，你就会发现这个类的load被调用了两次。"></a><strong>也就是说，假如你重写了某个类的load方法，同时又在该类的分类中也重写了load方法，你就会发现这个类的load被调用了两次。</strong></h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;&lt;strong&gt;在不考虑一切继承、分类的最简单最普通的情况下：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调用时刻:&lt;blockquote&gt;
&lt;p&gt;load:程序启动时,类被加载进内存就调用&lt;br&gt;initialize:当第一次使用这个类或者其子类就会调用&lt;/p
      
    
    </summary>
    
    
  </entry>
  
</feed>
