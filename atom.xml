<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>尛孟的博客</title>
  <icon>https://www.gravatar.com/avatar/3dc82ab4d3d62d142a265730033bc3a4</icon>
  <subtitle>想法总是无法付诸实践…</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-01-10T06:41:50.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>尛孟</name>
    <email>295565453@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NSdate+NSCalendar操作</title>
    <link href="http://yoursite.com/2018/01/10/NSdate+NSCalendar%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2018/01/10/NSdate+NSCalendar操作/</id>
    <published>2018-01-10T06:03:34.000Z</published>
    <updated>2018-01-10T06:41:50.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h3><p>​    由于查询数据库时查询条件需要传递日期来获取某个月份的数据列表,如果传的时该月的某一天会导致拿到数据不全,如果传了该月的第一天会导致拿到的数据并不是当月的;而如果刚好查询当前月份的数据是不能用这个月的最后一天只能用当天来查询,于是有了以下的日历操作~*</p><hr><ul><li>首先,想要直接得到某个日期的NSDate,可以通过dateWithTimeInterval,与某个日期的毫秒差来获取,但是这个方法前提是需要知道基点日期,就算以当前的Date来计算,毫秒的计算也得自己去写清楚;比较麻烦,这时候可以通过<strong>日历对象的NSDateComponents来方便地定制指定日期,以下是两个NSDate分类方法</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">//这个方法可以获取某个与当前NSDate对象指定间隔的日期</span><br><span class="line">//这里传的year.month 等都可以有正负,正数表示该日期之后的,负数表示该日期之前</span><br><span class="line">- (instancetype)getDateFromDateWithYear:(NSInteger)year month:(NSInteger)month day:(NSInteger)day hours:(NSInteger)hour minute:(NSInteger)minute second:(NSInteger)second&#123;</span><br><span class="line">    //创建一个工具，一个封装了具体年月日、时秒分、周、季度等的类</span><br><span class="line">    //    NSDateComponents* dateComponents = [[NSDateComponents alloc]init];</span><br><span class="line">    NSDateComponents* dateComponents;</span><br><span class="line">    //创建一个日历，它提供了大部分的日期计算接口，并且允许在NSDate和NSDateComponents之间转换</span><br><span class="line">    NSCalendar *dateCalendar = [[NSCalendar alloc]initWithCalendarIdentifier:NSCalendarIdentifierGregorian];</span><br><span class="line">  </span><br><span class="line">    // NSDate 转 NSDateComponents所需要设置的值，可根据需要自己设置，这里是年～秒全部获取，如果某个没有写的话，比如NSCalendarUnitHour，转成NSDateComponents后，会是一个很大或很小的数</span><br><span class="line">    NSInteger unitFlags = NSCalendarUnitYear | NSCalendarUnitMonth | NSCalendarUnitWeekday | NSCalendarUnitDay | NSCalendarUnitHour | NSCalendarUnitMinute | NSCalendarUnitSecond;</span><br><span class="line">    </span><br><span class="line">    //为dateComponents获取值，该值等价于self的各个部件</span><br><span class="line">    dateComponents = [dateCalendar components:unitFlags fromDate:self];</span><br><span class="line">    //创建一个NSDateComponents，开始设置想要的时间</span><br><span class="line">    NSDateComponents *myCompoentes = [[NSDateComponents alloc]init];</span><br><span class="line">    [myCompoentes setYear:dateComponents.year + year];</span><br><span class="line">    [myCompoentes setMonth:dateComponents.month + month];</span><br><span class="line">    [myCompoentes setDay:dateComponents.day + day];</span><br><span class="line">    [myCompoentes setHour:dateComponents.hour + hour];</span><br><span class="line">    [myCompoentes setMinute:dateComponents.minute + minute];</span><br><span class="line">    [myCompoentes setSecond:dateComponents.second + second];</span><br><span class="line">    </span><br><span class="line">    //把通过myCompoentes设置的值转为NSDate格式，这个NSDate就是想要的时间</span><br><span class="line">    NSDate *myDate = [dateCalendar dateFromComponents:myCompoentes];</span><br><span class="line">    </span><br><span class="line">    return myDate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//这个方法可以直接更改某个日期的某个组件   参数传-1表示不改变</span><br><span class="line">- (instancetype)setDateWithYear:(NSInteger)year month:(NSInteger)month day:(NSInteger)day hours:(NSInteger)hour minute:(NSInteger)minute second:(NSInteger)second&#123;</span><br><span class="line">    //创建一个工具，一个封装了具体年月日、时秒分、周、季度等的类</span><br><span class="line">    NSDateComponents* dateComponents;</span><br><span class="line">    //创建一个日历，它提供了大部分的日期计算接口，并且允许在NSDate和NSDateComponents之间转换</span><br><span class="line">    NSCalendar *dateCalendar = [[NSCalendar alloc]initWithCalendarIdentifier:NSCalendarIdentifierGregorian];</span><br><span class="line"></span><br><span class="line">    NSInteger unitFlags = NSCalendarUnitYear | NSCalendarUnitMonth | NSCalendarUnitDay | NSCalendarUnitHour | NSCalendarUnitMinute | NSCalendarUnitSecond;</span><br><span class="line">    </span><br><span class="line">    dateComponents = [dateCalendar components:unitFlags fromDate:self];</span><br><span class="line">    //创建一个NSDateComponents，开始设置想要的时间</span><br><span class="line">    NSDateComponents *myCompoentes = [[NSDateComponents alloc]init];</span><br><span class="line">    </span><br><span class="line">    year != -1 ? [myCompoentes setYear:year] : [myCompoentes setYear:dateComponents.year];</span><br><span class="line">    month != -1 ? [myCompoentes setMonth:month] : [myCompoentes setMonth:dateComponents.month];</span><br><span class="line">    day != -1 ? [myCompoentes setDay:day] : [myCompoentes setDay:dateComponents.day];</span><br><span class="line">    hour != -1 ? [myCompoentes setHour:hour] : [myCompoentes setHour:dateComponents.hour];</span><br><span class="line">    minute != -1 ? [myCompoentes setMinute: minute : [myCompoentes setMinute:dateComponents.minute];</span><br><span class="line">    second != -1 ? [myCompoentes setSecond:second] : [myCompoentes setSecond:dateComponents.second];</span><br><span class="line">    //把通过myCompoentes设置的值转为NSDate格式，这个NSDate就是想要的时间</span><br><span class="line">    NSDate *myDate = [dateCalendar dateFromComponents:myCompoentes];</span><br><span class="line">    </span><br><span class="line">    return myDate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li>接下来要分析如何得到某个月份的最后一天,由于每个月的天数的不一样,还有2月这个特殊存在,不好使用穷尽判断的方式来设置.这时候就想到<strong>日历对象对日期的操作,结合上面两个方法,轻而易举的就实现了</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- (NSDate *)getMonthLastDate&#123;</span><br><span class="line">  //先设置为1号,因为比如10月份如果是刚好是31号然后让它月份+1,会导致得到的日期变成12月的1号而不是11月30号</span><br><span class="line">    NSDate *firstDate = [self setDateWithYear:-1 month:-1 day:1 hours:0 minute:0 second:0];</span><br><span class="line">    //再让月份+1  ,这样就得到了下个月的1号</span><br><span class="line">    NSDate *nextMonthDate = [firstDate getDateFromDateWithYear:0 month:1 day:0 hours:0 minute:0 second:0];</span><br><span class="line">    //最后让已经是1号的NSDate天数-1,  就得到了本月的最后一天了</span><br><span class="line">    NSDate *monthLastDate = [nextMonthDate getDateFromDateWithYear:0 month:0 day:-1 hours:0 minute:0 second:0];</span><br><span class="line">    return monthLastDate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li>这里有个小插曲,就是如果需要拿当前月份的数据的时候,不能传这个月的最后一天,只能传当前Date,因此需要<strong>判断NSDate是否是当月</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- (BOOL)isThisMonth</span><br><span class="line">&#123;</span><br><span class="line">    NSCalendar *calendar = [NSCalendar currentCalendar];</span><br><span class="line">    NSCalendarUnit unit = NSCalendarUnitYear | NSCalendarUnitMonth;</span><br><span class="line">    // 获得某个时间的年月</span><br><span class="line">    NSDateComponents *dateCmps = [calendar components:unit fromDate:self];</span><br><span class="line">  //与当前日期比较</span><br><span class="line">    NSDateComponents *nowCmps = [calendar components:unit fromDate:[NSDate date]];</span><br><span class="line">    return dateCmps.year == nowCmps.year &amp;&amp; dateCmps.month == nowCmps.month;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li><strong>如果需要判断得到的日期是否是周末</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">- (BOOL)isWeekend&#123;</span><br><span class="line">    //计算week数</span><br><span class="line">    NSCalendar * myCalendar = [NSCalendar currentCalendar];</span><br><span class="line">    myCalendar.timeZone = [NSTimeZone systemTimeZone];</span><br><span class="line">    NSInteger week = [[myCalendar components:NSCalendarUnitWeekday fromDate:self] weekday];</span><br><span class="line">    //国际日期中1是周日 7是周六 , 其他2~6对应星期一~星期五</span><br><span class="line">    switch (week) &#123;</span><br><span class="line">        case 1: &#123; return YES; &#125;</span><br><span class="line">        case 7: &#123; return YES; &#125;</span><br><span class="line">        default: &#123; return NO; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言:&quot;&gt;&lt;/a&gt;前言:&lt;/h3&gt;&lt;p&gt;​    由于查询数据库时查询条件需要传递日期来获取某个月份的数据列表,如果传的时该月的某一天会导致拿到数据不全,如果传了该月的第一天会
      
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOSDevelopment/"/>
    
      <category term="项目/日常问题" scheme="http://yoursite.com/categories/iOSDevelopment/Project-daily/"/>
    
    
  </entry>
  
  <entry>
    <title>限制键盘输入字符/位数</title>
    <link href="http://yoursite.com/2018/01/10/%E9%99%90%E5%88%B6%E9%94%AE%E7%9B%98%E8%BE%93%E5%85%A5%E5%AD%97%E7%AC%A6:%E4%BD%8D%E6%95%B0/"/>
    <id>http://yoursite.com/2018/01/10/限制键盘输入字符:位数/</id>
    <published>2018-01-10T05:25:07.000Z</published>
    <updated>2018-01-10T06:10:23.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h3><p><strong>很多情况下，输入框都是需要按照要求进行输入。例如：密码输入框只能输入纯数字或者是拼音与数字结合的文本等，那么我们在开发的时候就需要做一些输入文本的限制。当然,以下的方法都可以使用正则来实现,找个时间我顺便把正则也给补充上来~</strong></p><hr><ul><li><strong>只能输入纯数字</strong></li></ul><p><code>在这里以UITextField为例：其实现代码如下：</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#define Numbers @&quot;1234567890&quot;</span><br><span class="line"></span><br><span class="line">- (BOOL)textField:(UITextField *)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString *)string&#123;</span><br><span class="line">  //invertedSet方法是去反字符,把所有的除了Numbers里的字符都找出来(包含去空格功能)</span><br><span class="line">  NSCharacterSet *cs = [[NSCharacterSet characterSetWithCharactersInString:Numbers invertedSet];</span><br><span class="line">//利用上述得到的反字符集合分割原有字符串,并且重新拼接起来就得到纯数字字符串</span><br><span class="line">  NSString *filtered = [[string componentsSeparatedByCharactersInSet:cs] componentsJoinedByString:@&quot;&quot;];</span><br><span class="line">// 如果重新拼接起来的字符串和原字符串相同说明没有其他字符</span><br><span class="line">  return [string isEqualToString:filtered];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li><strong>只能输入纯大小写字母</strong></li></ul><p>和以上只能输入纯数字类似，实现起来简单，只需要宏定义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#define LETTER @&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&quot;</span><br><span class="line"></span><br><span class="line">- (BOOL)textField:(UITextField *)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString *)string</span><br><span class="line">  &#123;</span><br><span class="line">    NSCharacterSet *cs = [[NSCharacterSet characterSetWithCharactersInString:LETTER] invertedSet];</span><br><span class="line">    NSString *filtered = [[string componentsSeparatedByCharactersInSet:cs] componentsJoinedByString:@&quot;&quot;];</span><br><span class="line">    return [string isEqualToString:filtered];</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><hr><ul><li><strong>大小写字母和数字结合输入</strong></li></ul><p><code>方法类似上面的做法</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define LETTER_NUMBER @&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&quot;</span><br></pre></td></tr></table></figure><blockquote><p>同样道理,具体能够输入哪些内容如果输入内容能够一一列举的话我们就可以通过define来设置了，实现起来超简单。</p></blockquote><hr><p><strong>限制只能输入中文</strong></p><p><em>在这里用到了观察者(因为其实通过联想/复制输入是不会走shouldChangeCharactersInRange代理方法的,会导致联想输入的中文没法控制,所以需要通过KVO监听 , 不过有时候我一般选择直接关掉联想,世界清静~~)</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    _myTextField.delegate = self;</span><br><span class="line">    [[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(textFiledEditChanged:) name:UITextFieldTextDidChangeNotification object:_myTextField];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (BOOL)textFieldShouldReturn:(UITextField *)textField&#123;</span><br><span class="line">    [textField resignFirstResponder];</span><br><span class="line"></span><br><span class="line">    //过滤非汉字字符</span><br><span class="line">    textField.text = [self filterCharactor:textField.text withRegex:@&quot;[^\u4e00-\u9fa5]&quot;];</span><br><span class="line">//截四位汉字</span><br><span class="line">    if (textField.text.length &gt;= 4) &#123;</span><br><span class="line">        textField.text = [textField.text substringToIndex:4];</span><br><span class="line">    &#125;</span><br><span class="line">    return NO;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)textFiledEditChanged:(id)notification&#123;</span><br><span class="line"></span><br><span class="line">    UITextRange *selectedRange = _myTextField.markedTextRange;</span><br><span class="line">    UITextPosition *position = [_myTextField positionFromPosition:selectedRange.start offset:0];</span><br><span class="line">    if (!position) &#123; //// 没有高亮选择的字</span><br><span class="line">        //过滤非汉字字符</span><br><span class="line">        _myTextField.text = [self filterCharactor:_myTextField.text withRegex:@&quot;[^\u4e00-\u9fa5]&quot;];</span><br><span class="line">        if (_myTextField.text.length &gt;= 4) &#123;</span><br><span class="line">            _myTextField.text = [_myTextField.text substringToIndex:4];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else &#123; //有高亮文字</span><br><span class="line">        //do nothing</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (NSString *)filterCharactor:(NSString *)string withRegex:(NSString *)regexStr&#123;</span><br><span class="line">    NSString *searchText = string;</span><br><span class="line">    NSError *error = NULL;</span><br><span class="line">    NSRegularExpression *regex = [NSRegularExpression regularExpressionWithPattern:regexStr options:NSRegularExpressionCaseInsensitive error:&amp;error];</span><br><span class="line">    NSString *result = [regex stringByReplacingMatchesInString:searchText options:NSMatchingReportCompletion range:NSMakeRange(0, searchText.length) withTemplate:@&quot;&quot;];</span><br><span class="line">    return result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><ul><li><strong>如果要限制输入字符位数的话可以直接设置，这个实现上有很多种，最简单的就是</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (void)textViewDidChange:(UITextView *)textView&#123;</span><br><span class="line">    NSInteger number = [textView.text length];</span><br><span class="line">    if (number &gt; 300) &#123;</span><br><span class="line">        textView.text = [textView.text substringToIndex:300];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li><strong>如果输入框是金额类数字,需要限制小数点前小数点后位数可以用下面的分类方法</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">- (BOOL)textField:(UITextField *)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString *)string&#123;</span><br><span class="line">    return [NSString limitPayMoneyDot:textField shouldChangeCharactersInRange:range replacementString:string dotPreBits:10 dotAfterBits:2];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (BOOL) limitPayMoneyDot:(UITextField *)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString *)string dotPreBits:(int)dotPreBits dotAfterBits:(int)dotAfterBits</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    static NSString *myDotNumbers = @&quot;0123456789.\n&quot;;</span><br><span class="line">    static NSString *myNumbers = @&quot;0123456789\n&quot;;</span><br><span class="line">  </span><br><span class="line">  /**********   过滤各种情况  **********/</span><br><span class="line">    if ([string isEqualToString:@&quot;\n&quot;] || [string isEqualToString:@&quot;&quot;])</span><br><span class="line">    &#123; //按下return</span><br><span class="line">        return YES;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //当设置小数点后位数为0时不能输入小数点</span><br><span class="line">    if([string isEqualToString:@&quot;.&quot;] &amp;&amp; dotAfterBits == 0)&#123;</span><br><span class="line">        return NO;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //首位不能是小数点  |   不能多个小数点   |  不能首位多个0   | 小数点后最后一位不能是0</span><br><span class="line">    if(([string isEqualToString:@&quot;.&quot;] &amp;&amp; textField.text.length == 0) || ([textField.text containsString:@&quot;.&quot;] &amp;&amp; [string isEqualToString:@&quot;.&quot;]) || ([string isEqualToString:@&quot;0&quot;] &amp;&amp; [textField.text isEqualToString:@&quot;0&quot;]))&#123;</span><br><span class="line">        return NO;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  /**********   开始限制逻辑  **********/</span><br><span class="line">    NSCharacterSet *cs;</span><br><span class="line">    NSUInteger nDotLoc = [textField.text rangeOfString:@&quot;.&quot;].location;</span><br><span class="line">    </span><br><span class="line">    //不能0.00000, 也就是前面都是0的情况下小数点最后一位不能是0</span><br><span class="line">    if (nDotLoc != NSNotFound &amp;&amp; range.location == nDotLoc + dotAfterBits ) &#123;</span><br><span class="line">        float number = [textField.text floatValue];</span><br><span class="line">        if (number == 0 &amp;&amp; [string isEqualToString:@&quot;0&quot;]) &#123;</span><br><span class="line">            return NO;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    if (NSNotFound == nDotLoc &amp;&amp; 0 != range.location)//整数</span><br><span class="line">    &#123;</span><br><span class="line">        //去空格去数字</span><br><span class="line">        cs = [[NSCharacterSet characterSetWithCharactersInString:myNumbers] invertedSet];</span><br><span class="line">        if ([string isEqualToString:@&quot;.&quot;])</span><br><span class="line">        &#123;</span><br><span class="line">            return YES;</span><br><span class="line">        &#125;</span><br><span class="line">        //超过整数位数限制</span><br><span class="line">        if (textField.text.length &gt;= dotPreBits)</span><br><span class="line">        &#123;  </span><br><span class="line">            return NO;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else //非整数</span><br><span class="line">    &#123;</span><br><span class="line">        cs = [[NSCharacterSet characterSetWithCharactersInString:myDotNumbers] invertedSet];</span><br><span class="line">        if (textField.text.length &gt;= dotPreBits + dotAfterBits + 1)</span><br><span class="line">        &#123;</span><br><span class="line">          //超过位数限制</span><br><span class="line">            return  NO;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //过滤</span><br><span class="line">    NSString *filtered = [[string componentsSeparatedByCharactersInSet:cs] componentsJoinedByString:@&quot;&quot;];</span><br><span class="line">    BOOL basicTest = [string isEqualToString:filtered];</span><br><span class="line">    if (!basicTest)</span><br><span class="line">    &#123;</span><br><span class="line">      //输入了非法字符</span><br><span class="line">        return NO;</span><br><span class="line">    &#125;</span><br><span class="line">    if (NSNotFound != nDotLoc &amp;&amp; range.location &gt; nDotLoc + dotAfterBits)</span><br><span class="line">    &#123;  //超过位数限制</span><br><span class="line">        return NO;</span><br><span class="line">    &#125;</span><br><span class="line">    return YES;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言:&quot;&gt;&lt;/a&gt;前言:&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;很多情况下，输入框都是需要按照要求进行输入。例如：密码输入框只能输入纯数字或者是拼音与数字结合的文本等，那么我们在开发的
      
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOSDevelopment/"/>
    
      <category term="项目/日常问题" scheme="http://yoursite.com/categories/iOSDevelopment/Project-daily/"/>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>调起QQ临时会话</title>
    <link href="http://yoursite.com/2018/01/10/%E8%B0%83%E8%B5%B7QQ%E4%B8%B4%E6%97%B6%E4%BC%9A%E8%AF%9D/"/>
    <id>http://yoursite.com/2018/01/10/调起QQ临时会话/</id>
    <published>2018-01-10T03:27:52.000Z</published>
    <updated>2018-01-10T06:06:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h3><p><strong>前段时间项目中有个需求,在App内调起QQ客户端和客服发起临时会话.</strong></p><blockquote><ol><li><p>QQ开发者平台,并没有找到App调用QQ客户端发起临时会话方法,(只提供了网页端接入方法)</p></li><li><p>网上搜到的一些方法,大部分都粗秒淡写,要么可以调用QQ客户端,不能成功发送消息,要么是其他问题.并且大部分只是说明了调起普通版QQ的方法,当用户没有安装普通QQ而且安装了国际版QQi或者TIM的时候那些方法都是无效的</p></li><li><p>网上还有说接收临时消息的QQ号要开通QQ推广功能,没有开通的是接收不了陌生人消息的…但是我自己用个人QQ都可以….</p></li></ol></blockquote><hr><blockquote><p><strong>注意  </strong>调起临时会话的话记得考虑用户没安装QQ而是安装了国际版QQi或者TIM，因为他们的Scheme是不一样的….此外，从外部APP打开TIM会导致TIM卡死（我不知道这是神马bug，然而网上大部分只是打开QQ没考虑后两种情况所以也查不到什么原因，官网自然也是啥都没提到…）</p></blockquote><hr><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><ul><li><strong>将各版本Schemes添加到项目plist文件白名单中(iOS9新出要求),方法如下:</strong><ul><li>在项目info.plist添加LSApplicationQueriesSchemes字段 类型Array</li><li>在此Array中添加各个需要的QQ版本的Schemes</li></ul></li></ul><p><img src="http://www.z4a.net/images/2018/01/10/_20180110115213.png" alt="各版本QQSchemes"></p><hr><ul><li><strong>直接上代码:</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">if (![self OpenUrl:[NSString stringWithFormat:@&quot;mqq://im/chat?chat_type=wpa&amp;uin=%@&amp;version=1&amp;src_type=web&quot;,ServiceQQNumber]]) &#123;//QQ</span><br><span class="line">if(![self OpenUrl:[NSString stringWithFormat:@&quot;mqqiapi://im/chat?chat_type=wpa&amp;uin=%@&amp;version=1&amp;src_type=web&quot;,ServiceQQNumber]])&#123;//国际版QQi</span><br><span class="line">//if(![self OpenUrl:@&quot;TIM://&quot;])&#123;//TIM    //测试打开后会卡死</span><br><span class="line">             [xxHUD showError:@&quot;无法打开,清先安装QQ&quot;];</span><br><span class="line">                // &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">- (BOOL)OpenUrl:(NSString *)url&#123;</span><br><span class="line">if([[UIApplication sharedApplication] canOpenURL:[NSURL  URLWithString:url]])&#123;</span><br><span class="line">[[UIApplication sharedApplication] openURL:[NSURL URLWithString:url]];</span><br><span class="line">        return YES;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return NO;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言:&quot;&gt;&lt;/a&gt;前言:&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;前段时间项目中有个需求,在App内调起QQ客户端和客服发起临时会话.&lt;/strong&gt;&lt;/p&gt;
&lt;blockq
      
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOSDevelopment/"/>
    
      <category term="项目/日常问题" scheme="http://yoursite.com/categories/iOSDevelopment/Project-daily/"/>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>html中的文本级/容器级标签与css中的块级/行内元素</title>
    <link href="http://yoursite.com/2018/01/09/html%E4%B8%AD%E7%9A%84%E6%96%87%E6%9C%AC%E7%BA%A7:%E5%AE%B9%E5%99%A8%E7%BA%A7%E6%A0%87%E7%AD%BE%E4%B8%8Ecss%E4%B8%AD%E7%9A%84%E5%9D%97%E7%BA%A7:%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0/"/>
    <id>http://yoursite.com/2018/01/09/html中的文本级:容器级标签与css中的块级:行内元素/</id>
    <published>2018-01-09T07:59:34.000Z</published>
    <updated>2018-01-10T03:14:01.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="html中的文本级-容器级标签与css中的块级-行内元素"><a href="#html中的文本级-容器级标签与css中的块级-行内元素" class="headerlink" title="html中的文本级/容器级标签与css中的块级/行内元素"></a>html中的文本级/容器级标签与css中的块级/行内元素</h3><hr><ol><li><strong>块级元素</strong></li></ol><blockquote><ul><li>霸占一行，不能与其他任何元素并列</li><li>能 接受宽、高</li><li>如果不设置宽度，那么宽度将默认变为<em>父亲</em>的100%。</li></ul></blockquote><ol><li><strong>行内元素</strong></li></ol><blockquote><ul><li>与  其他行内元素并排</li><li>不能  设置宽、高。默认的宽度，就是文字的宽度。</li></ul></blockquote><hr><p>在HTML中，已经将标签分过类：<strong>文本级、容器级。</strong></p><blockquote><ul><li><p>文本级：p、span、a、b、i、u、em</p></li><li><p>容器级：div、h系列、li、dt、ddCSS的分类和上面的很像，就p不一样：</p><p><strong><em>所有的文本级标签，都是行内元素，除了p，p是个文本级，但是是个块级元素。</em></strong></p><p><strong><em>所有的容器级标签都是块级元素。</em></strong></p></li></ul></blockquote><p><img src="http://www.z4a.net/images/2018/01/09/html.png" alt="html标签区分"></p><p><img src="http://www.z4a.net/images/2018/01/09/css.png" alt="css区分元素"></p><ol><li><strong>块级元素和行内元素的相互转换</strong></li></ol><blockquote><ul><li>块级元素可以设置为行内元素</li><li>行内元素可以设置为块级元素</li></ul></blockquote><hr><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">display: inline;</span><br><span class="line">background-color: pink;</span><br><span class="line">width: 500px;</span><br><span class="line">height: 500px;&#125;</span><br></pre></td></tr></table></figure><p><strong>display</strong>是“显示模式”的意思，用来改变元素的行内、块级性质</p><p><strong><em>inline</em></strong>就是“行内”。</p><p>一旦，给一个标签设置  <code>display: inline</code>;</p><p>那么，这个标签将立即变为行内元素。此时它和一个span无异：</p><blockquote><blockquote><ul><li>此时这个div不能设置宽度、高度；</li></ul><ul><li>此时这个div可以和别人并排了同样的道理，</li></ul></blockquote></blockquote><hr><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">span&#123;</span><br><span class="line">display: block;</span><br><span class="line">width: 200px;</span><br><span class="line">height: 200px;</span><br><span class="line">background-color: pink;&#125;</span><br></pre></td></tr></table></figure><p><strong>“block”</strong>是“块”的意思让标签变为块级元素。此时这个标签，和一个div无异：</p><blockquote><blockquote><ul><li>此时这个span能够设置宽度、高度</li><li>此时这个span必须霸占一行了，别人无法和他并排</li><li>如果不设置宽度，将撑满父亲</li></ul></blockquote></blockquote><hr><p>标准流里面限制非常多，标签的性质恶心。比如，如果需要盒子并排、并且需要设置宽高。所以，移民！脱离标准流！</p><p>css中一共有三种手段，使一个元素脱离标准文档流：</p><blockquote><ol><li><strong>浮动</strong></li><li><strong>绝对定位</strong></li><li><strong>固定定位</strong></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h3 id=&quot;html中的文本级-容器级标签与css中的块级-行内元素&quot;&gt;&lt;a href=&quot;#html中的文本级-容器级标签与css中的块级-行内元素&quot; class=&quot;headerlink&quot; title=&quot;html中的文本级/容器级标签与css中的块级/行内元素&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="html+css+js" scheme="http://yoursite.com/categories/html-css-js/"/>
    
      <category term="样式表" scheme="http://yoursite.com/categories/html-css-js/CSS/"/>
    
    
      <category term="html+css+js" scheme="http://yoursite.com/tags/html-css-js/"/>
    
  </entry>
  
  <entry>
    <title>沙盒文件夹的作用和选择</title>
    <link href="http://yoursite.com/2016/04/18/%E6%B2%99%E7%9B%92%E6%96%87%E4%BB%B6%E5%A4%B9%E7%9A%84%E4%BD%9C%E7%94%A8%E5%92%8C%E9%80%89%E6%8B%A9/"/>
    <id>http://yoursite.com/2016/04/18/沙盒文件夹的作用和选择/</id>
    <published>2016-04-18T10:56:00.000Z</published>
    <updated>2018-01-09T03:56:54.000Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><h6 id="沙盒大家都知道，但是平时要存储数据时总不知道存到哪里去才是正确的选择，这次就来聊聊每一个文件夹的作用和使用时该怎么选择"><a href="#沙盒大家都知道，但是平时要存储数据时总不知道存到哪里去才是正确的选择，这次就来聊聊每一个文件夹的作用和使用时该怎么选择" class="headerlink" title="沙盒大家都知道，但是平时要存储数据时总不知道存到哪里去才是正确的选择，这次就来聊聊每一个文件夹的作用和使用时该怎么选择"></a>沙盒大家都知道，但是平时要存储数据时总不知道存到哪里去才是正确的选择，这次就来聊聊每一个文件夹的作用和使用时该怎么选择</h6></blockquote><hr><h6 id="先来了解每一个文件夹的基本作用"><a href="#先来了解每一个文件夹的基本作用" class="headerlink" title="先来了解每一个文件夹的基本作用"></a>先来了解每一个文件夹的基本作用</h6><blockquote><p>   • Documents：保存应用运行时生成的需要持久化的数据，iTunes同步设备时会备份该目录。<br>• tmp：保存应用运行时所需的临时数据，使用完毕后再将相应的文件从该目录删除。应用没有运行时，系统也可能会清除该目录下的文件。iTunes同步设备时不会备份该目录<br>• Library/Caches：保存应用运行时生成的需要持久化的数据，iTunes同步设备时不会备份该目录。一般存储体积大、不需要备份的非重要数据<br>• Library/Preference：保存应用的所有偏好设置，iOS的Settings(设置)应用会在该目录中查找应用的设置信息。iTunes同步设备时会备份该目录</p><h6 id="（看完还是不知道到底存哪里比较好啊喂-╯’-‘-╯︵-┻━┻-）"><a href="#（看完还是不知道到底存哪里比较好啊喂-╯’-‘-╯︵-┻━┻-）" class="headerlink" title="（看完还是不知道到底存哪里比较好啊喂(╯’ - ‘)╯︵ ┻━┻ ）"></a>（看完还是不知道到底存哪里比较好啊喂(╯’ - ‘)╯︵ ┻━┻ ）</h6></blockquote><hr><blockquote><h6 id="–-Documents"><a href="#–-Documents" class="headerlink" title="– Documents"></a>– Documents</h6><p>– 需要保存由”应用程序本身”产生的文件或者数据，例如：游戏进度、涂鸦软件的绘图信息<br>– 目录中的文件会被自动保存在 iClioud<br>– 注意 ： 不要保存从网络上下载的文件，否则会无法上架</p><hr><h6 id="–-Caches"><a href="#–-Caches" class="headerlink" title="– Caches"></a>– Caches</h6><p>– 保存临时文件，”后续需要使用”，例如：缓存图片、离线数据(地图数据等)<br>– 系统不会清零 cache 目录中的文件  –&gt; 因此要求程序开发时，”必须提供 cache 目录的清理解决方案”</p><hr><h6 id="–-Preference"><a href="#–-Preference" class="headerlink" title="– Preference"></a>– Preference</h6><p>– 用户偏好设置，使用 NSUserDefault 直接读写</p><hr><h6 id="–-Tmp"><a href="#–-Tmp" class="headerlink" title="– Tmp"></a>– Tmp</h6><p>– 保存临时文件，”后续不需要使用”<br>– tmp  目录中的文件，系统会自动清零<br>– 重新启动手机时，tmp  目录会被情况<br>– 系统磁盘空间不足时，系统也会自动清理</p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;blockquote&gt;
&lt;h6 id=&quot;沙盒大家都知道，但是平时要存储数据时总不知道存到哪里去才是正确的选择，这次就来聊聊每一个文件夹的作用和使用时该怎么选择&quot;&gt;&lt;a href=&quot;#沙盒大家都知道，但是平时要存储数据时总不知道存到哪里去才是正确的选择，这次就来聊聊每一
      
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOSDevelopment/"/>
    
      <category term="原生应用" scheme="http://yoursite.com/categories/iOSDevelopment/Native/"/>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>代理/通知/KVO 的区别</title>
    <link href="http://yoursite.com/2016/04/17/%E4%BB%A3%E7%90%86:%E9%80%9A%E7%9F%A5:KVO%20%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2016/04/17/代理:通知:KVO 的区别/</id>
    <published>2016-04-16T17:15:00.000Z</published>
    <updated>2018-01-09T03:49:51.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h6 id="通知-NSNotification、通知中心-NSNotificationCenter"><a href="#通知-NSNotification、通知中心-NSNotificationCenter" class="headerlink" title="通知 NSNotification、通知中心 NSNotificationCenter"></a>通知 NSNotification、通知中心 NSNotificationCenter</h6><p>◦    任何对象之间都可以传递消息(一般在层级结构比较深又需要传值的情况)</p><ul><li>使用范围<br>▪    1个对象可以发通知给多个对象<br>▪    1个对象可以接受多个对象发出的通知<br>◦    要求:必须得保证通知的名字在发出和监听时是一致的</li></ul><hr><h6 id="KVO"><a href="#KVO" class="headerlink" title="KVO"></a>KVO</h6><p>◦    仅仅是能监听对象属性的改变（灵活度不如通知和代理）</p><hr><h6 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h6><ul><li>使用范围<br>▪    1个对象只能设置一个代理(假设这个对象只有1个代理属性)<br>▪    1个对象能成为多个对象的代理</li></ul><hr><h6 id="如何选择"><a href="#如何选择" class="headerlink" title="如何选择?"></a>如何选择?</h6><p>◦    代理比通知规范，非常适合多人开发以及代码维护<br>◦    如果要通知多个对象,就用通知</p><p>◦    建议使用代理多于通知,能使用代理尽量使用代理<br>◦    当层级结构非常深，难以拿到对应对象时使用通知</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h6 id=&quot;通知-NSNotification、通知中心-NSNotificationCenter&quot;&gt;&lt;a href=&quot;#通知-NSNotification、通知中心-NSNotificationCenter&quot; class=&quot;headerlink&quot; title=&quot;通
      
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOSDevelopment/"/>
    
      <category term="面试问题" scheme="http://yoursite.com/categories/iOSDevelopment/InterviewFAQ/"/>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>纠正网上大部分文章对UITableView分割线的不正确认识</title>
    <link href="http://yoursite.com/2016/04/16/%E7%BA%A0%E6%AD%A3%E7%BD%91%E4%B8%8A%E5%A4%A7%E9%83%A8%E5%88%86%E6%96%87%E7%AB%A0%E5%AF%B9UITableView%E5%88%86%E5%89%B2%E7%BA%BF%E7%9A%84%E4%B8%8D%E6%AD%A3%E7%A1%AE%E8%AE%A4%E8%AF%86/"/>
    <id>http://yoursite.com/2016/04/16/纠正网上大部分文章对UITableView分割线的不正确认识/</id>
    <published>2016-04-16T06:04:00.000Z</published>
    <updated>2018-01-09T12:54:52.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h5 id="本篇文章主要有两个内容-1-正确认识全屏分割线的设置-2-去除没有数据的Cell或者指定Cell的分割线"><a href="#本篇文章主要有两个内容-1-正确认识全屏分割线的设置-2-去除没有数据的Cell或者指定Cell的分割线" class="headerlink" title="本篇文章主要有两个内容:1. 正确认识全屏分割线的设置  2. 去除没有数据的Cell或者指定Cell的分割线"></a>本篇文章主要有两个内容:1. 正确认识全屏分割线的设置  2. 去除没有数据的Cell或者指定Cell的分割线</h5><blockquote><p>毕竟这里只是我自己本人的看法和总结  –  有什么建议或者觉得我说得不好的地方，欢迎互相探讨。毕竟探讨越多提升越大~~</p></blockquote><hr><h4 id="—-PART-One—"><a href="#—-PART-One—" class="headerlink" title="—-PART One—-"></a>—-PART One—-</h4><p>首先是我一直觉得很不爽的全屏分割线(为何不爽,看完这一部分大家应该也能理解我的感受)</p><blockquote><h2 id="自定义Cell的情况"><a href="#自定义Cell的情况" class="headerlink" title="自定义Cell的情况"></a>自定义Cell的情况</h2><ul><li>把系统的分割线隐藏,然后自己创建一个高度为1的UIVIew添加到Cell的底部或者顶部</li><li>把系统的分割线隐藏,然后设置tableview的背景色为自己想要的分割线颜色，重写Cell的setFrame方法，把高度减1(需要的话还可以把宽度也减一点点，会有不一样的效果~)</li><li>设置Cell的<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-  或者设置tableview的```separatorInset = UIEdgeInsetsZero```、再设置Cell的 ```layoutMargins = UIEdgeInsetsZero</span><br></pre></td></tr></table></figure></li></ul></blockquote><hr><blockquote><h2 id="不自定义Cell的情况"><a href="#不自定义Cell的情况" class="headerlink" title="不自定义Cell的情况"></a>不自定义Cell的情况</h2><ul><li>设置Cell的preservesSuperviewLayoutMargins = NO、separatorInset = UIEdgeInsetsZero 、 layoutMargins = UIEdgeInsetsZero</li><li>或者设置tableview的 separatorInset = UIEdgeInsetsZero、再设置Cell的 preservesSuperviewLayoutMargins = NO、layoutMargins = UIEdgeInsetsZero</li></ul><p>其实嘛，之所以会有边距都是separatorInset和layoutMargins这两个属性作祟，<br>tableview和Cell同时都有这两个属性导致了两个单位的偏移，<br>而separatorInset这个无论tableview设置还是Cell设置都是一样可以减少一个单位的偏移(即使两个都设置了也只是减一个单位)</p><blockquote><p>另外一个重要原因是 layoutMargins这个属性,当你没有设置这个属性的时候，它会默认有 {8,8,8,8} 的偏移量，<br>但是呢，即使你设置了tableview的 layoutMargins=UIEdgeInsetsZero ，你也会发现没用。<br>这是因为另一个属性 preservesSuperviewLayoutMargins又在搞事情，<br>这个属性的意思是保持父控件的layoutMargins属性的行为(大概吧（雾…）)默认是NO。<br>也就是说，Cell本身的layoutMargins还是默认的 {8，8，8，8} ，因此还是有一个单位的偏移。。。<br>但是啊但是(好多但是→_→)即使设置为YES也并没有什么效果，<br>因为呀，Cell的父视图并不是TableView呢…而是一个叫UITableviewWrapperView的</p></blockquote></blockquote><p><img src="http://www.z4a.net/images/2018/01/09/TBVSeparator_1.png" alt="UITableViewSeparator_1.png"></p><blockquote><p>此外，当你使用系统默认的UITableviewCell类的时候，preservesSuperviewLayoutMargins默认是为YES的，而自定义Cell的时候这个属性会自动置为NO</p></blockquote><p><strong>因此，我在这里要重新说明如何自定义TableView全屏的分割线<br>如果自定义Cell的话只需要设置  tableview 或者 Cell的 separatorInset = UIEdgeInsetsZero 以及Cell的的layoutMargins =UIEdgeInsetsZero 这简单的两步就可以了!!!<br> 如果使用系统的是UITableviewCell类的话就再多加上preservesSuperviewLayoutMargins = NO这句就可以了</strong></p><h4 id="—-PART-Two—"><a href="#—-PART-Two—" class="headerlink" title="—-PART Two—-"></a>—-PART Two—-</h4><p>去除没有数据的Cell或者指定Cell的分割线</p><blockquote><p>   想要去除没有数据的Cell的分割线的话非常简单，只需要设置tableviewFootView为一个空的View,那么下面没有数据的Cell的就不会显示了</p></blockquote><p><img src="http://www.z4a.net/images/2018/01/09/TBVSeparator_2.png" alt="UITableViewSeparator_2.png"></p><blockquote><p>  另外一个是因为前几天刚好遇见个需求，就是要去除指定的某一个Cell的分割线。<br>  那我们其实就可以利用separatorInset来完成这个需求只需要把分割线移除屏幕外或者把它压缩为0像素就可以了</p></blockquote><p><img src="http://www.z4a.net/images/2018/01/09/TBVSeparator_3.png" alt="UITableViewSeparator_3.png"></p><p>效果很容易就达到了~~</p><p><img src="http://www.z4a.net/images/2018/01/09/TBVSeparator_4.png" alt="UITableViewSeparator_4.png"></p><p><strong>最后说几句—关于preservesSuperviewLayoutMargins属性还是无法理解它的作用…看了苹果文档，大概意思是如果设为Yes的话,则父控件内容的左边距会留出一个最小间距出来。虽然我说了Cell的父控件是UITableviewWrapperView，而且在CellForRow数据源方法中也拿不到它(因为Cell要在该方法返回后才被系统使用并添加到父控件上)，但是即使我在其他能拿到的地方拿到它了，并且设置了它的layoutMargins =UIEdgeInsetsZero和Cell的preservesSuperviewLayoutMargins = YES，可惜却也完全没有效果…如果大家有什么见解希望能告知一声~</strong></p><p><img src="http://www.z4a.net/images/2018/01/09/TBVSeparator_5.png" alt="UITableViewSeparator_5.png"></p><hr><h3 id="至此，我的个人见解说完了，谢谢大家的阅读"><a href="#至此，我的个人见解说完了，谢谢大家的阅读" class="headerlink" title="至此，我的个人见解说完了，谢谢大家的阅读~~~"></a>至此，我的个人见解说完了，谢谢大家的阅读~~~</h3><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h5 id=&quot;本篇文章主要有两个内容-1-正确认识全屏分割线的设置-2-去除没有数据的Cell或者指定Cell的分割线&quot;&gt;&lt;a href=&quot;#本篇文章主要有两个内容-1-正确认识全屏分割线的设置-2-去除没有数据的Cell或者指定Cell的分割线&quot; class=&quot;he
      
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOSDevelopment/"/>
    
      <category term="原生应用" scheme="http://yoursite.com/categories/iOSDevelopment/Native/"/>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>总结-layoutSubview的调用场景</title>
    <link href="http://yoursite.com/2016/04/15/%E6%80%BB%E7%BB%93-layoutSubview%E7%9A%84%E8%B0%83%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
    <id>http://yoursite.com/2016/04/15/总结-layoutSubview的调用场景/</id>
    <published>2016-04-15T08:58:00.000Z</published>
    <updated>2018-01-09T03:53:42.000Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><p>首先要起个代号(不然连我自己都会晕+_+)</p><h3 id="视图A-、-被添加到视图A的子视图B"><a href="#视图A-、-被添加到视图A的子视图B" class="headerlink" title="视图A 、 被添加到视图A的子视图B"></a>视图<em>A</em> 、 被添加到视图A的子视图<em>B</em></h3></blockquote><hr><blockquote><ul><li>使用addSubview添加时会调用layoutSubView</li><li>在A开始被添加到父视图  (如果此时A没有frame  则不会调用layoutSubview)</li><li>添加B 到A的时候调用    (如果此时B有frame  则会调用)</li></ul></blockquote><hr><blockquote><ul><li>设置A的父视图的<em>Size</em>时会调用</li><li>设置A的<em>Size</em>时会进行智能判断–&gt;仅当 Size与之前不同时，才会调用A的layoutSubview</li><li>设置B的<em>frame</em>时会调用<br>(如果仅仅设置frame 但是没有调用过addSubview添加到父控件上 那么也不会调用layoutSubview )</li></ul></blockquote><hr><blockquote><ul><li>滚动scrollview 的时候也会调用</li><li>设备的orientation(方向)改变时,涉及改变的UIViewControl 的root view<br>(此时所有的控件被重新布局,相当于A的frame被改变  那么会调用layoutSubview  而且如果控件有B的话会再调用一次layoutSubview)</li><li>Resizing(拉伸) 一个 控件 也会调用它的父控件的layoutSubview</li><li>调用setNeedsLayout时</li></ul></blockquote><hr><h6 id="还有一个重要的点-layoutSubview不是在调用完比如addSubview等方法之后就马上调用-而是会在调用addSubview方法所在的作用域结束之后之后才调用-因此即使你在同一个方法中既使用了addSubViews又更改了frame，也是只会调用一次layoutSubview而已"><a href="#还有一个重要的点-layoutSubview不是在调用完比如addSubview等方法之后就马上调用-而是会在调用addSubview方法所在的作用域结束之后之后才调用-因此即使你在同一个方法中既使用了addSubViews又更改了frame，也是只会调用一次layoutSubview而已" class="headerlink" title="还有一个重要的点,layoutSubview不是在调用完比如addSubview等方法之后就马上调用,而是会在调用addSubview方法所在的作用域结束之后之后才调用,因此即使你在同一个方法中既使用了addSubViews又更改了frame，也是只会调用一次layoutSubview而已"></a><code>还有一个重要的点,layoutSubview不是在调用完比如addSubview等方法之后就马上调用,而是会在调用addSubview方法所在的作用域结束之后之后才调用,因此即使你在同一个方法中既使用了addSubViews又更改了frame，也是只会调用一次layoutSubview而已</code></h6><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;首先要起个代号(不然连我自己都会晕+_+)&lt;/p&gt;
&lt;h3 id=&quot;视图A-、-被添加到视图A的子视图B&quot;&gt;&lt;a href=&quot;#视图A-、-被添加到视图A的子视图B&quot; class=&quot;headerlink&quot; title=&quot;视图A 、 被添加
      
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOSDevelopment/"/>
    
      <category term="原理分析" scheme="http://yoursite.com/categories/iOSDevelopment/Analysis/"/>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>iOS中常用的数学函数</title>
    <link href="http://yoursite.com/2016/04/12/iOS%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E6%95%B0%E5%AD%A6%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2016/04/12/iOS中常用的数学函数/</id>
    <published>2016-04-12T01:25:00.000Z</published>
    <updated>2018-01-09T03:54:08.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h5 id="每一个函数都有对应计算float-double-long-double-的函数-这里只列出double类型的"><a href="#每一个函数都有对应计算float-double-long-double-的函数-这里只列出double类型的" class="headerlink" title="每一个函数都有对应计算float / double / long double  的函数,这里只列出double类型的"></a>每一个函数都有对应计算float / double / long double  的函数,这里只列出double类型的</h5><table><thead><tr><th style="text-align:left">三角函数</th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:left">double cos(double)</td><td style="text-align:center">余弦</td></tr><tr><td style="text-align:left">double sin(double)</td><td style="text-align:center">正弦</td></tr><tr><td style="text-align:left">double tan(double)</td><td style="text-align:center">正切</td></tr></tbody></table><hr><table><thead><tr><th style="text-align:left">反三角函数</th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:left">double acos(double)</td><td style="text-align:center">反余弦 结果介于[0, PI]</td></tr><tr><td style="text-align:left">double asin(double)</td><td style="text-align:center">反正弦 结果介于[-PI/2, PI/2]</td></tr><tr><td style="text-align:left">double atan(double)</td><td style="text-align:center">反正切 反正切(主值), 结果介于[-PI/2, PI/2]</td></tr><tr><td style="text-align:left">double atan2(double, double)</td><td style="text-align:center">反正切  主要用法–根据给定的两个值求出对应的角度   比如给y和x,就可以求出该点相对（0，0）的角度</td></tr></tbody></table><hr><table><thead><tr><th style="text-align:left">取整</th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:left">double ceil (double)</td><td style="text-align:center">向上取整</td></tr><tr><td style="text-align:left">double floor (double)</td><td style="text-align:center">向下取整</td></tr><tr><td style="text-align:left">double fmod (double, double)</td><td style="text-align:center">返回两参数相除的余数</td></tr></tbody></table><hr><table><thead><tr><th style="text-align:left">指数与对数</th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:left">double fabs(double)</td><td style="text-align:center">求绝对值</td></tr><tr><td style="text-align:left">double sqrt(double)</td><td style="text-align:center">开方</td></tr><tr><td style="text-align:left">double exp(double)</td><td style="text-align:center">求取自然数e的幂</td></tr><tr><td style="text-align:left">double log (double)</td><td style="text-align:center">以e为底的对数</td></tr><tr><td style="text-align:left">double log10 (double)</td><td style="text-align:center">以10为底的对数</td></tr><tr><td style="text-align:left">double pow(double x, double y）</td><td style="text-align:center">计算以x为底数的y次幂</td></tr></tbody></table><hr><table><thead><tr><th style="text-align:left">其他</th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:left">double hypot(double x, double y)</td><td style="text-align:center">已知直角三角形两个直角边长度，求斜边长度</td></tr><tr><td style="text-align:left">double ldexp(double x, int exponent)</td><td style="text-align:center">计算x*(2的exponent次幂)</td></tr></tbody></table><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h5 id=&quot;每一个函数都有对应计算float-double-long-double-的函数-这里只列出double类型的&quot;&gt;&lt;a href=&quot;#每一个函数都有对应计算float-double-long-double-的函数-这里只列出double类型的&quot; class
      
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOSDevelopment/"/>
    
      <category term="项目/日常问题" scheme="http://yoursite.com/categories/iOSDevelopment/Project-daily/"/>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>整理一下OC中的那些属性修饰符</title>
    <link href="http://yoursite.com/2016/04/11/%E6%95%B4%E7%90%86%E4%B8%80%E4%B8%8BOC%E4%B8%AD%E7%9A%84%E9%82%A3%E4%BA%9B%E5%B1%9E%E6%80%A7%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
    <id>http://yoursite.com/2016/04/11/整理一下OC中的那些属性修饰符/</id>
    <published>2016-04-11T15:21:00.000Z</published>
    <updated>2018-01-09T13:11:40.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="首先从简单到复杂大致分个类"><a href="#首先从简单到复杂大致分个类" class="headerlink" title="首先从简单到复杂大致分个类"></a>首先从简单到复杂大致分个类</h2><h6 id="1-自定义getter-setter方法名修饰符-getter和setter"><a href="#1-自定义getter-setter方法名修饰符-getter和setter" class="headerlink" title="1. 自定义getter | setter方法名修饰符 : getter和setter"></a>1. 自定义getter | setter方法名修饰符 : getter和setter</h6><h6 id="2-原子性修饰符-atomic-nonatomic"><a href="#2-原子性修饰符-atomic-nonatomic" class="headerlink" title="2. 原子性修饰符:atomic | nonatomic"></a>2. 原子性修饰符:atomic | nonatomic</h6><h6 id="3-读写性修饰符：readwrite-readonly"><a href="#3-读写性修饰符：readwrite-readonly" class="headerlink" title="3. 读写性修饰符：readwrite | readonly"></a>3. 读写性修饰符：readwrite | readonly</h6><h6 id="4-setter相关修饰符：assign-retain-copy"><a href="#4-setter相关修饰符：assign-retain-copy" class="headerlink" title="4. setter相关修饰符：assign | retain | copy"></a>4. setter相关修饰符：assign | retain | copy</h6><hr><blockquote><h4 id="方法名修饰符"><a href="#方法名修饰符" class="headerlink" title="方法名修饰符"></a>方法名修饰符</h4><p>• getter=<getmethodname>,setter=<setmethodname>:指定该属性所使用的getter和setter方法的名称</setmethodname></getmethodname></p><hr><p>两个属性修饰符用于设置自定义生成的getter和setter方法名，使用之后将不再使用系统默认的setter和getter方法名</p><p>• 用得不是很多，使用场景一般是对BOOL属性设置该getter方法，比如   isGood 这样用以方便判断时使用</p><p><img src="http://www.z4a.net/images/2018/01/09/property_1.png" alt="property_1.png"></p></blockquote><hr><blockquote><h4 id="原子修饰符"><a href="#原子修饰符" class="headerlink" title="原子修饰符"></a>原子修饰符</h4><p>•<strong>atomic  :  原子属性,为setter方法加锁  (默认) (类似多线程中的互斥锁)</strong></p><p> <code>§ 线程安全,但需要消耗大量资源</code></p><p>• <strong>nonatomic  :  非原子属性,不为setter方法加锁</strong></p><p><code>§ 非线程安全,适合内存小的移动设备</code></p></blockquote><hr><blockquote><h4 id="读写性修饰符"><a href="#读写性修饰符" class="headerlink" title="读写性修饰符"></a>读写性修饰符</h4><p>• <strong>readwrite:表明这个属性是可读可写的，系统为我们生成这个属性的setter和getter方法以及下划线开头的成员变量。</strong><br>•<strong>readonly:表明这个属性只能读不能写，系统只为我们生成一个getter方法下划线开头的成员变量，不会创建setter方法</strong></p></blockquote><hr><h4 id="注意"><a href="#注意" class="headerlink" title="注意!"></a><strong><em>注意!</em></strong></h4><p> <strong>用readwrite自动生成setter和getter方法以及下划线开头的成员变量的时候，如果手动实现了setter和getter方法，那么系统将不会生成下划线开头成员变量</strong></p><p><img src="http://www.z4a.net/images/2018/01/09/property_2.png" alt="property_2.png"><br><img src="http://www.z4a.net/images/2018/01/09/property_3.png" alt="property_3.png"></p><hr><p><strong>同理，readonly自动生成getter 方法和_开头成员变量时，如果手动实现了getter方法，那么系统也不会再生成下划线开头的成员变量</strong></p><p><img src="http://www.z4a.net/images/2018/01/09/property_4.png" alt="property_4.png"><br><img src="http://www.z4a.net/images/2018/01/09/property_5.png" alt="property_5.png"></p><hr><blockquote><h2 id="setter相关修饰符"><a href="#setter相关修饰符" class="headerlink" title="setter相关修饰符"></a>setter相关修饰符</h2><p>•<strong>retain:针对对象类型进行内存管理(非ARC)。当给对象类型使用此修饰符时，setter方法会先将旧的对象属性release掉，再对新的对象进行一次赋值并进行一次retain操作</strong><br>• <strong>assign:表示直接赋值， 基本数据类型、枚举、结构体(非OC对象) class类型</strong><br><code>当一个对象被销毁时，指针不会被清空(所以修饰对象时容易造成坏内存 (非ARC下会用这个修饰对象)</code></p><hr><p>• <strong>copy:以前主要用在NSString类型和Block，建立一个索引计数为1的对象，然后释放旧对象。</strong></p><p>• <strong>strong ：除NSString\block以外(注意!这是以前的说法)的OC对象 , 强引用以保证属性作用域结束后不被销毁</strong></p><p><strong>• weak : 当一个对象被销毁时，指针被清空</strong></p><p><code>一般用在已经添加到父控件中的控件,因为父控件会对子控件进行引用,也就是retain,所以自己的作用域结束之后不会被释放</code></p><p><code>系统默认属性是assign。retain是指针的复制，copy是内容的复制</code></p></blockquote><hr><h3 id="用copy修饰字符串时——-gt"><a href="#用copy修饰字符串时——-gt" class="headerlink" title="用copy修饰字符串时——&gt;"></a>用copy修饰字符串时——&gt;</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在setter方法中会判断 传入的字符串 是否是可变的</span><br><span class="line">如果是可变的就分配新的内存再赋值</span><br><span class="line">如果是不可变的就直接赋值地址</span><br><span class="line">而实际上开发中其实大量使用的是不可变的字符串   所以最好使用 strong 修饰字符串,可以提升性能(减少一次判断)</span><br></pre></td></tr></table></figure><hr><h3 id="用copy修饰Block时—-gt-首先要知道Block在非ARC和ARC下的区别"><a href="#用copy修饰Block时—-gt-首先要知道Block在非ARC和ARC下的区别" class="headerlink" title="用copy修饰Block时—-&gt;首先要知道Block在非ARC和ARC下的区别"></a>用copy修饰Block时—-&gt;首先要知道Block在非ARC和ARC下的区别</h3><p><strong><em>非ARC环境下:</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">block访问外部局部变量,block存放栈里面</span><br><span class="line">只要block访问变量,而且是整个app都存在的变量,那么肯定在全局区</span><br><span class="line">在非ARC中.不能使用retain引用block,因为不会放在堆里面,在非ARC中只能使用copy,才会把block放在堆里面</span><br></pre></td></tr></table></figure><p><strong><em>ARC环境下:</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">只要block访问了外部局部变量,block就会存放到堆里面</span><br><span class="line">可以使用strong去引用  因为本身就已经是存放在堆区了</span><br><span class="line">也可以用copy，但是用stong性能更好</span><br></pre></td></tr></table></figure></p><hr><h4 id="做个小总结-只说ARC环境下的"><a href="#做个小总结-只说ARC环境下的" class="headerlink" title="做个小总结(只说ARC环境下的)"></a>做个小总结(只说ARC环境下的)</h4><p> <strong>用strong修饰OC对象以及NSString和Block , 没添加到父控件上的控件</strong><br> <strong>用weak修饰已经被添加到父控件上的控件 以及 代理对象</strong><br> <strong>用assign基本数据类型、枚举、结构体(非OC对象)   class类型</strong><br> <strong>用copy修饰一种情况下的NSString–&gt;不确定赋值过程中用的是可变还是不可变字符串</strong></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h2 id=&quot;首先从简单到复杂大致分个类&quot;&gt;&lt;a href=&quot;#首先从简单到复杂大致分个类&quot; class=&quot;headerlink&quot; title=&quot;首先从简单到复杂大致分个类&quot;&gt;&lt;/a&gt;首先从简单到复杂大致分个类&lt;/h2&gt;&lt;h6 id=&quot;1-自定义getter-sett
      
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOSDevelopment/"/>
    
      <category term="原理分析" scheme="http://yoursite.com/categories/iOSDevelopment/Analysis/"/>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>在使用TablView时碰到Nan错误</title>
    <link href="http://yoursite.com/2016/04/07/%E5%9C%A8%E4%BD%BF%E7%94%A8TablView%E6%97%B6%E7%A2%B0%E5%88%B0Nan%E9%94%99%E8%AF%AF/"/>
    <id>http://yoursite.com/2016/04/07/在使用TablView时碰到Nan错误/</id>
    <published>2016-04-07T15:14:00.000Z</published>
    <updated>2018-01-09T03:52:40.000Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><p>前几天做项目的时候遇到一个奇葩的问题，程序本来运行得好好的，然后突然就崩了，报了一个Nan错误<br> <figure class="highlight plain"><figcaption><span>Terminating app due to uncaught exception 'CALayerInvalidGeometry', reason: 'CALayer position contains NaN: [187.5 nan]'</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure></p></blockquote><p>后来打了一大堆断点发现数据源方法返回cell高度的时候出现了Nan类型，结合该cell对应的模型才发现是网络数据返回了一个 0 数据，而我把这个数据作为除数来计算了，因此出现了Nan类型。</p><h6 id="这种错误是在float经过函数运行出了不是数字的值，nan的意思就是not-a-number"><a href="#这种错误是在float经过函数运行出了不是数字的值，nan的意思就是not-a-number" class="headerlink" title="这种错误是在float经过函数运行出了不是数字的值，nan的意思就是not a number"></a>这种错误是在float经过函数运行出了不是数字的值，nan的意思就是not a number</h6><hr><p>后来解决了问题再去百度的时候发现出现Nan错误的不止除以0这种情况，还有以下几种(以后要多注意一下)</p><blockquote><p>1.除以0<br>2.sizeWithFont的字符串为nil<br>3.数学函数不正确运算<br>解决方法除了排除数据源以及运算问题之外,还可以用isnan()函数判断是不是Nan类型<br><figure class="highlight plain"><figcaption><span>_x </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (!isnan(_x)) &#123;</span><br><span class="line">return _x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><hr><p><a href="http://www.minroad.com/?p=403" target="_blank" rel="noopener">文中部分内容引自这里</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;前几天做项目的时候遇到一个奇葩的问题，程序本来运行得好好的，然后突然就崩了，报了一个Nan错误&lt;br&gt; &lt;figure class=&quot;highlight plain&quot;&gt;&lt;figcaption&gt;&lt;span&gt;Terminating app d
      
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOSDevelopment/"/>
    
      <category term="项目/日常问题" scheme="http://yoursite.com/categories/iOSDevelopment/Project-daily/"/>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>关于模拟器上键盘输入的一些小问题</title>
    <link href="http://yoursite.com/2016/04/04/%E5%85%B3%E4%BA%8E%E6%A8%A1%E6%8B%9F%E5%99%A8%E4%B8%8A%E9%94%AE%E7%9B%98%E8%BE%93%E5%85%A5%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2016/04/04/关于模拟器上键盘输入的一些小问题/</id>
    <published>2016-04-04T04:38:00.000Z</published>
    <updated>2018-01-09T12:49:51.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="平时用模拟器键盘输入的时候总会有一大堆令人无语的自动联想、纠错、拼写检查…不胜其烦！本来一直以为是输入法的问题，后来才发现原来是苹果做的小优化……"><a href="#平时用模拟器键盘输入的时候总会有一大堆令人无语的自动联想、纠错、拼写检查…不胜其烦！本来一直以为是输入法的问题，后来才发现原来是苹果做的小优化……" class="headerlink" title="平时用模拟器键盘输入的时候总会有一大堆令人无语的自动联想、纠错、拼写检查…不胜其烦！本来一直以为是输入法的问题，后来才发现原来是苹果做的小优化……"></a>平时用模拟器键盘输入的时候总会有一大堆令人无语的自动联想、纠错、拼写检查…不胜其烦！本来一直以为是输入法的问题，后来才发现原来是苹果做的小优化……</h5><hr><h6 id="不知道大家平时在做测试的时候有没有经常遇到下面的这些这种情况呢"><a href="#不知道大家平时在做测试的时候有没有经常遇到下面的这些这种情况呢" class="headerlink" title="不知道大家平时在做测试的时候有没有经常遇到下面的这些这种情况呢~~"></a>不知道大家平时在做测试的时候有没有经常遇到下面的这些这种情况呢~~</h6><hr><blockquote><p><img src="http://www.z4a.net/images/2018/01/09/keyboard_1.jpg" alt="keyboard_1.jpg"><br>没错就是它，有时候做登录界面测试是时老是弹出来，输完自己正确的账号或密码之后以为可以了结果它一个回马枪”帮”你把错误”修正”了，我还要重新输一遍还要小心翼翼地点那个小叉叉,妈的智障！</p><blockquote><h6 id="property-nonatomic-UITextAutocorrectionType-autocorrectionType"><a href="#property-nonatomic-UITextAutocorrectionType-autocorrectionType" class="headerlink" title="@property(nonatomic) UITextAutocorrectionType autocorrectionType;"></a>@property(nonatomic) UITextAutocorrectionType autocorrectionType;</h6><p>找了半天，原来是这个自动纠错属性在作怪，查看了一下它的枚举值，也就一个默认一个yes一个no，高兴得我立马把它改UITextAutocorrectionTypeNo，结果当然是整个世界都清净啦~~(≧▽≦)/~啦啦啦</p></blockquote></blockquote><hr><blockquote><h6 id="另外，除了上面那个比较坑的之外，还有下面这个"><a href="#另外，除了上面那个比较坑的之外，还有下面这个" class="headerlink" title="另外，除了上面那个比较坑的之外，还有下面这个"></a>另外，除了上面那个比较坑的之外，还有下面这个</h6><p><img src="http://www.z4a.net/images/2018/01/09/keyboard_2.png" alt="keyboard_2.png"><br>这个自动联想功能嘛，有人喜欢有人嫌…不过有时候真的挺烦它的，联想的东西几乎没卵用，顺手把它干掉吧~</p><blockquote><h6 id="property-nonatomic-UITextAutocapitalizationType-autocapitalizationType"><a href="#property-nonatomic-UITextAutocapitalizationType-autocapitalizationType" class="headerlink" title="@property(nonatomic)UITextAutocapitalizationType autocapitalizationType;"></a>@property(nonatomic)UITextAutocapitalizationType autocapitalizationType;</h6><p>它有四个枚举值<br>UITextAutocapitalizationTypeNone,            不进行联想<br>UITextAutocapitalizationTypeWords,           单词联想<br>UITextAutocapitalizationTypeSentences,     整句联想<br>UITextAutocapitalizationTypeAllCharacters, 所有字节都联想</p></blockquote></blockquote><hr><blockquote><h6 id="然后是在找这些个属性的时候发现的其他属性-感觉挺有用的，这些平时在Storyboard也能见到的，只不过代码似乎用得比较少"><a href="#然后是在找这些个属性的时候发现的其他属性-感觉挺有用的，这些平时在Storyboard也能见到的，只不过代码似乎用得比较少" class="headerlink" title="然后是在找这些个属性的时候发现的其他属性,感觉挺有用的，这些平时在Storyboard也能见到的，只不过代码似乎用得比较少~~"></a>然后是在找这些个属性的时候发现的其他属性,感觉挺有用的，这些平时在Storyboard也能见到的，只不过代码似乎用得比较少~~</h6><blockquote><h6 id="property-nonatomic-UITextSpellCheckingType-spellCheckingType"><a href="#property-nonatomic-UITextSpellCheckingType-spellCheckingType" class="headerlink" title="@property(nonatomic) UITextSpellCheckingType spellCheckingType"></a>@property(nonatomic) UITextSpellCheckingType spellCheckingType</h6><p>自动拼写检查，好像平时没怎么见它发挥作用…</p></blockquote><hr><blockquote><h6 id="property-nonatomic-UIKeyboardAppearance-keyboardAppearance"><a href="#property-nonatomic-UIKeyboardAppearance-keyboardAppearance" class="headerlink" title="@property(nonatomic) UIKeyboardAppearance keyboardAppearance;"></a>@property(nonatomic) UIKeyboardAppearance keyboardAppearance;</h6><p>键盘外观？？？其实也就一个日用一个夜用~~</p></blockquote><hr><blockquote><h6 id="property-nonatomic-BOOL-enablesReturnKeyAutomatically"><a href="#property-nonatomic-BOOL-enablesReturnKeyAutomatically" class="headerlink" title="@property(nonatomic) BOOL enablesReturnKeyAutomatically;"></a>@property(nonatomic) BOOL enablesReturnKeyAutomatically;</h6><p>以前我一直以为这个Return按钮的disable状态要自己控制，今天才发现原来苹果已经做好了,只要输入内容长度为0按钮就不可用…</p></blockquote><hr><blockquote><h6 id="property-nonatomic-getter-isSecureTextEntry-BOOL-secureTextEntry"><a href="#property-nonatomic-getter-isSecureTextEntry-BOOL-secureTextEntry" class="headerlink" title="@property(nonatomic,getter=isSecureTextEntry) BOOL secureTextEntry;"></a>@property(nonatomic,getter=isSecureTextEntry) BOOL secureTextEntry;</h6><p>安全输入，也就是暗文,做密码输入用的</p></blockquote><hr><blockquote><h6 id="property-nonatomic-UIKeyboardType-keyboardType"><a href="#property-nonatomic-UIKeyboardType-keyboardType" class="headerlink" title="@property(nonatomic) UIKeyboardType keyboardType;"></a>@property(nonatomic) UIKeyboardType keyboardType;</h6><p>键盘类型，自己测试了，但是有一些感觉跟其他的键盘长得一模一样，也不知道区别在哪里，就没有做记录了<br><img src="http://www.z4a.net/images/2018/01/09/keyboard_3.png" alt="keyboard_3.png"></p></blockquote><hr><blockquote><h6 id="property-nonatomic-UIKeyboardType-keyboardType-1"><a href="#property-nonatomic-UIKeyboardType-keyboardType-1" class="headerlink" title="@property(nonatomic) UIKeyboardType keyboardType;"></a>@property(nonatomic) UIKeyboardType keyboardType;</h6><p>Return按钮的类型，这里列举几个常用的，其他的就自己看吧  ~<br><img src="http://www.z4a.net/images/2018/01/09/keyboard_4.png" alt="keyboard_4.jpg"></p></blockquote></blockquote><hr><h6 id="这些个属性都是定义在UITextInputTraits协议里面的，而且UITextField-和-UITextView-都遵守了，所以都可以使用。不过呢，其实这些在Storyboard里面都可以找得到的…"><a href="#这些个属性都是定义在UITextInputTraits协议里面的，而且UITextField-和-UITextView-都遵守了，所以都可以使用。不过呢，其实这些在Storyboard里面都可以找得到的…" class="headerlink" title="这些个属性都是定义在UITextInputTraits协议里面的，而且UITextField 和 UITextView 都遵守了，所以都可以使用。不过呢，其实这些在Storyboard里面都可以找得到的…"></a>这些个属性都是定义在UITextInputTraits协议里面的，而且UITextField 和 UITextView 都遵守了，所以都可以使用。不过呢，其实这些在Storyboard里面都可以找得到的…</h6><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;平时用模拟器键盘输入的时候总会有一大堆令人无语的自动联想、纠错、拼写检查…不胜其烦！本来一直以为是输入法的问题，后来才发现原来是苹果做的小优化……&quot;&gt;&lt;a href=&quot;#平时用模拟器键盘输入的时候总会有一大堆令人无语的自动联想、纠错、拼写检查…不胜其烦！本来一直以
      
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOSDevelopment/"/>
    
      <category term="项目/日常问题" scheme="http://yoursite.com/categories/iOSDevelopment/Project-daily/"/>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>关于MJRefresh</title>
    <link href="http://yoursite.com/2016/03/30/%E5%85%B3%E4%BA%8EMJRefresh/"/>
    <id>http://yoursite.com/2016/03/30/关于MJRefresh/</id>
    <published>2016-03-30T09:04:00.000Z</published>
    <updated>2018-01-09T03:51:13.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="刚弄清楚MJReFresh每一个类主要的作用，写下来方便以后查看"><a href="#刚弄清楚MJReFresh每一个类主要的作用，写下来方便以后查看" class="headerlink" title="刚弄清楚MJReFresh每一个类主要的作用，写下来方便以后查看"></a>刚弄清楚MJReFresh每一个类主要的作用，写下来方便以后查看</h5><hr><p>• MJRefreshComponent        刷新控件的基类  KVO监听ScrollerView的ContentOffset 和 ContentSize 以及  刷新手势</p><h2 id="•-UIScrollView-MJRefresh-对UIScrollView添加了上拉下拉刷新控件-以及刷新回调Block"><a href="#•-UIScrollView-MJRefresh-对UIScrollView添加了上拉下拉刷新控件-以及刷新回调Block" class="headerlink" title="• UIScrollView+MJRefresh    对UIScrollView添加了上拉下拉刷新控件 以及刷新回调Block"></a>• UIScrollView+MJRefresh    对UIScrollView添加了上拉下拉刷新控件 以及刷新回调Block</h2><p>• MJRefreshHeader 头部刷新控件           自带记录刷新时间<br>    ○ MJRefreshStateHeader                 可以自定义文字<br>        § MJRefreshNormalHeader               可以设置菊花样式</p><pre><code>§ MJRefreshGifHeader                  可自定义刷新控件的动态图片</code></pre><hr><p>• MJRefreshFooter  底部刷新控件            自带记录刷新时间<br>    ○ MJRefreshAutoFooter                    可自定义文字<br>        § MJRefreshAutoStateFooter                可设置底部出现多少时自动刷新<br>            □ MJRefreshAutoNormalFooter              可以自定义文字<br>            □ MJRefreshAutoGifFooter                 可自定义刷新控件的动态图片</p><pre><code>§ MJRefreshBackFooter                  未提供接口,内部实现了刷新后回弹效果    □ MJRefreshBackStateFooter            可以自定义文字        ® MJRefreshBackGifFooter             可自定义刷新控件的动态图片        ® MJRefreshBackNormalFooter          可设置菊花样式</code></pre><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;刚弄清楚MJReFresh每一个类主要的作用，写下来方便以后查看&quot;&gt;&lt;a href=&quot;#刚弄清楚MJReFresh每一个类主要的作用，写下来方便以后查看&quot; class=&quot;headerlink&quot; title=&quot;刚弄清楚MJReFresh每一个类主要的作用，写下来方便
      
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOSDevelopment/"/>
    
      <category term="第三方框架相关" scheme="http://yoursite.com/categories/iOSDevelopment/Framework/"/>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>协议和代理</title>
    <link href="http://yoursite.com/2016/03/28/%E5%8D%8F%E8%AE%AE%E5%92%8C%E4%BB%A3%E7%90%86/"/>
    <id>http://yoursite.com/2016/03/28/协议和代理/</id>
    <published>2016-03-27T17:09:00.000Z</published>
    <updated>2018-01-09T03:52:13.000Z</updated>
    
    <content type="html"><![CDATA[<hr><p>protocol-<strong>协议</strong>，就是使用了这个协议后就要按照这个协议来办事，协议要求实现的方法就一定要实现。<br>delegate-<strong>委托</strong>，顾名思义就是委托别人办事，就是当一件事情发生后，自己不处理，让别人来处理。</p><hr><p><strong><em>编写规范</em></strong><br>1&gt;一般情况下,当前协议属于谁,我们就将协议定义到谁的头文件中<br>2&gt;协议的名称一般以它属于的那个类的类名开头,后面跟上protocol 或者 delegate<br>3&gt;协议中的方法名称一般以协议的名称protocol之前的作为开头<br>4&gt;一般情况下协议中的方法会将触发该协议的对象传递出去<br>5&gt;一般情况下  类中都会有一个叫delegate  的属性<br>6&gt;当某一个类要成为另外一个类的代理的时候,一般情况下: .h中用@protocol 协议名称;告诉当前类这是一个协议        在.m中用#import  真正的导入一个协议的声明<br>7&gt;协议必须遵守基协议<nsobject></nsobject></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;protocol-&lt;strong&gt;协议&lt;/strong&gt;，就是使用了这个协议后就要按照这个协议来办事，协议要求实现的方法就一定要实现。&lt;br&gt;delegate-&lt;strong&gt;委托&lt;/strong&gt;，顾名思义就是委托别人办事，就是当一件事情发生后，自己不处理，让别
      
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOSDevelopment/"/>
    
      <category term="面试问题" scheme="http://yoursite.com/categories/iOSDevelopment/InterviewFAQ/"/>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>UITabBarController</title>
    <link href="http://yoursite.com/2016/03/26/UITabBarController/"/>
    <id>http://yoursite.com/2016/03/26/UITabBarController/</id>
    <published>2016-03-26T07:02:00.000Z</published>
    <updated>2018-01-09T03:54:34.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h5 id="UITabBarController与UINavigationController有些类似又有些区别，因此最好通过两个控制器的对比来了解其结构。"><a href="#UITabBarController与UINavigationController有些类似又有些区别，因此最好通过两个控制器的对比来了解其结构。" class="headerlink" title="UITabBarController与UINavigationController有些类似又有些区别，因此最好通过两个控制器的对比来了解其结构。"></a>UITabBarController与UINavigationController有些类似又有些区别，因此最好通过两个控制器的对比来了解其结构。</h5><hr><h4 id="从共同点看"><a href="#从共同点看" class="headerlink" title="从共同点看"></a>从共同点看</h4><blockquote><ol><li>它们都是通过一个childViewControllers数组来存储子控制器以强引用它们，然后把它们对应的View显示到屏幕上</li><li>UINavigationController有一个NavigationBar始终显示在最前面，<br>UITabBarController也有一个tabBar始终显示在最前面</li></ol></blockquote><hr><h4 id="从不同点看"><a href="#从不同点看" class="headerlink" title="从不同点看"></a>从不同点看</h4><blockquote><h6 id="显示子控制器的View"><a href="#显示子控制器的View" class="headerlink" title="显示子控制器的View"></a>显示子控制器的View</h6><ol><li>UINavigationController只有在需要显示某个控制器的View的时候才会加载该View并且把原本显示的View移除(这里只是移除View，但是控制器并没有移除)</li><li>UITabBarController则是在一开始显示的时候就把所有的View都加载进内存，需要显示某个View的时候就直接拿过来，原本的View也不会被移除</li></ol><hr><h6 id="导航条和标签栏"><a href="#导航条和标签栏" class="headerlink" title="导航条和标签栏"></a>导航条和标签栏</h6><ul><li>导航条的y值是从20开始的, 但内部有一个UIImageView子控件超过导航条高度，因此看到的是64高度，此外 导航条底部还有一个子控件 -&gt; 一根线(一张阴影图片)</li><li>一个导航控制器只有一个NavigationBar也就是所有的子控制器共用同一个导航条，导航条显示的内容和栈顶控制器有关,所以导航条上显示的内容由栈顶控制器控制</li><li>标签栏的高度为49，它的子控件除了与子控制器相对应的UITabBarButton按钮还有 背景UIImageView和分割线UIVIew</li><li>在子控制器中是无法拿到TabBar的,只能拿到UItabBarItem 来设置</li></ul></blockquote><hr><h3 id="暂时了解的也就这些了，以后认识更加深刻再来补上"><a href="#暂时了解的也就这些了，以后认识更加深刻再来补上" class="headerlink" title="暂时了解的也就这些了，以后认识更加深刻再来补上..."></a><code>暂时了解的也就这些了，以后认识更加深刻再来补上...</code></h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h5 id=&quot;UITabBarController与UINavigationController有些类似又有些区别，因此最好通过两个控制器的对比来了解其结构。&quot;&gt;&lt;a href=&quot;#UITabBarController与UINavigationController有些
      
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOSDevelopment/"/>
    
      <category term="原理分析" scheme="http://yoursite.com/categories/iOSDevelopment/Analysis/"/>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>+load和+initialize的区别</title>
    <link href="http://yoursite.com/2016/03/26/+load%E5%92%8C+initialize%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2016/03/26/+load和+initialize的区别/</id>
    <published>2016-03-26T03:24:00.000Z</published>
    <updated>2018-01-09T03:53:11.000Z</updated>
    
    <content type="html"><![CDATA[<hr><p><strong>在不考虑一切继承、分类的最简单最普通的情况下：</strong></p><ul><li>调用时刻:<blockquote><p>load:程序启动时,类被加载进内存就调用<br>initialize:当第一次使用这个类或者其子类就会调用</p></blockquote></li><li>调用次数<blockquote><p>load:因为加载进内存只会加载一次，所以也只会调用一次<br>initialize:不确定,具体根据子类和具体调用情况<br><code>比如有个类,它有一个子类,第一次使用子类时,父类的initialize会被调用2次</code></p></blockquote></li></ul><hr><p><strong>上面说的只是普通情况。但是呢，一个类可能继承于某个super类，还有可能有自己的分类，如果分类中也实现了load方法，它们的调用顺序是怎么样的呢？</strong></p><blockquote><p>这里需要知道—&gt;覆盖方法在分类中的体现<br>如果父类本身中的方法在子类中被重写，则会优先执行子类中的方法<br>如果类本身中的方法在分类中被重写，则会优先执行分类中的方法</p></blockquote><p><strong>但是这里必须要知道一个特例-&gt;+load</strong></p><blockquote><p><code>系统首先会调用 super类的load方法，然后再调用该类自身的load方法，再次才会调用该类的分类重写的load方法，也即是说整个继承链包括分类扩展中的load方法都会被执行，只是执行顺序需要关注一下。</code></p></blockquote><h2 id="也就是说，假如你重写了某个类的load方法，同时又在该类的分类中也重写了load方法，你就会发现这个类的load被调用了两次。"><a href="#也就是说，假如你重写了某个类的load方法，同时又在该类的分类中也重写了load方法，你就会发现这个类的load被调用了两次。" class="headerlink" title="也就是说，假如你重写了某个类的load方法，同时又在该类的分类中也重写了load方法，你就会发现这个类的load被调用了两次。"></a><strong>也就是说，假如你重写了某个类的load方法，同时又在该类的分类中也重写了load方法，你就会发现这个类的load被调用了两次。</strong></h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;&lt;strong&gt;在不考虑一切继承、分类的最简单最普通的情况下：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调用时刻:&lt;blockquote&gt;
&lt;p&gt;load:程序启动时,类被加载进内存就调用&lt;br&gt;initialize:当第一次使用这个类或者其子类就会调用&lt;/p
      
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOSDevelopment/"/>
    
      <category term="原理分析" scheme="http://yoursite.com/categories/iOSDevelopment/Analysis/"/>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
</feed>
